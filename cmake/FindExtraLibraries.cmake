#[[
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0.  If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright 1997 - July 2008 CWI, August 2008 - 2019 MonetDB B.V.
#]]

# On this file we test for optional libraries for MonetDB compilation

if(NOT ${WITH_BZ2} STREQUAL "NO")
	include(FindBZip2)

	if(BZip2_FOUND)
		set(HAVE_LIBBZ2 ON CACHE INTERNAL "bzip2 library is available" FORCE)
	elseif(${WITH_BZ2} STREQUAL "YES")
		message(FATAL_ERROR "bzip2 library not found")
	endif()
endif()
if(NOT BZip2_FOUND)
	set(HAVE_LIBBZ2 OFF CACHE INTERNAL "bzip2 library is available" FORCE)
	set(BZIP2_INCLUDE_DIR "" CACHE INTERNAL "bzip2 include directories path" FORCE)
	set(BZIP2_LIBRARIES "" CACHE INTERNAL "bzip2 libraries to link" FORCE)
endif()

if(NOT ${WITH_CURL} STREQUAL "NO")
	include(FindCURL)

	if(CURL_FOUND)
		set(HAVE_CURL ON CACHE INTERNAL "curl library is available" FORCE)
	elseif(${WITH_CURL} STREQUAL "YES")
		message(FATAL_ERROR "curl library not found")
	endif()
endif()
if(NOT CURL_FOUND)
	set(HAVE_CURL OFF CACHE INTERNAL "curl library is available" FORCE)
	set(CURL_INCLUDE_DIR "" CACHE INTERNAL "curl include directories path" FORCE)
	set(CURL_LIBRARIES "" CACHE INTERNAL "curl libraries to link" FORCE)
endif()

if(NOT ${WITH_LIBLZMA} STREQUAL "NO")
	include(FindLibLZMA)

	if(LIBLZMA_FOUND)
		set(HAVE_LIBLZMA ON CACHE INTERNAL "liblzma library is available" FORCE)
	elseif(${WITH_LIBLZMA} STREQUAL "YES")
		message(FATAL_ERROR "liblzma library not found")
	endif()
endif()
if(NOT LIBLZMA_FOUND)
	set(HAVE_LIBLZMA OFF CACHE INTERNAL "liblzma library is available" FORCE)
	set(LIBLZMA_INCLUDE_DIR "" CACHE INTERNAL "liblzma include directories path" FORCE)
	set(LIBLZMA_LIBRARIES "" CACHE INTERNAL "liblzma libraries to link" FORCE)
endif()

if(NOT ${WITH_LIBXML2} STREQUAL "NO")
	include(FindLibXml2)

	if(LIBXML2_FOUND)
		set(HAVE_LIBXML ON CACHE INTERNAL "libxml2 library is available" FORCE)
	elseif(${WITH_LIBXML2} STREQUAL "YES")
		message(FATAL_ERROR "libxml2 library not found")
	endif()
endif()
if(NOT LIBXML2_FOUND)
	set(HAVE_LIBXML OFF CACHE INTERNAL "libxml2 library is available" FORCE)
	set(LIBXML2_INCLUDE_DIR "" CACHE INTERNAL "libxml2 include directories path" FORCE)
	set(LIBXML2_LIBRARIES "" CACHE INTERNAL "libxml2 libraries to link" FORCE)
endif()

if(NOT ${WITH_LZ4} STREQUAL "NO")
	include(FindLZ4)

	if(LZ4_FOUND)
		set(LZ4_MINIMUM_VERSION "1.8.0")
		if(LZ4_VERSION VERSION_LESS "${LZ4_MINIMUM_VERSION}")
			set(LZ4_FOUND OFF)
			if(${WITH_LZ4} STREQUAL "YES")
				message(FATAL_ERROR "lz4 library found, but the version is too old: ${LZ4_VERSION} < ${LZ4_MINIMUM_VERSION}")
			else()
				message(STATUS "lz4 library found, but the version is too old: ${LZ4_VERSION} < ${LZ4_MINIMUM_VERSION}")
			endif()
		else()
			set(HAVE_LIBLZ4 ON CACHE INTERNAL "lz4 library is available" FORCE)
		endif()
	elseif(${WITH_LZ4} STREQUAL "YES")
		message(FATAL_ERROR "lz4 library not found")
	endif()
endif()
if(NOT LZ4_FOUND)
	set(HAVE_LIBLZ4 OFF CACHE INTERNAL "lz4 library is available" FORCE)
	set(LZ4_INCLUDE_DIR "" CACHE INTERNAL "lz4 include directories path" FORCE)
	set(LZ4_LIBRARIES "" CACHE INTERNAL "lz4 libraries to link" FORCE)
endif()

if(NOT ${WITH_PROJ} STREQUAL "NO")
	include(FindProj)

	if(PROJ_FOUND)
		set(HAVE_PROJ ON CACHE INTERNAL "proj library is available" FORCE)
	elseif(${WITH_PROJ} STREQUAL "YES")
		message(FATAL_ERROR "proj library not found")
	endif()
endif()
if(NOT PROJ_FOUND)
	set(HAVE_PROJ OFF CACHE INTERNAL "proj library is available" FORCE)
	set(PROJ_INCLUDE_DIR "" CACHE INTERNAL "proj include directories path" FORCE)
	set(PROJ_LIBRARIES "" CACHE INTERNAL "proj libraries to link" FORCE)
endif()

if(NOT ${WITH_SNAPPY} STREQUAL "NO")
	include(FindSnappy)

	if(SNAPPY_FOUND)
		set(HAVE_LIBSNAPPY ON CACHE INTERNAL "snappy library is available" FORCE)
	elseif(${WITH_SNAPPY} STREQUAL "YES")
		message(FATAL_ERROR "snappy library not found")
	endif()
endif()
if(NOT SNAPPY_FOUND)
	set(HAVE_LIBSNAPPY OFF CACHE INTERNAL "snappy library is available" FORCE)
	set(SNAPPY_INCLUDE_DIR "" CACHE INTERNAL "snappy include directories path" FORCE)
	set(SNAPPY_LIBRARIES "" CACHE INTERNAL "snappy libraries to link" FORCE)
endif()

if(NOT ${WITH_UUID} STREQUAL "NO")
	include(FindUUID)

	if(UUID_FOUND)
		set(HAVE_UUID ON CACHE INTERNAL "uuid library is available" FORCE)
	elseif(${WITH_UUID} STREQUAL "YES")
		message(FATAL_ERROR "uuid library not found")
	endif()
endif()
if(NOT UUID_FOUND)
	set(HAVE_UUID OFF CACHE INTERNAL "uuid library is available" FORCE)
	set(UUID_INCLUDE_DIR "" CACHE INTERNAL "uuid include directories path" FORCE)
	set(UUID_LIBRARIES "" CACHE INTERNAL "uuid libraries to link" FORCE)
endif()

if(NOT ${WITH_VALGRIND} STREQUAL "NO")
	include(FindValgrind)

	if(VALGRIND_FOUND)
		set(HAVE_VALGRIND ON CACHE INTERNAL "valgrind library is available" FORCE)
	elseif(${WITH_VALGRIND} STREQUAL "YES")
		message(FATAL_ERROR "valgrind library not found")
	endif()
endif()
if(NOT VALGRIND_FOUND)
	set(HAVE_VALGRIND OFF CACHE INTERNAL "valgrind library is available" FORCE)
	set(VALGRIND_INCLUDE_DIR "" CACHE INTERNAL "valgrind include directories path" FORCE)
	set(VALGRIND_LIBRARIES "" CACHE INTERNAL "valgrind libraries to link" FORCE)
endif()

if(NOT ${WITH_ZLIB} STREQUAL "NO")
	include(FindZLIB)

	if(ZLIB_FOUND)
		set(HAVE_LIBZ ON CACHE INTERNAL "zlib library is available" FORCE)
	elseif(${WITH_ZLIB} STREQUAL "YES")
		message(FATAL_ERROR "zlib library not found")
	endif()
endif()
if(NOT ZLIB_FOUND)
	set(HAVE_LIBZ OFF CACHE INTERNAL "zlib library is available" FORCE)
	set(ZLIB_INCLUDE_DIR "" CACHE INTERNAL "zlib include directories path" FORCE)
	set(ZLIB_LIBRARIES "" CACHE INTERNAL "zlib libraries to link" FORCE)
endif()
