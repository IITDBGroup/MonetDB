stdout of test 'upgrade` in directory 'sql/test/emptydb-upgrade-chain-hge` itself:


# 16:53:39 >  
# 16:53:39 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=39660" "--set" "mapi_usock=/var/tmp/mtest-30908/.s.monetdb.39660" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/sjoerd/Monet-stable/var/MonetDB/mTests_sql_test_emptydb-upgrade-chain-hge" "--set" "mal_listing=0" "--set" "embedded_r=yes"
# 16:53:39 >  

# MonetDB 5 server v11.21.16 (hg id: c20b591c1c70+)
# This is an unreleased version
# Serving database 'mTests_sql_test_emptydb-upgrade-chain-hge', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs and 128bit integers dynamically linked
# Found 15.589 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://madrid.da.cwi.nl:39660/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-30908/.s.monetdb.39660
# MonetDB/GIS module loaded
Running database upgrade commands:
set schema sys;
ALTER TABLE sys.keywords SET READ WRITE;
INSERT INTO sys.keywords VALUES ('WINDOW');
drop table sys.systemfunctions;
create view sys.systemfunctions as select id as function_id from sys.functions where system;
grant select on sys.systemfunctions to public;
update sys._tables set system = true where name = 'systemfunctions' and schema_id = (select id from sys.schemas where name = 'sys');
set schema "sys";
commit;

Running database upgrade commands:
set schema "sys";
ALTER TABLE sys.keywords SET READ ONLY;
set schema "sys";
commit;

Running database upgrade commands:
set schema sys;
drop view if exists sys.tablestoragemodel;
drop view if exists sys.storagemodel cascade;
drop function if exists sys.storagemodel() cascade;
drop function if exists sys.imprintsize(bigint, clob) cascade;
drop function if exists sys.hashsize(boolean, bigint) cascade;
drop function if exists sys.heapsize(clob, bigint, int) cascade;
drop function if exists sys.columnsize(clob, bigint, bigint) cascade;
drop procedure if exists sys.storagemodelinit();
drop table if exists sys.storagemodelinput cascade;
drop view if exists sys."storage" cascade;
drop function if exists sys."storage"(clob, clob, clob) cascade;
drop function if exists sys."storage"(clob, clob) cascade;
drop function if exists sys."storage"(clob) cascade;
drop function if exists sys."storage"() cascade;
create function sys."storage"()
returns table (
	"schema" varchar(1024),
	"table" varchar(1024),
	"column" varchar(1024),
	"type" varchar(1024),
	"mode" varchar(15),
	location varchar(1024),
	"count" bigint,
	typewidth int,
	columnsize bigint,
	heapsize bigint,
	hashes bigint,
	phash boolean,
	"imprints" bigint,
	sorted boolean,
	revsorted boolean,
	"unique" boolean,
	orderidx bigint
)
external name sql."storage";
create view sys."storage" as
select * from sys."storage"()
 where ("schema", "table") in (
	SELECT sch."name", tbl."name"
	  FROM sys."tables" AS tbl JOIN sys."schemas" AS sch ON tbl.schema_id = sch.id
	 WHERE tbl."system" = FALSE)
order by "schema", "table", "column";
create view sys."tablestorage" as
select "schema", "table",
	max("count") as "rowcount",
	count(*) as "storages",
	sum(columnsize) as columnsize,
	sum(heapsize) as heapsize,
	sum(hashes) as hashsize,
	sum("imprints") as imprintsize,
	sum(orderidx) as orderidxsize
 from sys."storage"
group by "schema", "table"
order by "schema", "table";
create view sys."schemastorage" as
select "schema",
	count(*) as "storages",
	sum(columnsize) as columnsize,
	sum(heapsize) as heapsize,
	sum(hashes) as hashsize,
	sum("imprints") as imprintsize,
	sum(orderidx) as orderidxsize
 from sys."storage"
group by "schema"
order by "schema";
create function sys."storage"(sname varchar(1024))
returns table (
	"schema" varchar(1024),
	"table" varchar(1024),
	"column" varchar(1024),
	"type" varchar(1024),
	"mode" varchar(15),
	location varchar(1024),
	"count" bigint,
	typewidth int,
	columnsize bigint,
	heapsize bigint,
	hashes bigint,
	phash boolean,
	"imprints" bigint,
	sorted boolean,
	revsorted boolean,
	"unique" boolean,
	orderidx bigint
)
external name sql."storage";
create function sys."storage"(sname varchar(1024), tname varchar(1024))
returns table (
	"schema" varchar(1024),
	"table" varchar(1024),
	"column" varchar(1024),
	"type" varchar(1024),
	"mode" varchar(15),
	location varchar(1024),
	"count" bigint,
	typewidth int,
	columnsize bigint,
	heapsize bigint,
	hashes bigint,
	phash boolean,
	"imprints" bigint,
	sorted boolean,
	revsorted boolean,
	"unique" boolean,
	orderidx bigint
)
external name sql."storage";
create function sys."storage"(sname varchar(1024), tname varchar(1024), cname varchar(1024))
returns table (
	"schema" varchar(1024),
	"table" varchar(1024),
	"column" varchar(1024),
	"type" varchar(1024),
	"mode" varchar(15),
	location varchar(1024),
	"count" bigint,
	typewidth int,
	columnsize bigint,
	heapsize bigint,
	hashes bigint,
	phash boolean,
	"imprints" bigint,
	sorted boolean,
	revsorted boolean,
	"unique" boolean,
	orderidx bigint
)
external name sql."storage";
create table sys.storagemodelinput(
	"schema" varchar(1024) NOT NULL,
	"table" varchar(1024) NOT NULL,
	"column" varchar(1024) NOT NULL,
	"type" varchar(1024) NOT NULL,
	typewidth int NOT NULL,
	"count" bigint NOT NULL,
	"distinct" bigint NOT NULL,
	atomwidth int NOT NULL,
	reference boolean NOT NULL DEFAULT FALSE,
	sorted boolean,
	"unique" boolean,
	isacolumn boolean NOT NULL DEFAULT TRUE
);
create procedure sys.storagemodelinit()
begin
	delete from sys.storagemodelinput;

	insert into sys.storagemodelinput
	select "schema", "table", "column", "type", typewidth, "count",
		case when ("unique" or "type" IN ('varchar', 'char', 'clob', 'json', 'url', 'blob', 'geometry', 'geometrya'))
			then "count" else 0 end,
		case when "count" > 0 and heapsize >= 8192 and "type" in ('varchar', 'char', 'clob', 'json', 'url')
			then cast((heapsize - 8192) / "count" as bigint)
		when "count" > 0 and heapsize >= 32 and "type" in ('blob', 'geometry', 'geometrya')
			then cast((heapsize - 32) / "count" as bigint)
		else typewidth end,
		FALSE, case sorted when true then true else false end, "unique", TRUE
	  from sys."storage";
	update sys.storagemodelinput
	   set reference = TRUE
	 where ("schema", "table", "column") in (
		SELECT fkschema."name", fktable."name", fkkeycol."name"
		  FROM	sys."keys" AS fkkey,
			sys."objects" AS fkkeycol,
			sys."tables" AS fktable,
			sys."schemas" AS fkschema
		WHERE fktable."id" = fkkey."table_id"
		  AND fkkey."id" = fkkeycol."id"
		  AND fkschema."id" = fktable."schema_id"
		  AND fkkey."rkey" > -1 );

	update sys.storagemodelinput
	   set isacolumn = FALSE
	 where ("schema", "table", "column") NOT in (
		SELECT sch."name", tbl."name", col."name"
		  FROM sys."schemas" AS sch,
			sys."tables" AS tbl,
			sys."columns" AS col
		WHERE sch."id" = tbl."schema_id"
		  AND tbl."id" = col."table_id");
end;
create function sys.columnsize(tpe varchar(1024), count bigint)
returns bigint
begin
	if tpe in ('tinyint', 'boolean')
		then return count;
	end if;
	if tpe = 'smallint'
		then return 2 * count;
	end if;
	if tpe in ('int', 'real', 'date', 'time', 'timetz', 'sec_interval', 'month_interval')
		then return 4 * count;
	end if;
	if tpe in ('bigint', 'double', 'timestamp', 'timestamptz', 'inet', 'oid')
		then return 8 * count;
	end if;
	if tpe in ('hugeint', 'decimal', 'uuid', 'mbr')
		then return 16 * count;
	end if;
	if tpe in ('varchar', 'char', 'clob', 'json', 'url')
		then return 4 * count;
	end if;
	if tpe in ('blob', 'geometry', 'geometrya')
		then return 8 * count;
	end if;

	return 8 * count;
end;
create function sys.heapsize(tpe varchar(1024), count bigint, distincts bigint, avgwidth int)
returns bigint
begin
	if tpe in ('varchar', 'char', 'clob', 'json', 'url')
		then return 8192 + ((avgwidth + 8) * distincts);
	end if;
	if tpe in ('blob', 'geometry', 'geometrya')
		then return 32 + (avgwidth * count);
	end if;

	return 0;
end;
create function sys.hashsize(b boolean, count bigint)
returns bigint
begin
	if b = true
		then return 8 * count;
	end if;
	return 0;
end;
create function sys.imprintsize(tpe varchar(1024), count bigint)
returns bigint
begin
	if tpe in ('tinyint', 'boolean')
		then return cast(0.2 * count as bigint);
	end if;
	if tpe = 'smallint'
		then return cast(0.4 * count as bigint);
	end if;
	if tpe in ('int', 'real', 'date', 'time', 'timetz', 'sec_interval', 'month_interval')
		then return cast(0.8 * count as bigint);
	end if;
	if tpe in ('bigint', 'double', 'timestamp', 'timestamptz', 'inet', 'oid')
		then return cast(1.6 * count as bigint);
	end if;
	if tpe in ('hugeint', 'decimal', 'uuid', 'mbr')
		then return cast(3.2 * count as bigint);
	end if;
	return 0;
end;
create view sys.storagemodel as
select "schema", "table", "column", "type", "count",
	sys.columnsize("type", "count") as columnsize,
	sys.heapsize("type", "count", "distinct", "atomwidth") as heapsize,
	sys.hashsize("reference", "count") as hashsize,
	case when isacolumn then sys.imprintsize("type", "count") else 0 end as imprintsize,
	case when (isacolumn and not sorted) then cast(8 * "count" as bigint) else 0 end as orderidxsize,
	sorted, "unique", isacolumn
 from sys.storagemodelinput
order by "schema", "table", "column";
create view sys.tablestoragemodel as
select "schema", "table",
	max("count") as "rowcount",
	count(*) as "storages",
	sum(sys.columnsize("type", "count")) as columnsize,
	sum(sys.heapsize("type", "count", "distinct", "atomwidth")) as heapsize,
	sum(sys.hashsize("reference", "count")) as hashsize,
	sum(case when isacolumn then sys.imprintsize("type", "count") else 0 end) as imprintsize,
	sum(case when (isacolumn and not sorted) then cast(8 * "count" as bigint) else 0 end) as orderidxsize
 from sys.storagemodelinput
group by "schema", "table"
order by "schema", "table";
update sys._tables set system = true where schema_id = (select id from sys.schemas where name = 'sys') and name in ('storage', 'tablestorage', 'schemastorage', 'storagemodelinput', 'storagemodel', 'tablestoragemodel');
update sys.functions set system = true where schema_id = (select id from sys.schemas where name = 'sys') and name in ('storage') and type = 5;
update sys.functions set system = true where schema_id = (select id from sys.schemas where name = 'sys') and name in ('storagemodelinit') and type = 2;
update sys.functions set system = true where schema_id = (select id from sys.schemas where name = 'sys') and name in ('columnsize', 'heapsize', 'hashsize', 'imprintsize') and type = 1;
set schema "sys";
commit;

# MonetDB/SQL module loaded

Ready.

# 15:17:55 >  
# 15:17:55 >  "mclient" "-lsql" "-ftest" "-tnone" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-6495" "--port=30245"
# 15:17:55 >  

#select 1;
% .L2 # table_name
% L2 # name
% tinyint # type
% 1 # length
[ 1	]

# 16:53:39 >  
# 16:53:39 >  "Done."
# 16:53:39 >  

