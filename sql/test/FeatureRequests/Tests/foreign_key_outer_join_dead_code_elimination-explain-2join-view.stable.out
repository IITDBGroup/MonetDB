stdout of test 'foreign_key_outer_join_dead_code_elimination-explain-2join-view` in directory 'sql/test/FeatureRequests` itself:


# 01:44:33 >  
# 01:44:33 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=31552" "--set" "mapi_usock=/var/tmp/mtest-6324/.s.monetdb.31552" "--set" "monet_prompt=" "--forcemito" "--dbpath=/ufs/manegold/_/Monet/default/prefix/_/var/MonetDB/mTests_sql_test_FeatureRequests" "--set" "embedded_r=yes" "--set" "embedded_py=true"
# 01:44:33 >  

# MonetDB 5 server v11.28.0
# This is an unreleased version
# Serving database 'mTests_sql_test_FeatureRequests', using 4 threads
# Compiled for x86_64-pc-linux-gnu/64bit with 128bit integers
# Found 31.309 GiB available main-memory.
# Copyright (c) 1993 - July 2008 CWI.
# Copyright (c) August 2008 - 2018 MonetDB B.V., all rights reserved
# Visit https://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://earth.da.cwi.nl:31552/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-6324/.s.monetdb.31552
# MonetDB/GIS module loaded
# MonetDB/SQL module loaded
# MonetDB/Python2 module loaded
# MonetDB/R   module loaded


# 01:44:33 >  
# 01:44:33 >  "mclient" "-lsql" "-ftest" "-tnone" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-6324" "--port=31552"
# 01:44:33 >  

#set optimizer = 'sequential_pipe';

#explain select count(*) from v2;
% .explain # table_name
% mal # name
% clob # type
% 103 # length
function user.main():void;
    X_1:void := querylog.define("explain select count(*) from v2;":str, "sequential_pipe":str, 11:int);
    X_4:int := sql.mvc();
    C_5:bat[:oid] := sql.tid(X_4:int, "sys":str, "fk":str, true:bit);
    X_19:lng := aggr.count(C_5:bat[:oid]);
    sql.resultSet(".L11":str, "L11":str, "bigint":str, 64:int, 0:int, 7:int, X_19:lng);
end user.main;
#inline               actions= 0 time=1 usec 
#remap                actions= 0 time=1 usec 
#costmodel            actions= 1 time=1 usec 
#coercion             actions= 0 time=1 usec 
#evaluate             actions= 0 time=2 usec 
#emptybind            actions= 1 time=4 usec 
#pushselect           actions= 0 time=2 usec 
#aliases              actions= 1 time=3 usec 
#mergetable           actions= 0 time=16 usec 
#deadcode             actions= 2 time=4 usec 
#aliases              actions= 0 time=0 usec 
#constants            actions= 0 time=2 usec 
#commonTerms          actions= 0 time=2 usec 
#projectionpath       actions= 0 time=1 usec 
#reorder              actions= 1 time=11 usec 
#deadcode             actions= 0 time=3 usec 
#matpack              actions= 0 time=0 usec 
#multiplex            actions= 0 time=1 usec 
#profiler             actions=1 time=0 usec 
#candidates           actions=1 time=0 usec 
#postfix              actions= 1 time=2 usec 
#deadcode             actions= 1 time=3 usec 
#wlc                  actions= 0 time=0 usec 
#garbagecollector     actions= 1 time=19 usec 
#total                actions=26 time=130 usec 

#explain select id       from v2 order by id;
% .explain # table_name
% mal # name
% clob # type
% 118 # length
function user.main():void;
    X_1:void := querylog.define("explain select id from v2 order by id;":str, "sequential_pipe":str, 32:int);
    X_40:bat[:str] := bat.new(nil:str);
    X_46:bat[:int] := bat.new(nil:int);
    X_44:bat[:int] := bat.new(nil:int);
    X_43:bat[:str] := bat.new(nil:str);
    X_42:bat[:str] := bat.new(nil:str);
    X_4:int := sql.mvc();
    C_5:bat[:oid] := sql.tid(X_4:int, "sys":str, "fk":str, true:bit);
    X_9:bat[:int] := sql.bind(X_4:int, "sys":str, "fk":str, "id":str, 0:int);
    X_18:bat[:int] := algebra.projection(C_5:bat[:oid], X_9:bat[:int]);
    (X_33:bat[:int], X_34:bat[:oid], X_35:bat[:oid]) := algebra.sort(X_18:bat[:int], false:bit, false:bit, false:bit);
    X_38:bat[:int] := algebra.projection(X_34:bat[:oid], X_18:bat[:int]);
    X_47:bat[:str] := bat.append(X_40:bat[:str], "sys.v2":str);
    X_49:bat[:str] := bat.append(X_42:bat[:str], "id":str);
    X_51:bat[:str] := bat.append(X_43:bat[:str], "int":str);
    X_53:bat[:int] := bat.append(X_44:bat[:int], 32:int);
    X_55:bat[:int] := bat.append(X_46:bat[:int], 0:int);
    sql.resultSet(X_47:bat[:str], X_49:bat[:str], X_51:bat[:str], X_53:bat[:int], X_55:bat[:int], X_38:bat[:int]);
end user.main;
#inline               actions= 0 time=1 usec 
#remap                actions= 0 time=1 usec 
#costmodel            actions= 1 time=0 usec 
#coercion             actions= 0 time=1 usec 
#evaluate             actions= 0 time=3 usec 
#emptybind            actions= 1 time=5 usec 
#pushselect           actions= 0 time=3 usec 
#aliases              actions= 1 time=4 usec 
#mergetable           actions= 0 time=20 usec 
#deadcode             actions= 2 time=6 usec 
#aliases              actions= 0 time=0 usec 
#constants            actions= 1 time=4 usec 
#commonTerms          actions= 0 time=3 usec 
#projectionpath       actions= 0 time=2 usec 
#reorder              actions= 1 time=16 usec 
#deadcode             actions= 0 time=4 usec 
#matpack              actions= 0 time=0 usec 
#multiplex            actions= 0 time=1 usec 
#profiler             actions=1 time=1 usec 
#candidates           actions=1 time=1 usec 
#postfix              actions= 0 time=1 usec 
#deadcode             actions= 0 time=4 usec 
#wlc                  actions= 0 time=0 usec 
#garbagecollector     actions= 1 time=24 usec 
#total                actions=26 time=156 usec 

#explain select id , v2  from v2 order by id;
% .explain # table_name
% mal # name
% clob # type
% 137 # length
function user.main():void;
    X_1:void := querylog.define("explain select id , v2 from v2 order by id;":str, "sequential_pipe":str, 104:int);
    X_44:bat[:int] := bat.new(nil:int);
    X_4:int := sql.mvc();
    C_5:bat[:oid] := sql.tid(X_4:int, "sys":str, "fk":str, true:bit);
    X_19:bat[:oid] := sql.bind_idxbat(X_4:int, "sys":str, "fk":str, "fk_fk1_fkey":str, 0:int);
    (X_22:bat[:oid], X_23:bat[:oid]) := sql.bind_idxbat(X_4:int, "sys":str, "fk":str, "fk_fk1_fkey":str, 2:int);
    X_21:bat[:oid] := sql.bind_idxbat(X_4:int, "sys":str, "fk":str, "fk_fk1_fkey":str, 1:int);
    X_24:bat[:oid] := sql.delta(X_19:bat[:oid], X_22:bat[:oid], X_23:bat[:oid], X_21:bat[:oid]);
    X_25:bat[:oid] := algebra.projection(C_5:bat[:oid], X_24:bat[:oid]);
    C_33:bat[:oid] := sql.tid(X_4:int, "sys":str, "pk1":str, true:bit);
    (X_35:bat[:oid], X_36:bat[:oid]) := algebra.join(X_25:bat[:oid], C_33:bat[:oid], nil:BAT, nil:BAT, false:bit, nil:lng);
    X_9:bat[:int] := sql.bind(X_4:int, "sys":str, "fk":str, "id":str, 0:int);
    X_18:bat[:int] := algebra.projection(C_5:bat[:oid], X_9:bat[:int]);
    X_43:bat[:int] := algebra.projection(X_35:bat[:oid], X_18:bat[:int]);
    C_41:bat[:oid] := bat.mirror(X_18:bat[:int]);
    C_42:bat[:oid] := algebra.difference(C_41:bat[:oid], X_35:bat[:oid], nil:BAT, nil:BAT, false:bit, false:bit, nil:lng);
    X_26:bat[:oid] := sql.bind_idxbat(X_4:int, "sys":str, "fk":str, "fk_fk2_fkey":str, 0:int);
    (X_29:bat[:oid], X_30:bat[:oid]) := sql.bind_idxbat(X_4:int, "sys":str, "fk":str, "fk_fk2_fkey":str, 2:int);
    X_28:bat[:oid] := sql.bind_idxbat(X_4:int, "sys":str, "fk":str, "fk_fk2_fkey":str, 1:int);
    X_31:bat[:oid] := sql.delta(X_26:bat[:oid], X_29:bat[:oid], X_30:bat[:oid], X_28:bat[:oid]);
    X_32:bat[:oid] := algebra.projection(C_5:bat[:oid], X_31:bat[:oid]);
    X_46:bat[:int] := bat.append(X_44:bat[:int], X_43:bat[:int], true:bit);
    X_48:bat[:int] := algebra.projection(C_42:bat[:oid], X_18:bat[:int]);
    X_49:bat[:int] := bat.append(X_46:bat[:int], X_48:bat[:int], true:bit);
    X_57:bat[:oid] := bat.new(nil:oid);
    X_56:bat[:oid] := algebra.projection(X_35:bat[:oid], X_32:bat[:oid]);
    X_58:bat[:oid] := bat.append(X_57:bat[:oid], X_56:bat[:oid], true:bit);
    X_59:bat[:oid] := algebra.projection(C_42:bat[:oid], X_32:bat[:oid]);
    X_60:bat[:oid] := bat.append(X_58:bat[:oid], X_59:bat[:oid], true:bit);
    X_85:bat[:int] := bat.new(nil:int);
    C_67:bat[:oid] := sql.tid(X_4:int, "sys":str, "pk2":str, true:bit);
    (X_76:bat[:oid], X_77:bat[:oid]) := algebra.join(X_60:bat[:oid], C_67:bat[:oid], nil:BAT, nil:BAT, false:bit, nil:lng);
    X_84:bat[:int] := algebra.projection(X_76:bat[:oid], X_49:bat[:int]);
    C_82:bat[:oid] := bat.mirror(X_49:bat[:int]);
    C_83:bat[:oid] := algebra.difference(C_82:bat[:oid], X_76:bat[:oid], nil:BAT, nil:BAT, false:bit, false:bit, nil:lng);
    X_69:bat[:int] := sql.bind(X_4:int, "sys":str, "pk2":str, "v2":str, 0:int);
    X_87:bat[:int] := bat.append(X_85:bat[:int], X_84:bat[:int], true:bit);
    X_89:bat[:int] := algebra.projection(C_83:bat[:oid], X_49:bat[:int]);
    X_90:bat[:int] := bat.append(X_87:bat[:int], X_89:bat[:int], true:bit);
    X_108:bat[:int] := bat.new(nil:int);
    X_107:bat[:int] := algebra.projectionpath(X_77:bat[:oid], C_67:bat[:oid], X_69:bat[:int]);
    X_109:bat[:int] := bat.append(X_108:bat[:int], X_107:bat[:int], true:bit);
    X_111:bat[:int] := algebra.project(C_83:bat[:oid], nil:int);
    X_112:bat[:int] := bat.append(X_109:bat[:int], X_111:bat[:int], true:bit);
    X_127:bat[:str] := bat.new(nil:str);
    X_133:bat[:int] := bat.new(nil:int);
    X_131:bat[:int] := bat.new(nil:int);
    X_130:bat[:str] := bat.new(nil:str);
    X_129:bat[:str] := bat.new(nil:str);
    (X_119:bat[:int], X_120:bat[:oid], X_121:bat[:oid]) := algebra.sort(X_90:bat[:int], false:bit, false:bit, false:bit);
    X_125:bat[:int] := algebra.projection(X_120:bat[:oid], X_112:bat[:int]);
    X_124:bat[:int] := algebra.projection(X_120:bat[:oid], X_90:bat[:int]);
    X_134:bat[:str] := bat.append(X_127:bat[:str], ".v2":str);
    X_136:bat[:str] := bat.append(X_129:bat[:str], "id":str);
    X_138:bat[:str] := bat.append(X_130:bat[:str], "int":str);
    X_140:bat[:int] := bat.append(X_131:bat[:int], 32:int);
    X_142:bat[:int] := bat.append(X_133:bat[:int], 0:int);
    X_144:bat[:str] := bat.append(X_134:bat[:str], ".v2":str);
    X_145:bat[:str] := bat.append(X_136:bat[:str], "v2":str);
    X_147:bat[:str] := bat.append(X_138:bat[:str], "int":str);
    X_148:bat[:int] := bat.append(X_140:bat[:int], 32:int);
    X_149:bat[:int] := bat.append(X_142:bat[:int], 0:int);
    sql.resultSet(X_144:bat[:str], X_145:bat[:str], X_147:bat[:str], X_148:bat[:int], X_149:bat[:int], X_124:bat[:int], X_125:bat[:int]);
end user.main;
#inline               actions= 0 time=1 usec 
#remap                actions= 0 time=2 usec 
#costmodel            actions= 1 time=1 usec 
#coercion             actions= 2 time=7 usec 
#evaluate             actions= 0 time=5 usec 
#emptybind            actions= 2 time=8 usec 
#pushselect           actions= 0 time=2 usec 
#aliases              actions= 2 time=7 usec 
#mergetable           actions= 0 time=36 usec 
#deadcode             actions=14 time=10 usec 
#aliases              actions= 0 time=1 usec 
#constants            actions= 5 time=6 usec 
#commonTerms          actions= 0 time=5 usec 
#projectionpath       actions= 1 time=8 usec 
#reorder              actions= 1 time=27 usec 
#deadcode             actions= 1 time=7 usec 
#matpack              actions= 0 time=0 usec 
#multiplex            actions= 0 time=1 usec 
#profiler             actions=1 time=2 usec 
#candidates           actions=1 time=1 usec 
#postfix              actions= 0 time=0 usec 
#deadcode             actions= 0 time=6 usec 
#wlc                  actions= 0 time=0 usec 
#garbagecollector     actions= 1 time=24 usec 
#total                actions=26 time=156 usec 

# 01:44:33 >  
# 01:44:33 >  "Done."
# 01:44:33 >  

