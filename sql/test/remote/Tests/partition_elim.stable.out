stdout of test 'partition_elim` in directory 'sql/test/remote` itself:


# 18:37:29 >  
# 18:37:29 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=35081" "--set" "mapi_usock=/var/tmp/mtest-17557/.s.monetdb.35081" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/home/niels/scratch/monetdb/Linux-x86_64/var/MonetDB/mTests_sql_test_remote" "--set" "mal_listing=0" "--set" "embedded_r=yes"
# 18:37:29 >  

# MonetDB 5 server v11.20.0
# This is an unreleased version
# Serving database 'mTests_sql_test_remote', using 4 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs and 128bit integers dynamically linked
# Found 7.333 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://localhost.nes.nl:35081/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-17557/.s.monetdb.35081
# MonetDB/GIS module loaded
# SQL catalog created, loading sql scripts once
# loading sql script: 09_like.sql
# loading sql script: 10_math.sql
# loading sql script: 11_times.sql
# loading sql script: 12_url.sql
# loading sql script: 13_date.sql
# loading sql script: 14_inet.sql
# loading sql script: 15_querylog.sql
# loading sql script: 16_tracelog.sql
# loading sql script: 17_temporal.sql
# loading sql script: 20_vacuum.sql
# loading sql script: 21_dependency_functions.sql
# loading sql script: 22_clients.sql
# loading sql script: 23_skyserver.sql
# loading sql script: 24_zorder.sql
# loading sql script: 25_debug.sql
# loading sql script: 26_sysmon.sql
# loading sql script: 39_analytics.sql
# loading sql script: 39_analytics_hge.sql
# loading sql script: 40_geom.sql
# loading sql script: 40_json.sql
# loading sql script: 40_json_hge.sql
# loading sql script: 41_md5sum.sql
# loading sql script: 45_uuid.sql
# loading sql script: 46_gsl.sql
# loading sql script: 51_sys_schema_extension.sql
# loading sql script: 72_fits.sql
# loading sql script: 74_netcdf.sql
# loading sql script: 75_storagemodel.sql
# loading sql script: 80_statistics.sql
# loading sql script: 80_udf.sql
# loading sql script: 80_udf_hge.sql
# loading sql script: 85_bam.sql
# loading sql script: 90_generator.sql
# loading sql script: 90_generator_hge.sql
# loading sql script: 99_system.sql
# MonetDB/SQL module loaded


# 18:37:29 >  
# 18:37:29 >  "mclient" "-lsql" "-ftest" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-17557" "--port=35081"
# 18:37:29 >  

#create merge table test (x double, y double);
#create table test1 (x double, y double);
#create table test2 (x double, y double);
#create table test3 (x double, y double);
#create table test4 (x double, y double);
#insert into test1 values (1.0, 1.0);
[ 1	]
#insert into test1 values (2.0, 2.0);
[ 1	]
#insert into test2 values (3.0, -1.0);
[ 1	]
#insert into test2 values (4.0, -2.0);
[ 1	]
#insert into test3 values (3.0, 1.0);
[ 1	]
#insert into test3 values (6.0, 2.0);
[ 1	]
#insert into test4 values (7.0, 1.0);
[ 1	]
#insert into test4 values (10.0, 2.0);
[ 1	]
#alter table test1 set read only;
#alter table test2 set read only;
#alter table test3 set read only;
#alter table test4 set read only;
#alter table test add table test1;
#alter table test add table test2;
#alter table test add table test3;
#alter table test add table test4;
#select x from test1 where x between 0 and -1;
% sys.test1 # table_name
% x # name
% double # type
% 24 # length
#select x from test2 where x between 0 and -1;
% sys.test2 # table_name
% x # name
% double # type
% 24 # length
#select x from test3 where x between 0 and -1;
% sys.test3 # table_name
% x # name
% double # type
% 24 # length
#select x from test4 where x between 0 and -1;
% sys.test4 # table_name
% x # name
% double # type
% 24 # length
#select y from test1 where y between 0 and -1;
% sys.test1 # table_name
% y # name
% double # type
% 24 # length
#select y from test2 where y between 0 and -1;
% sys.test2 # table_name
% y # name
% double # type
% 24 # length
#select y from test3 where y between 0 and -1;
% sys.test3 # table_name
% y # name
% double # type
% 24 # length
#select y from test4 where y between 0 and -1;
% sys.test4 # table_name
% y # name
% double # type
% 24 # length
#explain select x,y from test where x between 4.0 and 6.0;
% .explain # table_name
% mal # name
% clob # type
% 130 # length
function user.main():void;
    X_5:void := querylog.define("explain select x,y from test where x between 4.0 and 6.0;":str, "default_pipe":str, 53:int);
barrier X_152:bit := language.dataflow();
    X_45:bat[:dbl] := bat.new(nil:dbl);
    X_8:int := sql.mvc();
    X_126:bat[:dbl] := sql.bind(X_8:int, "sys":str, "test2":str, "x":str, 0:int, 0:int, 2:int);
    X_131:bat[:bit] := batcalc.between(X_126:bat[:dbl], 4:dbl, 6:dbl, false:bit, true:bit, true:bit, false:bit, false:bit);
    C_123:bat[:oid] := sql.tid(X_8:int, "sys":str, "test2":str, 0:int, 2:int);
    C_133:bat[:oid] := algebra.select(X_131:bat[:bit], C_123:bat[:oid], true:bit, true:bit, true:bit, true:bit, false:bit);
    X_135:bat[:dbl] := algebra.projection(C_133:bat[:oid], X_126:bat[:dbl]);
    X_127:bat[:dbl] := sql.bind(X_8:int, "sys":str, "test2":str, "x":str, 0:int, 1:int, 2:int);
    X_132:bat[:bit] := batcalc.between(X_127:bat[:dbl], 4:dbl, 6:dbl, false:bit, true:bit, true:bit, false:bit, false:bit);
    C_125:bat[:oid] := sql.tid(X_8:int, "sys":str, "test2":str, 1:int, 2:int);
    C_134:bat[:oid] := algebra.select(X_132:bat[:bit], C_125:bat[:oid], true:bit, true:bit, true:bit, true:bit, false:bit);
    X_136:bat[:dbl] := algebra.projection(C_134:bat[:oid], X_127:bat[:dbl]);
    X_147:bat[:dbl] := mat.packIncrement(X_135:bat[:dbl], 2:int);
    X_29:bat[:dbl] := mat.packIncrement(X_147:bat[:dbl], X_136:bat[:dbl]);
    X_33:bat[:dbl] := sql.bind(X_8:int, "sys":str, "test3":str, "x":str, 0:int);
    X_41:bat[:bit] := batcalc.between(X_33:bat[:dbl], 4:dbl, 6:dbl, false:bit, true:bit, true:bit, false:bit, false:bit);
    C_31:bat[:oid] := sql.tid(X_8:int, "sys":str, "test3":str);
    C_42:bat[:oid] := algebra.select(X_41:bat[:bit], C_31:bat[:oid], true:bit, true:bit, true:bit, true:bit, false:bit);
    X_35:bat[:dbl] := sql.bind(X_8:int, "sys":str, "test3":str, "y":str, 0:int);
    X_44:bat[:dbl] := algebra.projection(C_42:bat[:oid], X_35:bat[:dbl]);
    X_43:bat[:dbl] := algebra.projection(C_42:bat[:oid], X_33:bat[:dbl]);
    X_129:bat[:dbl] := sql.bind(X_8:int, "sys":str, "test2":str, "y":str, 0:int, 1:int, 2:int);
    X_138:bat[:dbl] := algebra.projection(C_134:bat[:oid], X_129:bat[:dbl]);
    X_128:bat[:dbl] := sql.bind(X_8:int, "sys":str, "test2":str, "y":str, 0:int, 0:int, 2:int);
    X_137:bat[:dbl] := algebra.projection(C_133:bat[:oid], X_128:bat[:dbl]);
    X_47:bat[:dbl] := bat.append(X_45:bat[:dbl], X_29:bat[:dbl], true:bit);
    X_48:bat[:dbl] := bat.append(X_47:bat[:dbl], X_43:bat[:dbl], true:bit);
    X_49:bat[:dbl] := bat.new(nil:dbl);
    X_149:bat[:dbl] := mat.packIncrement(X_137:bat[:dbl], 2:int);
    X_30:bat[:dbl] := mat.packIncrement(X_149:bat[:dbl], X_138:bat[:dbl]);
    X_50:bat[:dbl] := bat.append(X_49:bat[:dbl], X_30:bat[:dbl], true:bit);
    X_51:bat[:dbl] := bat.append(X_50:bat[:dbl], X_44:bat[:dbl], true:bit);
    X_53:bat[:str] := bat.new(nil:str);
    X_59:bat[:int] := bat.new(nil:int);
    X_57:bat[:int] := bat.new(nil:int);
    X_56:bat[:str] := bat.new(nil:str);
    X_55:bat[:str] := bat.new(nil:str);
    X_60:bat[:str] := bat.append(X_53:bat[:str], ".test":str);
    X_62:bat[:str] := bat.append(X_55:bat[:str], "x":str);
    X_64:bat[:str] := bat.append(X_56:bat[:str], "double":str);
    X_66:bat[:int] := bat.append(X_57:bat[:int], 53:int);
    X_68:bat[:int] := bat.append(X_59:bat[:int], 0:int);
    X_70:bat[:str] := bat.append(X_60:bat[:str], ".test":str);
    X_71:bat[:str] := bat.append(X_62:bat[:str], "y":str);
    X_73:bat[:str] := bat.append(X_64:bat[:str], "double":str);
    X_74:bat[:int] := bat.append(X_66:bat[:int], 53:int);
    X_75:bat[:int] := bat.append(X_68:bat[:int], 0:int);
    language.pass(X_126:bat[:dbl]);
    language.pass(X_127:bat[:dbl]);
    language.pass(C_42:bat[:oid]);
    language.pass(X_33:bat[:dbl]);
    language.pass(C_134:bat[:oid]);
    language.pass(C_133:bat[:oid]);
exit X_152:bit;
    sql.resultSet(X_70:bat[:str], X_71:bat[:str], X_73:bat[:str], X_74:bat[:int], X_75:bat[:int], X_48:bat[:dbl], X_51:bat[:dbl]);
end user.main;
#inline               actions= 0 time=1 usec 
#remap                actions= 0 time=2 usec 
#costmodel            actions= 1 time=2 usec 
#coercion             actions= 0 time=2 usec 
#aliases              actions= 6 time=9 usec 
#evaluate             actions= 4 time=18 usec 
#emptybind            actions= 0 time=1 usec 
#pushselect           actions= 6 time=43 usec 
#aliases              actions=14 time=40 usec 
#mitosis              actions=1 time=93 usec 
#mergetable           actions= 3 time=194 usec 
#deadcode             actions= 4 time=40 usec 
#aliases              actions= 0 time=1 usec 
#constants            actions= 9 time=32 usec 
#commonTerms          actions= 0 time=27 usec 
#projectionpath       actions= 0 time=18 usec 
#deadcode             actions= 0 time=32 usec 
#reorder              actions= 1 time=130 usec 
#matpack              actions= 2 time=23 usec 
#dataflow             actions= 1 time=91 usec 
#multiplex            actions= 0 time=7 usec 
#profiler             actions=1 time=5 usec 
#candidates           actions=1 time=4 usec 
#wlc                  actions= 0 time=1 usec 
#garbagecollector     actions= 1 time=247 usec 
#total                actions=26 time=1497 usec 
#explain select x,y from test where x between (7-3) and (7-1);
% .explain # table_name
% mal # name
% clob # type
% 130 # length
function user.main():void;
    X_8:void := querylog.define("explain select x,y from test where x between (7-3) and (7-1);":str, "default_pipe":str, 63:int);
barrier X_165:bit := language.dataflow();
    X_55:bat[:dbl] := bat.new(nil:dbl);
    X_11:int := sql.mvc();
    X_139:bat[:dbl] := sql.bind(X_11:int, "sys":str, "test2":str, "x":str, 0:int, 0:int, 2:int);
    X_144:bat[:bit] := batcalc.between(X_139:bat[:dbl], 4:dbl, 6:dbl, false:bit, true:bit, true:bit, false:bit, false:bit);
    C_136:bat[:oid] := sql.tid(X_11:int, "sys":str, "test2":str, 0:int, 2:int);
    C_146:bat[:oid] := algebra.select(X_144:bat[:bit], C_136:bat[:oid], true:bit, true:bit, true:bit, true:bit, false:bit);
    X_148:bat[:dbl] := algebra.projection(C_146:bat[:oid], X_139:bat[:dbl]);
    X_140:bat[:dbl] := sql.bind(X_11:int, "sys":str, "test2":str, "x":str, 0:int, 1:int, 2:int);
    X_145:bat[:bit] := batcalc.between(X_140:bat[:dbl], 4:dbl, 6:dbl, false:bit, true:bit, true:bit, false:bit, false:bit);
    C_138:bat[:oid] := sql.tid(X_11:int, "sys":str, "test2":str, 1:int, 2:int);
    C_147:bat[:oid] := algebra.select(X_145:bat[:bit], C_138:bat[:oid], true:bit, true:bit, true:bit, true:bit, false:bit);
    X_149:bat[:dbl] := algebra.projection(C_147:bat[:oid], X_140:bat[:dbl]);
    X_160:bat[:dbl] := mat.packIncrement(X_148:bat[:dbl], 2:int);
    X_35:bat[:dbl] := mat.packIncrement(X_160:bat[:dbl], X_149:bat[:dbl]);
    X_39:bat[:dbl] := sql.bind(X_11:int, "sys":str, "test3":str, "x":str, 0:int);
    X_51:bat[:bit] := batcalc.between(X_39:bat[:dbl], 4:dbl, 6:dbl, false:bit, true:bit, true:bit, false:bit, false:bit);
    C_37:bat[:oid] := sql.tid(X_11:int, "sys":str, "test3":str);
    C_52:bat[:oid] := algebra.select(X_51:bat[:bit], C_37:bat[:oid], true:bit, true:bit, true:bit, true:bit, false:bit);
    X_41:bat[:dbl] := sql.bind(X_11:int, "sys":str, "test3":str, "y":str, 0:int);
    X_54:bat[:dbl] := algebra.projection(C_52:bat[:oid], X_41:bat[:dbl]);
    X_53:bat[:dbl] := algebra.projection(C_52:bat[:oid], X_39:bat[:dbl]);
    X_142:bat[:dbl] := sql.bind(X_11:int, "sys":str, "test2":str, "y":str, 0:int, 1:int, 2:int);
    X_151:bat[:dbl] := algebra.projection(C_147:bat[:oid], X_142:bat[:dbl]);
    X_141:bat[:dbl] := sql.bind(X_11:int, "sys":str, "test2":str, "y":str, 0:int, 0:int, 2:int);
    X_150:bat[:dbl] := algebra.projection(C_146:bat[:oid], X_141:bat[:dbl]);
    X_57:bat[:dbl] := bat.append(X_55:bat[:dbl], X_35:bat[:dbl], true:bit);
    X_58:bat[:dbl] := bat.append(X_57:bat[:dbl], X_53:bat[:dbl], true:bit);
    X_59:bat[:dbl] := bat.new(nil:dbl);
    X_162:bat[:dbl] := mat.packIncrement(X_150:bat[:dbl], 2:int);
    X_36:bat[:dbl] := mat.packIncrement(X_162:bat[:dbl], X_151:bat[:dbl]);
    X_60:bat[:dbl] := bat.append(X_59:bat[:dbl], X_36:bat[:dbl], true:bit);
    X_61:bat[:dbl] := bat.append(X_60:bat[:dbl], X_54:bat[:dbl], true:bit);
    X_63:bat[:str] := bat.new(nil:str);
    X_69:bat[:int] := bat.new(nil:int);
    X_67:bat[:int] := bat.new(nil:int);
    X_66:bat[:str] := bat.new(nil:str);
    X_65:bat[:str] := bat.new(nil:str);
    X_70:bat[:str] := bat.append(X_63:bat[:str], ".test":str);
    X_72:bat[:str] := bat.append(X_65:bat[:str], "x":str);
    X_74:bat[:str] := bat.append(X_66:bat[:str], "double":str);
    X_76:bat[:int] := bat.append(X_67:bat[:int], 53:int);
    X_78:bat[:int] := bat.append(X_69:bat[:int], 0:int);
    X_80:bat[:str] := bat.append(X_70:bat[:str], ".test":str);
    X_81:bat[:str] := bat.append(X_72:bat[:str], "y":str);
    X_83:bat[:str] := bat.append(X_74:bat[:str], "double":str);
    X_84:bat[:int] := bat.append(X_76:bat[:int], 53:int);
    X_85:bat[:int] := bat.append(X_78:bat[:int], 0:int);
    language.pass(X_139:bat[:dbl]);
    language.pass(X_140:bat[:dbl]);
    language.pass(C_52:bat[:oid]);
    language.pass(X_39:bat[:dbl]);
    language.pass(C_147:bat[:oid]);
    language.pass(C_146:bat[:oid]);
exit X_165:bit;
    sql.resultSet(X_80:bat[:str], X_81:bat[:str], X_83:bat[:str], X_84:bat[:int], X_85:bat[:int], X_58:bat[:dbl], X_61:bat[:dbl]);
end user.main;
#inline               actions= 0 time=1 usec 
#remap                actions= 0 time=2 usec 
#costmodel            actions= 1 time=2 usec 
#coercion             actions= 0 time=2 usec 
#aliases              actions=12 time=10 usec 
#evaluate             actions= 8 time=26 usec 
#emptybind            actions= 0 time=0 usec 
#pushselect           actions= 6 time=12 usec 
#aliases              actions=12 time=8 usec 
#mitosis              actions=1 time=23 usec 
#mergetable           actions= 3 time=48 usec 
#deadcode             actions= 4 time=12 usec 
#aliases              actions= 0 time=0 usec 
#constants            actions= 6 time=9 usec 
#commonTerms          actions= 0 time=6 usec 
#projectionpath       actions= 0 time=5 usec 
#deadcode             actions= 0 time=9 usec 
#reorder              actions= 1 time=29 usec 
#matpack              actions= 2 time=5 usec 
#dataflow             actions= 1 time=25 usec 
#multiplex            actions= 0 time=1 usec 
#profiler             actions= 1 time=2 usec 
#candidates           actions= 1 time=1 usec 
#deadcode             actions= 0 time=10 usec 
#wlc                  actions= 0 time=0 usec 
#garbagecollector     actions= 1 time=242 usec 
#total                actions=26 time=1621 usec 
#explain select x,y from test where x between 4.0 and 6.0 and y between 0.0 and 2.0;
% .explain # table_name
% mal # name
% clob # type
% 151 # length
function user.main():void;
    X_9:void := querylog.define("explain select x,y from test where x between 4.0 and 6.0 and y between 0.0 and 2.0;":str, "default_pipe":str, 42:int);
barrier X_145:bit := language.dataflow();
    X_42:bat[:str] := bat.new(nil:str);
    X_48:bat[:int] := bat.new(nil:int);
    X_46:bat[:int] := bat.new(nil:int);
    X_45:bat[:str] := bat.new(nil:str);
    X_44:bat[:str] := bat.new(nil:str);
    X_12:int := sql.mvc();
    X_118:bat[:dbl] := sql.bind(X_12:int, "sys":str, "test3":str, "y":str, 0:int, 1:int, 2:int);
    X_125:bat[:bit] := batcalc.between(X_118:bat[:dbl], 0:dbl, 2:dbl, false:bit, true:bit, true:bit, false:bit, false:bit);
    X_116:bat[:dbl] := sql.bind(X_12:int, "sys":str, "test3":str, "x":str, 0:int, 1:int, 2:int);
    X_121:bat[:bit] := batcalc.between(X_116:bat[:dbl], 4:dbl, 6:dbl, false:bit, true:bit, true:bit, false:bit, false:bit);
    C_114:bat[:oid] := sql.tid(X_12:int, "sys":str, "test3":str, 1:int, 2:int);
    C_123:bat[:oid] := algebra.select(X_121:bat[:bit], C_114:bat[:oid], true:bit, true:bit, true:bit, true:bit, false:bit);
    C_127:bat[:oid] := algebra.select(X_125:bat[:bit], C_123:bat[:oid], true:bit, true:bit, true:bit, true:bit, false:bit);
    X_131:bat[:dbl] := algebra.projection(C_127:bat[:oid], X_118:bat[:dbl]);
    X_117:bat[:dbl] := sql.bind(X_12:int, "sys":str, "test3":str, "y":str, 0:int, 0:int, 2:int);
    X_124:bat[:bit] := batcalc.between(X_117:bat[:dbl], 0:dbl, 2:dbl, false:bit, true:bit, true:bit, false:bit, false:bit);
    X_115:bat[:dbl] := sql.bind(X_12:int, "sys":str, "test3":str, "x":str, 0:int, 0:int, 2:int);
    X_120:bat[:bit] := batcalc.between(X_115:bat[:dbl], 4:dbl, 6:dbl, false:bit, true:bit, true:bit, false:bit, false:bit);
    C_112:bat[:oid] := sql.tid(X_12:int, "sys":str, "test3":str, 0:int, 2:int);
    C_122:bat[:oid] := algebra.select(X_120:bat[:bit], C_112:bat[:oid], true:bit, true:bit, true:bit, true:bit, false:bit);
    C_126:bat[:oid] := algebra.select(X_124:bat[:bit], C_122:bat[:oid], true:bit, true:bit, true:bit, true:bit, false:bit);
    X_130:bat[:dbl] := algebra.projection(C_126:bat[:oid], X_117:bat[:dbl]);
    X_129:bat[:dbl] := algebra.projection(C_127:bat[:oid], X_116:bat[:dbl]);
    X_128:bat[:dbl] := algebra.projection(C_126:bat[:oid], X_115:bat[:dbl]);
    X_49:bat[:str] := bat.append(X_42:bat[:str], "sys.test":str);
    X_51:bat[:str] := bat.append(X_44:bat[:str], "x":str);
    X_53:bat[:str] := bat.append(X_45:bat[:str], "double":str);
    X_55:bat[:int] := bat.append(X_46:bat[:int], 53:int);
    X_57:bat[:int] := bat.append(X_48:bat[:int], 0:int);
    X_59:bat[:str] := bat.append(X_49:bat[:str], "sys.test":str);
    X_60:bat[:str] := bat.append(X_51:bat[:str], "y":str);
    X_62:bat[:str] := bat.append(X_53:bat[:str], "double":str);
    X_63:bat[:int] := bat.append(X_55:bat[:int], 53:int);
    X_64:bat[:int] := bat.append(X_57:bat[:int], 0:int);
    X_140:bat[:dbl] := mat.packIncrement(X_128:bat[:dbl], 2:int);
    X_39:bat[:dbl] := mat.packIncrement(X_140:bat[:dbl], X_129:bat[:dbl]);
    X_142:bat[:dbl] := mat.packIncrement(X_130:bat[:dbl], 2:int);
    X_40:bat[:dbl] := mat.packIncrement(X_142:bat[:dbl], X_131:bat[:dbl]);
    language.pass(X_118:bat[:dbl]);
    language.pass(X_117:bat[:dbl]);
    language.pass(C_127:bat[:oid]);
    language.pass(X_116:bat[:dbl]);
    language.pass(C_126:bat[:oid]);
    language.pass(X_115:bat[:dbl]);
exit X_145:bit;
    sql.resultSet(X_59:bat[:str], X_60:bat[:str], X_62:bat[:str], X_63:bat[:int], X_64:bat[:int], X_39:bat[:dbl], X_40:bat[:dbl]);
end user.main;
#inline               actions= 0 time=1 usec 
#remap                actions= 0 time=1 usec 
#costmodel            actions= 1 time=1 usec 
#coercion             actions= 0 time=1 usec 
#aliases              actions= 8 time=7 usec 
#evaluate             actions= 4 time=17 usec 
#emptybind            actions= 0 time=1 usec 
#pushselect           actions= 3 time=33 usec 
#aliases              actions=14 time=30 usec 
#mitosis              actions=1 time=76 usec 
#mergetable           actions= 4 time=174 usec 
#deadcode             actions= 5 time=38 usec 
#aliases              actions= 0 time=1 usec 
#constants            actions=10 time=31 usec 
#commonTerms          actions= 0 time=22 usec 
#projectionpath       actions= 0 time=15 usec 
#deadcode             actions= 0 time=26 usec 
#reorder              actions= 1 time=108 usec 
#matpack              actions= 2 time=22 usec 
#dataflow             actions= 1 time=82 usec 
#multiplex            actions= 0 time=7 usec 
#profiler             actions=1 time=5 usec 
#candidates           actions=1 time=3 usec 
#wlc                  actions= 0 time=0 usec 
#garbagecollector     actions= 1 time=215 usec 
#total                actions=26 time=1344 usec 
#explain select x,y from test where x between 4.0 and 6.0 and y between (1.0-1.0) and (4.0-2.0);
% .explain # table_name
% mal # name
% clob # type
% 164 # length
function user.main():void;
    X_11:void := querylog.define("explain select x,y from test where x between 4.0 and 6.0 and y between (1.0-1.0) and (4.0-2.0);":str, "default_pipe":str, 48:int);
barrier X_153:bit := language.dataflow();
    X_48:bat[:str] := bat.new(nil:str);
    X_54:bat[:int] := bat.new(nil:int);
    X_52:bat[:int] := bat.new(nil:int);
    X_51:bat[:str] := bat.new(nil:str);
    X_50:bat[:str] := bat.new(nil:str);
    X_14:int := sql.mvc();
    X_126:bat[:dbl] := sql.bind(X_14:int, "sys":str, "test3":str, "y":str, 0:int, 1:int, 2:int);
    X_133:bat[:bit] := batcalc.between(X_126:bat[:dbl], 0:dbl, 2:dbl, false:bit, true:bit, true:bit, false:bit, false:bit);
    X_124:bat[:dbl] := sql.bind(X_14:int, "sys":str, "test3":str, "x":str, 0:int, 1:int, 2:int);
    X_129:bat[:bit] := batcalc.between(X_124:bat[:dbl], 4:dbl, 6:dbl, false:bit, true:bit, true:bit, false:bit, false:bit);
    C_122:bat[:oid] := sql.tid(X_14:int, "sys":str, "test3":str, 1:int, 2:int);
    C_131:bat[:oid] := algebra.select(X_129:bat[:bit], C_122:bat[:oid], true:bit, true:bit, true:bit, true:bit, false:bit);
    C_135:bat[:oid] := algebra.select(X_133:bat[:bit], C_131:bat[:oid], true:bit, true:bit, true:bit, true:bit, false:bit);
    X_139:bat[:dbl] := algebra.projection(C_135:bat[:oid], X_126:bat[:dbl]);
    X_125:bat[:dbl] := sql.bind(X_14:int, "sys":str, "test3":str, "y":str, 0:int, 0:int, 2:int);
    X_132:bat[:bit] := batcalc.between(X_125:bat[:dbl], 0:dbl, 2:dbl, false:bit, true:bit, true:bit, false:bit, false:bit);
    X_123:bat[:dbl] := sql.bind(X_14:int, "sys":str, "test3":str, "x":str, 0:int, 0:int, 2:int);
    X_128:bat[:bit] := batcalc.between(X_123:bat[:dbl], 4:dbl, 6:dbl, false:bit, true:bit, true:bit, false:bit, false:bit);
    C_120:bat[:oid] := sql.tid(X_14:int, "sys":str, "test3":str, 0:int, 2:int);
    C_130:bat[:oid] := algebra.select(X_128:bat[:bit], C_120:bat[:oid], true:bit, true:bit, true:bit, true:bit, false:bit);
    C_134:bat[:oid] := algebra.select(X_132:bat[:bit], C_130:bat[:oid], true:bit, true:bit, true:bit, true:bit, false:bit);
    X_138:bat[:dbl] := algebra.projection(C_134:bat[:oid], X_125:bat[:dbl]);
    X_137:bat[:dbl] := algebra.projection(C_135:bat[:oid], X_124:bat[:dbl]);
    X_136:bat[:dbl] := algebra.projection(C_134:bat[:oid], X_123:bat[:dbl]);
    X_55:bat[:str] := bat.append(X_48:bat[:str], "sys.test":str);
    X_57:bat[:str] := bat.append(X_50:bat[:str], "x":str);
    X_59:bat[:str] := bat.append(X_51:bat[:str], "double":str);
    X_61:bat[:int] := bat.append(X_52:bat[:int], 53:int);
    X_63:bat[:int] := bat.append(X_54:bat[:int], 0:int);
    X_65:bat[:str] := bat.append(X_55:bat[:str], "sys.test":str);
    X_66:bat[:str] := bat.append(X_57:bat[:str], "y":str);
    X_68:bat[:str] := bat.append(X_59:bat[:str], "double":str);
    X_69:bat[:int] := bat.append(X_61:bat[:int], 53:int);
    X_70:bat[:int] := bat.append(X_63:bat[:int], 0:int);
    X_148:bat[:dbl] := mat.packIncrement(X_136:bat[:dbl], 2:int);
    X_45:bat[:dbl] := mat.packIncrement(X_148:bat[:dbl], X_137:bat[:dbl]);
    X_150:bat[:dbl] := mat.packIncrement(X_138:bat[:dbl], 2:int);
    X_46:bat[:dbl] := mat.packIncrement(X_150:bat[:dbl], X_139:bat[:dbl]);
    language.pass(X_126:bat[:dbl]);
    language.pass(X_125:bat[:dbl]);
    language.pass(C_135:bat[:oid]);
    language.pass(X_124:bat[:dbl]);
    language.pass(C_134:bat[:oid]);
    language.pass(X_123:bat[:dbl]);
exit X_153:bit;
    sql.resultSet(X_65:bat[:str], X_66:bat[:str], X_68:bat[:str], X_69:bat[:int], X_70:bat[:int], X_45:bat[:dbl], X_46:bat[:dbl]);
end user.main;
#inline               actions= 0 time=1 usec 
#remap                actions= 0 time=4 usec 
#costmodel            actions= 1 time=1 usec 
#coercion             actions= 0 time=2 usec 
#aliases              actions=12 time=9 usec 
#evaluate             actions= 6 time=21 usec 
#emptybind            actions= 0 time=0 usec 
#pushselect           actions= 3 time=10 usec 
#aliases              actions= 8 time=6 usec 
#mitosis              actions=1 time=22 usec 
#mergetable           actions= 4 time=59 usec 
#deadcode             actions= 5 time=11 usec 
#aliases              actions= 0 time=1 usec 
#constants            actions= 7 time=8 usec 
#commonTerms          actions= 0 time=6 usec 
#projectionpath       actions= 0 time=4 usec 
#deadcode             actions= 0 time=8 usec 
#reorder              actions= 1 time=25 usec 
#matpack              actions= 2 time=6 usec 
#dataflow             actions= 1 time=22 usec 
#multiplex            actions= 0 time=1 usec 
#profiler             actions= 1 time=2 usec 
#candidates           actions= 1 time=1 usec 
#deadcode             actions= 0 time=10 usec 
#wlc                  actions= 0 time=0 usec 
#garbagecollector     actions= 1 time=208 usec 
#total                actions=26 time=1367 usec 
#explain select x,y from test where x between (7-3) and (7-1) and y between (1.0-1.0) and (4.0-2.0);
% .explain # table_name
% mal # name
% clob # type
% 168 # length
function user.main():void;
    X_15:void := querylog.define("explain select x,y from test where x between (7-3) and (7-1) and y between (1.0-1.0) and (4.0-2.0);":str, "default_pipe":str, 54:int);
barrier X_163:bit := language.dataflow();
    X_56:bat[:str] := bat.new(nil:str);
    X_62:bat[:int] := bat.new(nil:int);
    X_60:bat[:int] := bat.new(nil:int);
    X_59:bat[:str] := bat.new(nil:str);
    X_58:bat[:str] := bat.new(nil:str);
    X_18:int := sql.mvc();
    X_136:bat[:dbl] := sql.bind(X_18:int, "sys":str, "test3":str, "y":str, 0:int, 1:int, 2:int);
    X_143:bat[:bit] := batcalc.between(X_136:bat[:dbl], 0:dbl, 2:dbl, false:bit, true:bit, true:bit, false:bit, false:bit);
    X_134:bat[:dbl] := sql.bind(X_18:int, "sys":str, "test3":str, "x":str, 0:int, 1:int, 2:int);
    X_139:bat[:bit] := batcalc.between(X_134:bat[:dbl], 4:dbl, 6:dbl, false:bit, true:bit, true:bit, false:bit, false:bit);
    C_132:bat[:oid] := sql.tid(X_18:int, "sys":str, "test3":str, 1:int, 2:int);
    C_141:bat[:oid] := algebra.select(X_139:bat[:bit], C_132:bat[:oid], true:bit, true:bit, true:bit, true:bit, false:bit);
    C_145:bat[:oid] := algebra.select(X_143:bat[:bit], C_141:bat[:oid], true:bit, true:bit, true:bit, true:bit, false:bit);
    X_149:bat[:dbl] := algebra.projection(C_145:bat[:oid], X_136:bat[:dbl]);
    X_135:bat[:dbl] := sql.bind(X_18:int, "sys":str, "test3":str, "y":str, 0:int, 0:int, 2:int);
    X_142:bat[:bit] := batcalc.between(X_135:bat[:dbl], 0:dbl, 2:dbl, false:bit, true:bit, true:bit, false:bit, false:bit);
    X_133:bat[:dbl] := sql.bind(X_18:int, "sys":str, "test3":str, "x":str, 0:int, 0:int, 2:int);
    X_138:bat[:bit] := batcalc.between(X_133:bat[:dbl], 4:dbl, 6:dbl, false:bit, true:bit, true:bit, false:bit, false:bit);
    C_130:bat[:oid] := sql.tid(X_18:int, "sys":str, "test3":str, 0:int, 2:int);
    C_140:bat[:oid] := algebra.select(X_138:bat[:bit], C_130:bat[:oid], true:bit, true:bit, true:bit, true:bit, false:bit);
    C_144:bat[:oid] := algebra.select(X_142:bat[:bit], C_140:bat[:oid], true:bit, true:bit, true:bit, true:bit, false:bit);
    X_148:bat[:dbl] := algebra.projection(C_144:bat[:oid], X_135:bat[:dbl]);
    X_147:bat[:dbl] := algebra.projection(C_145:bat[:oid], X_134:bat[:dbl]);
    X_146:bat[:dbl] := algebra.projection(C_144:bat[:oid], X_133:bat[:dbl]);
    X_63:bat[:str] := bat.append(X_56:bat[:str], "sys.test":str);
    X_65:bat[:str] := bat.append(X_58:bat[:str], "x":str);
    X_67:bat[:str] := bat.append(X_59:bat[:str], "double":str);
    X_69:bat[:int] := bat.append(X_60:bat[:int], 53:int);
    X_71:bat[:int] := bat.append(X_62:bat[:int], 0:int);
    X_73:bat[:str] := bat.append(X_63:bat[:str], "sys.test":str);
    X_74:bat[:str] := bat.append(X_65:bat[:str], "y":str);
    X_76:bat[:str] := bat.append(X_67:bat[:str], "double":str);
    X_77:bat[:int] := bat.append(X_69:bat[:int], 53:int);
    X_78:bat[:int] := bat.append(X_71:bat[:int], 0:int);
    X_158:bat[:dbl] := mat.packIncrement(X_146:bat[:dbl], 2:int);
    X_53:bat[:dbl] := mat.packIncrement(X_158:bat[:dbl], X_147:bat[:dbl]);
    X_160:bat[:dbl] := mat.packIncrement(X_148:bat[:dbl], 2:int);
    X_54:bat[:dbl] := mat.packIncrement(X_160:bat[:dbl], X_149:bat[:dbl]);
    language.pass(X_136:bat[:dbl]);
    language.pass(X_135:bat[:dbl]);
    language.pass(C_145:bat[:oid]);
    language.pass(X_134:bat[:dbl]);
    language.pass(C_144:bat[:oid]);
    language.pass(X_133:bat[:dbl]);
exit X_163:bit;
    sql.resultSet(X_73:bat[:str], X_74:bat[:str], X_76:bat[:str], X_77:bat[:int], X_78:bat[:int], X_53:bat[:dbl], X_54:bat[:dbl]);
end user.main;
#inline               actions= 0 time=1 usec 
#remap                actions= 0 time=3 usec 
#costmodel            actions= 1 time=2 usec 
#coercion             actions= 0 time=1 usec 
#aliases              actions=16 time=10 usec 
#evaluate             actions= 8 time=25 usec 
#emptybind            actions= 0 time=0 usec 
#pushselect           actions= 3 time=9 usec 
#aliases              actions=10 time=6 usec 
#mitosis              actions=1 time=21 usec 
#mergetable           actions= 4 time=44 usec 
#deadcode             actions= 5 time=11 usec 
#aliases              actions= 0 time=0 usec 
#constants            actions= 7 time=9 usec 
#commonTerms          actions= 0 time=6 usec 
#projectionpath       actions= 0 time=4 usec 
#deadcode             actions= 0 time=8 usec 
#reorder              actions= 1 time=24 usec 
#matpack              actions= 2 time=5 usec 
#dataflow             actions= 1 time=22 usec 
#multiplex            actions= 0 time=1 usec 
#profiler             actions= 1 time=1 usec 
#candidates           actions= 1 time=1 usec 
#deadcode             actions= 0 time=9 usec 
#wlc                  actions= 0 time=0 usec 
#garbagecollector     actions= 1 time=28 usec 
#total                actions=29 time=348 usec 
#drop table test;
#drop table test1;
#drop table test2;
#drop table test3;
#drop table test4;

# 18:37:29 >  
# 18:37:29 >  "Done."
# 18:37:29 >  

