/*
* This Source Code Form is subject to the terms of the Mozilla Public
* License, v. 2.0.  If a copy of the MPL was not distributed with this
* file, You can obtain one at http://mozilla.org/MPL/2.0/.
*
* Copyright 1997 - July 2008 CWI, August 2008 - 2019 MonetDB B.V.
*/

// This file was generated automatically with sql2h.py. Do not edit this file directly.
{ "70_storagemodel", "\n\n\ncreate function sys.\"storage\"()\nreturns table (\n\"schema\" varchar(1024),\n\"table\" varchar(1024),\n\"column\" varchar(1024),\t\t\"type\" varchar(1024),\n\"mode\" varchar(15),\nlocation varchar(1024),\n\"count\" bigint,\ntypewidth int,\ncolumnsize bigint,\nheapsize bigint,\nhashes bigint,\nphash boolean,\n\"imprints\" bigint,\nsorted boolean,\nrevsorted boolean,\n\"unique\" boolean,\norderidx bigint\n)\nexternal name sql.\"storage\";\ncreate view sys.\"storage\" as\nselect * from sys.\"storage\"()\n where (\"schema\", \"table\") in (\nSELECT sch.\"name\", tbl.\"name\"\nFROM sys.\"tables\" AS tbl JOIN sys.\"schemas\" AS sch ON tbl.schema_id = sch.id\nWHERE tbl.\"system\" = FALSE)\norder by \"schema\", \"table\", \"column\";\ncreate view sys.\"tablestorage\" as\nselect \"schema\", \"table\",\nmax(\"count\") as \"rowcount\",\ncount(*) as \"storages\",\nsum(columnsize) as columnsize,\nsum(heapsize) as heapsize,\nsum(hashes) as hashsize,\nsum(\"imprints\") as imprintsize,\nsum(orderidx) as orderidxsize\nfrom sys.\"storage\"\ngroup by \"schema\", \"table\"\norder by \"schema\", \"table\";\ncreate view sys.\"schemastorage\" as\nselect \"schema\",\ncount(*) as \"storages\",\nsum(columnsize) as columnsize,\nsum(heapsize) as heapsize,\nsum(hashes) as hashsize,\nsum(\"imprints\") as imprintsize,\nsum(orderidx) as orderidxsize\nfrom sys.\"storage\"\ngroup by \"schema\"\norder by \"schema\";\ncreate function sys.\"storage\"(sname varchar(1024))\nreturns table (\n\"schema\" varchar(1024),\n\"table\" varchar(1024),\n\"column\" varchar(1024),\n\"type\" varchar(1024),\n\"mode\" varchar(15),\nlocation varchar(1024),\n\"count\" bigint,\ntypewidth int,\ncolumnsize bigint,\nheapsize bigint,\nhashes bigint,\nphash boolean,\n\"imprints\" bigint,\nsorted boolean,\nrevsorted boolean,\n\"unique\" boolean,\norderidx bigint\n)\nexternal name sql.\"storage\";\ncreate function sys.\"storage\"(sname varchar(1024), tname varchar(1024))\nreturns table (\n\"schema\" varchar(1024),\n\"table\" varchar(1024),\n\"column\" varchar(1024),\n\"type\" varchar(1024),\n\"mode\" varchar(15),\nlocation varchar(1024),\n\"count\" bigint,\ntypewidth int,\ncolumnsize bigint,\nheapsize bigint,\nhashes bigint,\nphash boolean,\n\"imprints\" bigint,\nsorted boolean,\nrevsorted boolean,\n\"unique\" boolean,\norderidx bigint\n)\nexternal name sql.\"storage\";\ncreate function sys.\"storage\"(sname varchar(1024), tname varchar(1024), cname varchar(1024))\nreturns table (\n\"schema\" varchar(1024),\n\"table\" varchar(1024),\n\"column\" varchar(1024),\n\"type\" varchar(1024),\n\"mode\" varchar(15),\nlocation varchar(1024),\n\"count\" bigint,\ntypewidth int,\ncolumnsize bigint,\nheapsize bigint,\nhashes bigint,\nphash boolean,\n\"imprints\" bigint,\nsorted boolean,\nrevsorted boolean,\n\"unique\" boolean,\norderidx bigint\n)\nexternal name sql.\"storage\";\ncreate table sys.storagemodelinput(\n\"schema\" varchar(1024) NOT NULL,\n\"table\" varchar(1024) NOT NULL,\n\"column\" varchar(1024) NOT NULL,\t\t\"type\" varchar(1024) NOT NULL,\ntypewidth int NOT NULL,\n\"count\" bigint NOT NULL,\t\t\"distinct\" bigint NOT NULL,\t\tatomwidth int NOT NULL,\t\treference boolean NOT NULL DEFAULT FALSE, \tsorted boolean,\t\t\"unique\" boolean,\t\tisacolumn boolean NOT NULL DEFAULT TRUE\n);\ncreate procedure sys.storagemodelinit()\nbegin\ndelete from sys.storagemodelinput;\ninsert into sys.storagemodelinput\nselect \"schema\", \"table\", \"column\", \"type\", typewidth, \"count\",\n\tcase when (\"unique\" or \"type\" IN ('varchar', 'char', 'clob', 'json', 'url', 'blob', 'geometry', 'geometrya'))\nthen \"count\" else 0 end,\ncase when \"count\" > 0 and heapsize >= 8192 and \"type\" in ('varchar', 'char', 'clob', 'json', 'url')\n\tthen cast((heapsize - 8192) / \"count\" as bigint)\nwhen \"count\" > 0 and heapsize >= 32 and \"type\" in ('blob', 'geometry', 'geometrya')\n\tthen cast((heapsize - 32) / \"count\" as bigint)\nelse typewidth end,\nFALSE, case sorted when true then true else false end, \"unique\", TRUE\nfrom sys.\"storage\"; \nupdate sys.storagemodelinput\nset reference = TRUE\nwhere (\"schema\", \"table\", \"column\") in (\nSELECT fkschema.\"name\", fktable.\"name\", fkkeycol.\"name\"\nFROM\tsys.\"keys\" AS fkkey,\nsys.\"objects\" AS fkkeycol,\nsys.\"tables\" AS fktable,\nsys.\"schemas\" AS fkschema\nWHERE fktable.\"id\" = fkkey.\"table_id\"\nAND fkkey.\"id\" = fkkeycol.\"id\"\nAND fkschema.\"id\" = fktable.\"schema_id\"\nAND fkkey.\"rkey\" > -1 );\nupdate sys.storagemodelinput\nset isacolumn = FALSE\nwhere (\"schema\", \"table\", \"column\") NOT in (\nSELECT sch.\"name\", tbl.\"name\", col.\"name\"\nFROM sys.\"schemas\" AS sch,\nsys.\"tables\" AS tbl,\nsys.\"columns\" AS col\nWHERE sch.\"id\" = tbl.\"schema_id\"\nAND tbl.\"id\" = col.\"table_id\");\nend;\n\ncreate function sys.columnsize(tpe varchar(1024), count bigint)\nreturns bigint\nbegin\n\tif tpe in ('tinyint', 'boolean')\nthen return count;\nend if;\nif tpe = 'smallint'\nthen return 2 * count;\nend if;\nif tpe in ('int', 'real', 'date', 'time', 'timetz', 'sec_interval', 'month_interval')\nthen return 4 * count;\nend if;\nif tpe in ('bigint', 'double', 'timestamp', 'timestamptz', 'inet', 'oid')\nthen return 8 * count;\nend if;\nif tpe in ('hugeint', 'decimal', 'uuid', 'mbr')\nthen return 16 * count;\nend if;\n\tif tpe in ('varchar', 'char', 'clob', 'json', 'url')\nthen return 4 * count;\nend if;\nif tpe in ('blob', 'geometry', 'geometrya')\nthen return 8 * count;\nend if;\nreturn 8 * count;\nend;\ncreate function sys.heapsize(tpe varchar(1024), count bigint, distincts bigint, avgwidth int)\nreturns bigint\nbegin\n\tif tpe in ('varchar', 'char', 'clob', 'json', 'url')\nthen return 8192 + ((avgwidth + 8) * distincts);\nend if;\nif tpe in ('blob', 'geometry', 'geometrya')\nthen return 32 + (avgwidth * count);\nend if;\nreturn 0;\nend;\ncreate function sys.hashsize(b boolean, count bigint)\nreturns bigint\nbegin\n\tif b = true\nthen return 8 * count;\nend if;\nreturn 0;\nend;\ncreate function sys.imprintsize(tpe varchar(1024), count bigint)\nreturns bigint\nbegin\n\tif tpe in ('tinyint', 'boolean')\nthen return cast(0.2 * count as bigint);\nend if;\nif tpe = 'smallint'\nthen return cast(0.4 * count as bigint);\nend if;\nif tpe in ('int', 'real', 'date', 'time', 'timetz', 'sec_interval', 'month_interval')\nthen return cast(0.8 * count as bigint);\nend if;\nif tpe in ('bigint', 'double', 'timestamp', 'timestamptz', 'inet', 'oid')\nthen return cast(1.6 * count as bigint);\nend if;\n\tif tpe in ('hugeint', 'decimal', 'uuid', 'mbr')\nthen return cast(3.2 * count as bigint);\nend if;\n\treturn 0;\nend;\ncreate view sys.storagemodel as\nselect \"schema\", \"table\", \"column\", \"type\", \"count\",\nsys.columnsize(\"type\", \"count\") as columnsize,\nsys.heapsize(\"type\", \"count\", \"distinct\", \"atomwidth\") as heapsize,\nsys.hashsize(\"reference\", \"count\") as hashsize,\ncase when isacolumn then sys.imprintsize(\"type\", \"count\") else 0 end as imprintsize,\ncase when (isacolumn and not sorted) then cast(8 * \"count\" as bigint) else 0 end as orderidxsize,\nsorted, \"unique\", isacolumn\nfrom sys.storagemodelinput\norder by \"schema\", \"table\", \"column\";\ncreate view sys.tablestoragemodel as\nselect \"schema\", \"table\",\nmax(\"count\") as \"rowcount\",\ncount(*) as \"storages\",\nsum(sys.columnsize(\"type\", \"count\")) as columnsize,\nsum(sys.heapsize(\"type\", \"count\", \"distinct\", \"atomwidth\")) as heapsize,\nsum(sys.hashsize(\"reference\", \"count\")) as hashsize,\nsum(case when isacolumn then sys.imprintsize(\"type\", \"count\") else 0 end) as imprintsize,\nsum(case when (isacolumn and not sorted) then cast(8 * \"count\" as bigint) else 0 end) as orderidxsize\nfrom sys.storagemodelinput\ngroup by \"schema\", \"table\"\norder by \"schema\", \"table\";\n" }, 
