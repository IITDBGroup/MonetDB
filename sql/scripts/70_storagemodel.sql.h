/*
* This Source Code Form is subject to the terms of the Mozilla Public
* License, v. 2.0.  If a copy of the MPL was not distributed with this
* file, You can obtain one at http://mozilla.org/MPL/2.0/.
*
* Copyright 1997 - July 2008 CWI, August 2008 - 2019 MonetDB B.V.
*/

// This file was generated automatically with sql2h.py. Do not edit this file directly.
{ "70_storagemodel", "\n\n\ncreate function sys.\"storage\"()\nreturns table (\n\t\"schema\" varchar(1024),\n\t\"table\" varchar(1024),\n\t\"column\" varchar(1024),\t\t\"type\" varchar(1024),\n\t\"mode\" varchar(15),\n\tlocation varchar(1024),\n\t\"count\" bigint,\n\ttypewidth int,\n\tcolumnsize bigint,\n\theapsize bigint,\n\thashes bigint,\n\tphash boolean,\n\t\"imprints\" bigint,\n\tsorted boolean,\n\trevsorted boolean,\n\t\"unique\" boolean,\n\torderidx bigint\n)\nexternal name sql.\"storage\";\n\ncreate view sys.\"storage\" as\nselect * from sys.\"storage\"()\n where (\"schema\", \"table\") in (\n\tSELECT sch.\"name\", tbl.\"name\"\n\t  FROM sys.\"tables\" AS tbl JOIN sys.\"schemas\" AS sch ON tbl.schema_id = sch.id\n\t WHERE tbl.\"system\" = FALSE)\norder by \"schema\", \"table\", \"column\";\n\ncreate view sys.\"tablestorage\" as\nselect \"schema\", \"table\",\n\tmax(\"count\") as \"rowcount\",\n\tcount(*) as \"storages\",\n\tsum(columnsize) as columnsize,\n\tsum(heapsize) as heapsize,\n\tsum(hashes) as hashsize,\n\tsum(\"imprints\") as imprintsize,\n\tsum(orderidx) as orderidxsize\n from sys.\"storage\"\ngroup by \"schema\", \"table\"\norder by \"schema\", \"table\";\n\ncreate view sys.\"schemastorage\" as\nselect \"schema\",\n\tcount(*) as \"storages\",\n\tsum(columnsize) as columnsize,\n\tsum(heapsize) as heapsize,\n\tsum(hashes) as hashsize,\n\tsum(\"imprints\") as imprintsize,\n\tsum(orderidx) as orderidxsize\n from sys.\"storage\"\ngroup by \"schema\"\norder by \"schema\";\n\ncreate function sys.\"storage\"(sname varchar(1024))\nreturns table (\n\t\"schema\" varchar(1024),\n\t\"table\" varchar(1024),\n\t\"column\" varchar(1024),\n\t\"type\" varchar(1024),\n\t\"mode\" varchar(15),\n\tlocation varchar(1024),\n\t\"count\" bigint,\n\ttypewidth int,\n\tcolumnsize bigint,\n\theapsize bigint,\n\thashes bigint,\n\tphash boolean,\n\t\"imprints\" bigint,\n\tsorted boolean,\n\trevsorted boolean,\n\t\"unique\" boolean,\n\torderidx bigint\n)\nexternal name sql.\"storage\";\n\ncreate function sys.\"storage\"(sname varchar(1024), tname varchar(1024))\nreturns table (\n\t\"schema\" varchar(1024),\n\t\"table\" varchar(1024),\n\t\"column\" varchar(1024),\n\t\"type\" varchar(1024),\n\t\"mode\" varchar(15),\n\tlocation varchar(1024),\n\t\"count\" bigint,\n\ttypewidth int,\n\tcolumnsize bigint,\n\theapsize bigint,\n\thashes bigint,\n\tphash boolean,\n\t\"imprints\" bigint,\n\tsorted boolean,\n\trevsorted boolean,\n\t\"unique\" boolean,\n\torderidx bigint\n)\nexternal name sql.\"storage\";\n\ncreate function sys.\"storage\"(sname varchar(1024), tname varchar(1024), cname varchar(1024))\nreturns table (\n\t\"schema\" varchar(1024),\n\t\"table\" varchar(1024),\n\t\"column\" varchar(1024),\n\t\"type\" varchar(1024),\n\t\"mode\" varchar(15),\n\tlocation varchar(1024),\n\t\"count\" bigint,\n\ttypewidth int,\n\tcolumnsize bigint,\n\theapsize bigint,\n\thashes bigint,\n\tphash boolean,\n\t\"imprints\" bigint,\n\tsorted boolean,\n\trevsorted boolean,\n\t\"unique\" boolean,\n\torderidx bigint\n)\nexternal name sql.\"storage\";\n\n\ncreate table sys.storagemodelinput(\n\t\"schema\" varchar(1024) NOT NULL,\n\t\"table\" varchar(1024) NOT NULL,\n\t\"column\" varchar(1024) NOT NULL,\t\t\"type\" varchar(1024) NOT NULL,\n\ttypewidth int NOT NULL,\n\t\"count\" bigint NOT NULL,\t\t\"distinct\" bigint NOT NULL,\t\tatomwidth int NOT NULL,\t\t\treference boolean NOT NULL DEFAULT FALSE, \tsorted boolean,\t\t\t\t\"unique\" boolean,\t\t\tisacolumn boolean NOT NULL DEFAULT TRUE\n);\n\ncreate procedure sys.storagemodelinit()\nbegin\n\tdelete from sys.storagemodelinput;\n\n\tinsert into sys.storagemodelinput\n\tselect \"schema\", \"table\", \"column\", \"type\", typewidth, \"count\",\n\t\t\t\tcase when (\"unique\" or \"type\" IN ('varchar', 'char', 'clob', 'json', 'url', 'blob', 'geometry', 'geometrya'))\n\t\t\tthen \"count\" else 0 end,\n\t\tcase when \"count\" > 0 and heapsize >= 8192 and \"type\" in ('varchar', 'char', 'clob', 'json', 'url')\n\t\t\t\t\t\tthen cast((heapsize - 8192) / \"count\" as bigint)\n\t\twhen \"count\" > 0 and heapsize >= 32 and \"type\" in ('blob', 'geometry', 'geometrya')\n\t\t\t\t\t\tthen cast((heapsize - 32) / \"count\" as bigint)\n\t\telse typewidth end,\n\t\tFALSE, case sorted when true then true else false end, \"unique\", TRUE\n\t  from sys.\"storage\";  \n\tupdate sys.storagemodelinput\n\t   set reference = TRUE\n\t where (\"schema\", \"table\", \"column\") in (\n\t\tSELECT fkschema.\"name\", fktable.\"name\", fkkeycol.\"name\"\n\t\t  FROM\tsys.\"keys\" AS fkkey,\n\t\t\tsys.\"objects\" AS fkkeycol,\n\t\t\tsys.\"tables\" AS fktable,\n\t\t\tsys.\"schemas\" AS fkschema\n\t\tWHERE fktable.\"id\" = fkkey.\"table_id\"\n\t\t  AND fkkey.\"id\" = fkkeycol.\"id\"\n\t\t  AND fkschema.\"id\" = fktable.\"schema_id\"\n\t\t  AND fkkey.\"rkey\" > -1 );\n\n\tupdate sys.storagemodelinput\n\t   set isacolumn = FALSE\n\t where (\"schema\", \"table\", \"column\") NOT in (\n\t\tSELECT sch.\"name\", tbl.\"name\", col.\"name\"\n\t\t  FROM sys.\"schemas\" AS sch,\n\t\t\tsys.\"tables\" AS tbl,\n\t\t\tsys.\"columns\" AS col\n\t\tWHERE sch.\"id\" = tbl.\"schema_id\"\n\t\t  AND tbl.\"id\" = col.\"table_id\");\nend;\n\n\n\ncreate function sys.columnsize(tpe varchar(1024), count bigint)\nreturns bigint\nbegin\n\t\tif tpe in ('tinyint', 'boolean')\n\t\tthen return count;\n\tend if;\n\tif tpe = 'smallint'\n\t\tthen return 2 * count;\n\tend if;\n\tif tpe in ('int', 'real', 'date', 'time', 'timetz', 'sec_interval', 'month_interval')\n\t\tthen return 4 * count;\n\tend if;\n\tif tpe in ('bigint', 'double', 'timestamp', 'timestamptz', 'inet', 'oid')\n\t\tthen return 8 * count;\n\tend if;\n\tif tpe in ('hugeint', 'decimal', 'uuid', 'mbr')\n\t\tthen return 16 * count;\n\tend if;\n\n\t\tif tpe in ('varchar', 'char', 'clob', 'json', 'url')\n\t\tthen return 4 * count;\n\tend if;\n\tif tpe in ('blob', 'geometry', 'geometrya')\n\t\tthen return 8 * count;\n\tend if;\n\n\treturn 8 * count;\nend;\n\ncreate function sys.heapsize(tpe varchar(1024), count bigint, distincts bigint, avgwidth int)\nreturns bigint\nbegin\n\t\tif tpe in ('varchar', 'char', 'clob', 'json', 'url')\n\t\tthen return 8192 + ((avgwidth + 8) * distincts);\n\tend if;\n\tif tpe in ('blob', 'geometry', 'geometrya')\n\t\tthen return 32 + (avgwidth * count);\n\tend if;\n\n\treturn 0;\nend;\n\ncreate function sys.hashsize(b boolean, count bigint)\nreturns bigint\nbegin\n\t\tif b = true\n\t\tthen return 8 * count;\n\tend if;\n\treturn 0;\nend;\n\ncreate function sys.imprintsize(tpe varchar(1024), count bigint)\nreturns bigint\nbegin\n\t\tif tpe in ('tinyint', 'boolean')\n\t\tthen return cast(0.2 * count as bigint);\n\tend if;\n\tif tpe = 'smallint'\n\t\tthen return cast(0.4 * count as bigint);\n\tend if;\n\tif tpe in ('int', 'real', 'date', 'time', 'timetz', 'sec_interval', 'month_interval')\n\t\tthen return cast(0.8 * count as bigint);\n\tend if;\n\tif tpe in ('bigint', 'double', 'timestamp', 'timestamptz', 'inet', 'oid')\n\t\tthen return cast(1.6 * count as bigint);\n\tend if;\n\t\tif tpe in ('hugeint', 'decimal', 'uuid', 'mbr')\n\t\tthen return cast(3.2 * count as bigint);\n\tend if;\n\n\t\treturn 0;\nend;\n\ncreate view sys.storagemodel as\nselect \"schema\", \"table\", \"column\", \"type\", \"count\",\n\tsys.columnsize(\"type\", \"count\") as columnsize,\n\tsys.heapsize(\"type\", \"count\", \"distinct\", \"atomwidth\") as heapsize,\n\tsys.hashsize(\"reference\", \"count\") as hashsize,\n\tcase when isacolumn then sys.imprintsize(\"type\", \"count\") else 0 end as imprintsize,\n\tcase when (isacolumn and not sorted) then cast(8 * \"count\" as bigint) else 0 end as orderidxsize,\n\tsorted, \"unique\", isacolumn\n from sys.storagemodelinput\norder by \"schema\", \"table\", \"column\";\n\ncreate view sys.tablestoragemodel as\nselect \"schema\", \"table\",\n\tmax(\"count\") as \"rowcount\",\n\tcount(*) as \"storages\",\n\tsum(sys.columnsize(\"type\", \"count\")) as columnsize,\n\tsum(sys.heapsize(\"type\", \"count\", \"distinct\", \"atomwidth\")) as heapsize,\n\tsum(sys.hashsize(\"reference\", \"count\")) as hashsize,\n\tsum(case when isacolumn then sys.imprintsize(\"type\", \"count\") else 0 end) as imprintsize,\n\tsum(case when (isacolumn and not sorted) then cast(8 * \"count\" as bigint) else 0 end) as orderidxsize\n from sys.storagemodelinput\ngroup by \"schema\", \"table\"\norder by \"schema\", \"table\";\n" }, 
