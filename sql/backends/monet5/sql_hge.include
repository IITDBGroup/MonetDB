{ "sql_hge",
"# This Source Code Form is subject to the terms of the Mozilla Public \n"
"# License, v. 2.0.  If a copy of the MPL was not distributed with this \n"
"# file, You can obtain one at http://mozilla.org/MPL/2.0/. \n"
"# \n"
"# Copyright 1997 - July 2008 CWI, August 2008 - 2019 MonetDB B.V. \n"
"module batsql; \n"
"module sql; \n"
"pattern calc.hash( v:hge ) :lng address MKEYhash;  \n"
"command batcalc.hash( b:bat[:hge] ) :bat[:lng] address MKEYbathash; \n"
"command sql.dec_round( v:hge, r:hge ) :hge  \n"
"address hge_dec_round_wrap \n"
"comment \"round off the value v to nearests multiple of r\"; \n"
"command batsql.dec_round( v:bat[:hge], r:hge ) :bat[:hge]  \n"
"address hge_bat_dec_round_wrap \n"
"comment \"round off the value v to nearests multiple of r\"; \n"
"command sql.round( v:hge, d:int, s:int, r:bte) :hge \n"
"address hge_round_wrap \n"
"comment \"round off the decimal v(d,s) to r digits behind the dot (if r < 0, before the dot)\"; \n"
"command batsql.round( v:bat[:hge], d:int, s:int, r:bte) :bat[:hge] \n"
"address hge_bat_round_wrap \n"
"comment \"round off the decimal v(d,s) to r digits behind the dot (if r < 0, before the dot)\"; \n"
"command calc.second_interval( sc:int, v:hge, ek:int, sk:int ) :lng \n"
"address hge_dec2second_interval \n"
"comment \"cast hge decimal to a second_interval\"; \n"
"command calc.hge( v:void, digits:int ) :hge  \n"
"address nil_2num_hge \n"
"comment \"cast to hge and check for overflow\"; \n"
"command calc.hge( v:void, digits:int, scale:int ) :hge  \n"
"address nil_2dec_hge \n"
"comment \"cast to dec(hge) and check for overflow\"; \n"
"command batcalc.hge( v:bat[:void], digits:int ) :bat[:hge]  \n"
"address batnil_2num_hge \n"
"comment \"cast to hge and check for overflow\"; \n"
"command batcalc.hge( v:bat[:void], digits:int, scale:int ) :bat[:hge]  \n"
"address batnil_2dec_hge \n"
"comment \"cast to dec(hge) and check for overflow\"; \n"
"command calc.hge( v:str, digits:int ) :hge  \n"
"address str_2num_hge \n"
"comment \"cast to hge and check for overflow\"; \n"
"command calc.hge( v:str, digits:int, scale:int ) :hge  \n"
"address str_2dec_hge \n"
"comment \"cast to dec(hge) and check for overflow\"; \n"
"command batcalc.hge( v:bat[:str], digits:int ) :bat[:hge]  \n"
"address batstr_2num_hge \n"
"comment \"cast to hge and check for overflow\"; \n"
"command batcalc.hge( v:bat[:str], digits:int, scale:int ) :bat[:hge]  \n"
"address batstr_2dec_hge \n"
"comment \"cast to dec(hge) and check for overflow\"; \n"
"pattern calc.month_interval( v:hge, ek:int, sk:int ) :int \n"
"address month_interval \n"
"comment \"cast hge to a month_interval and check for overflow\"; \n"
"pattern calc.second_interval( v:hge, ek:int, sk:int ) :lng \n"
"address second_interval \n"
"comment \"cast hge to a second_interval and check for overflow\"; \n"
"include sql_decimal_hge; \n"
"include sql_aggr_hge; \n"
"include sql_rank_hge; \n"
},
