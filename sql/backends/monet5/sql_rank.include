{ "sql_rank",
"# This Source Code Form is subject to the terms of the Mozilla Public \n"
"# License, v. 2.0.  If a copy of the MPL was not distributed with this \n"
"# file, You can obtain one at http://mozilla.org/MPL/2.0/. \n"
"# \n"
"# Copyright 1997 - July 2008 CWI, August 2008 - 2019 MonetDB B.V. \n"
"# This file was generated by using the script sql_rank.mal.sh. \n"
"module sql; \n"
"pattern sql.diff(b:any_1) :bit \n"
"address SQLdiff \n"
"comment \"return true if cur != prev row\"; \n"
"pattern batsql.diff(b:bat[:any_1]) :bat[:bit] \n"
"address SQLdiff \n"
"comment \"return true if cur != prev row\"; \n"
"pattern sql.diff(p:bit, b:any_1) :bit \n"
"address SQLdiff \n"
"comment \"return true if cur != prev row\"; \n"
"pattern batsql.diff(p:bat[:bit], b:bat[:any_1]) :bat[:bit] \n"
"address SQLdiff \n"
"comment \"return true if cur != prev row\"; \n"
"pattern sql.window_bound(b:any_1, unit:int, bound:int, excl:int, limit:bte) :lng \n"
"address SQLwindow_bound \n"
"comment \"computes window ranges for each row\"; \n"
"pattern batsql.window_bound(b:bat[:any_1], unit:int, bound:int, excl:int, limit:bte) :bat[:lng] \n"
"address SQLwindow_bound \n"
"comment \"computes window ranges for each row\"; \n"
"pattern sql.window_bound(p:bit, b:any_1, unit:int, bound:int, excl:int, limit:bte) :lng \n"
"address SQLwindow_bound \n"
"comment \"computes window ranges for each row\"; \n"
"pattern batsql.window_bound(p:bat[:bit], b:bat[:any_1], unit:int, bound:int, excl:int, limit:bte) :bat[:lng] \n"
"address SQLwindow_bound \n"
"comment \"computes window ranges for each row\"; \n"
"pattern batsql.window_bound(b:bat[:any_1], unit:int, bound:int, excl:int, limit:bat[:bte]) :bat[:lng] \n"
"address SQLwindow_bound \n"
"comment \"computes window ranges for each row\"; \n"
"pattern batsql.window_bound(p:bat[:bit], b:bat[:any_1], unit:int, bound:int, excl:int, limit:bat[:bte]) :bat[:lng] \n"
"address SQLwindow_bound \n"
"comment \"computes window ranges for each row\"; \n"
"pattern sql.window_bound(b:any_1, unit:int, bound:int, excl:int, limit:sht) :lng \n"
"address SQLwindow_bound \n"
"comment \"computes window ranges for each row\"; \n"
"pattern batsql.window_bound(b:bat[:any_1], unit:int, bound:int, excl:int, limit:sht) :bat[:lng] \n"
"address SQLwindow_bound \n"
"comment \"computes window ranges for each row\"; \n"
"pattern sql.window_bound(p:bit, b:any_1, unit:int, bound:int, excl:int, limit:sht) :lng \n"
"address SQLwindow_bound \n"
"comment \"computes window ranges for each row\"; \n"
"pattern batsql.window_bound(p:bat[:bit], b:bat[:any_1], unit:int, bound:int, excl:int, limit:sht) :bat[:lng] \n"
"address SQLwindow_bound \n"
"comment \"computes window ranges for each row\"; \n"
"pattern batsql.window_bound(b:bat[:any_1], unit:int, bound:int, excl:int, limit:bat[:sht]) :bat[:lng] \n"
"address SQLwindow_bound \n"
"comment \"computes window ranges for each row\"; \n"
"pattern batsql.window_bound(p:bat[:bit], b:bat[:any_1], unit:int, bound:int, excl:int, limit:bat[:sht]) :bat[:lng] \n"
"address SQLwindow_bound \n"
"comment \"computes window ranges for each row\"; \n"
"pattern sql.window_bound(b:any_1, unit:int, bound:int, excl:int, limit:int) :lng \n"
"address SQLwindow_bound \n"
"comment \"computes window ranges for each row\"; \n"
"pattern batsql.window_bound(b:bat[:any_1], unit:int, bound:int, excl:int, limit:int) :bat[:lng] \n"
"address SQLwindow_bound \n"
"comment \"computes window ranges for each row\"; \n"
"pattern sql.window_bound(p:bit, b:any_1, unit:int, bound:int, excl:int, limit:int) :lng \n"
"address SQLwindow_bound \n"
"comment \"computes window ranges for each row\"; \n"
"pattern batsql.window_bound(p:bat[:bit], b:bat[:any_1], unit:int, bound:int, excl:int, limit:int) :bat[:lng] \n"
"address SQLwindow_bound \n"
"comment \"computes window ranges for each row\"; \n"
"pattern batsql.window_bound(b:bat[:any_1], unit:int, bound:int, excl:int, limit:bat[:int]) :bat[:lng] \n"
"address SQLwindow_bound \n"
"comment \"computes window ranges for each row\"; \n"
"pattern batsql.window_bound(p:bat[:bit], b:bat[:any_1], unit:int, bound:int, excl:int, limit:bat[:int]) :bat[:lng] \n"
"address SQLwindow_bound \n"
"comment \"computes window ranges for each row\"; \n"
"pattern sql.window_bound(b:any_1, unit:int, bound:int, excl:int, limit:lng) :lng \n"
"address SQLwindow_bound \n"
"comment \"computes window ranges for each row\"; \n"
"pattern batsql.window_bound(b:bat[:any_1], unit:int, bound:int, excl:int, limit:lng) :bat[:lng] \n"
"address SQLwindow_bound \n"
"comment \"computes window ranges for each row\"; \n"
"pattern sql.window_bound(p:bit, b:any_1, unit:int, bound:int, excl:int, limit:lng) :lng \n"
"address SQLwindow_bound \n"
"comment \"computes window ranges for each row\"; \n"
"pattern batsql.window_bound(p:bat[:bit], b:bat[:any_1], unit:int, bound:int, excl:int, limit:lng) :bat[:lng] \n"
"address SQLwindow_bound \n"
"comment \"computes window ranges for each row\"; \n"
"pattern batsql.window_bound(b:bat[:any_1], unit:int, bound:int, excl:int, limit:bat[:lng]) :bat[:lng] \n"
"address SQLwindow_bound \n"
"comment \"computes window ranges for each row\"; \n"
"pattern batsql.window_bound(p:bat[:bit], b:bat[:any_1], unit:int, bound:int, excl:int, limit:bat[:lng]) :bat[:lng] \n"
"address SQLwindow_bound \n"
"comment \"computes window ranges for each row\"; \n"
"pattern sql.window_bound(b:any_1, unit:int, bound:int, excl:int, limit:flt) :lng \n"
"address SQLwindow_bound \n"
"comment \"computes window ranges for each row\"; \n"
"pattern batsql.window_bound(b:bat[:any_1], unit:int, bound:int, excl:int, limit:flt) :bat[:lng] \n"
"address SQLwindow_bound \n"
"comment \"computes window ranges for each row\"; \n"
"pattern sql.window_bound(p:bit, b:any_1, unit:int, bound:int, excl:int, limit:flt) :lng \n"
"address SQLwindow_bound \n"
"comment \"computes window ranges for each row\"; \n"
"pattern batsql.window_bound(p:bat[:bit], b:bat[:any_1], unit:int, bound:int, excl:int, limit:flt) :bat[:lng] \n"
"address SQLwindow_bound \n"
"comment \"computes window ranges for each row\"; \n"
"pattern batsql.window_bound(b:bat[:any_1], unit:int, bound:int, excl:int, limit:bat[:flt]) :bat[:lng] \n"
"address SQLwindow_bound \n"
"comment \"computes window ranges for each row\"; \n"
"pattern batsql.window_bound(p:bat[:bit], b:bat[:any_1], unit:int, bound:int, excl:int, limit:bat[:flt]) :bat[:lng] \n"
"address SQLwindow_bound \n"
"comment \"computes window ranges for each row\"; \n"
"pattern sql.window_bound(b:any_1, unit:int, bound:int, excl:int, limit:dbl) :lng \n"
"address SQLwindow_bound \n"
"comment \"computes window ranges for each row\"; \n"
"pattern batsql.window_bound(b:bat[:any_1], unit:int, bound:int, excl:int, limit:dbl) :bat[:lng] \n"
"address SQLwindow_bound \n"
"comment \"computes window ranges for each row\"; \n"
"pattern sql.window_bound(p:bit, b:any_1, unit:int, bound:int, excl:int, limit:dbl) :lng \n"
"address SQLwindow_bound \n"
"comment \"computes window ranges for each row\"; \n"
"pattern batsql.window_bound(p:bat[:bit], b:bat[:any_1], unit:int, bound:int, excl:int, limit:dbl) :bat[:lng] \n"
"address SQLwindow_bound \n"
"comment \"computes window ranges for each row\"; \n"
"pattern batsql.window_bound(b:bat[:any_1], unit:int, bound:int, excl:int, limit:bat[:dbl]) :bat[:lng] \n"
"address SQLwindow_bound \n"
"comment \"computes window ranges for each row\"; \n"
"pattern batsql.window_bound(p:bat[:bit], b:bat[:any_1], unit:int, bound:int, excl:int, limit:bat[:dbl]) :bat[:lng] \n"
"address SQLwindow_bound \n"
"comment \"computes window ranges for each row\"; \n"
"pattern sql.row_number(b:any_1, p:bit, o:bit) :int \n"
"address SQLrow_number \n"
"comment \"return the row_numer-ed groups\"; \n"
"pattern batsql.row_number(b:bat[:any_1], p:any_2, o:any_3) :bat[:int] \n"
"address SQLrow_number \n"
"comment \"return the row_numer-ed groups\"; \n"
"pattern sql.rank(b:any_1, p:bit, o:bit) :int \n"
"address SQLrank \n"
"comment \"return the ranked groups\"; \n"
"pattern batsql.rank(b:bat[:any_1], p:any_2, o:any_3) :bat[:int] \n"
"address SQLrank \n"
"comment \"return the ranked groups\"; \n"
"pattern sql.dense_rank(b:any_1, p:bit, o:bit) :int \n"
"address SQLdense_rank \n"
"comment \"return the densely ranked groups\"; \n"
"pattern batsql.dense_rank(b:bat[:any_1], p:any_2, o:any_3) :bat[:int] \n"
"address SQLdense_rank \n"
"comment \"return the densely ranked groups\"; \n"
"pattern sql.percent_rank(b:any_1, p:bit, o:bit) :dbl \n"
"address SQLpercent_rank \n"
"comment \"return the percentage into the total number of groups for each row\"; \n"
"pattern batsql.percent_rank(b:bat[:any_1], p:any_2, o:any_3) :bat[:dbl] \n"
"address SQLpercent_rank \n"
"comment \"return the percentage into the total number of groups for each row\"; \n"
"pattern sql.cume_dist(b:any_1, p:bit, o:bit) :dbl \n"
"address SQLcume_dist \n"
"comment \"return the accumulated distribution of the number of rows per group to the total number of partition rows\"; \n"
"pattern batsql.cume_dist(b:bat[:any_1], p:any_2, o:any_3) :bat[:dbl] \n"
"address SQLcume_dist \n"
"comment \"return the accumulated distribution of the number of rows per group to the total number of partition rows\"; \n"
"pattern sql.lag(b:any_1, p:any_3, o:any_4) :any_1 \n"
"address SQLlag \n"
"comment \"return the value in the previous row in the partition or NULL if non existent\"; \n"
"pattern batsql.lag(b:bat[:any_1], p:any_3, o:any_4) :bat[:any_1] \n"
"address SQLlag \n"
"comment \"return the value in the previous row in the partition or NULL if non existent\"; \n"
"pattern sql.lag(b:any_1, l:any_2, p:any_3, o:any_4) :any_1 \n"
"address SQLlag \n"
"comment \"return the value in the previous 'l' row in the partition or NULL if non existent\"; \n"
"pattern batsql.lag(b:bat[:any_1], l:any_2, p:any_3, o:any_4) :bat[:any_1] \n"
"address SQLlag \n"
"comment \"return the value in the previous 'l' row in the partition or NULL if non existent\"; \n"
"pattern sql.lag(b:any_1, l:bat[:any_2], p:any_3, o:any_4) :any_1 \n"
"address SQLlag \n"
"comment \"return the value in the previous 'l' row in the partition or NULL if non existent\"; \n"
"pattern batsql.lag(b:bat[:any_1], l:bat[:any_2], p:any_3, o:any_4) :bat[:any_1] \n"
"address SQLlag \n"
"comment \"return the value in the previous 'l' row in the partition or NULL if non existent\"; \n"
"pattern sql.lag(b:any_1, l:any_2, d:any_1, p:any_3, o:any_4) :any_1 \n"
"address SQLlag \n"
"comment \"return the value in the previous 'l' row in the partition or 'd' if non existent\"; \n"
"pattern batsql.lag(b:bat[:any_1], l:any_2, d:any_1, p:any_3, o:any_4) :bat[:any_1] \n"
"address SQLlag \n"
"comment \"return the value in the previous 'l' row in the partition or 'd' if non existent\"; \n"
"pattern sql.lag(b:any_1, l:bat[:any_2], d:any_1, p:any_3, o:any_4) :any_1 \n"
"address SQLlag \n"
"comment \"return the value in the previous 'l' row in the partition or 'd' if non existent\"; \n"
"pattern batsql.lag(b:bat[:any_1], l:bat[:any_2], d:any_1, p:any_3, o:any_4) :bat[:any_1] \n"
"address SQLlag \n"
"comment \"return the value in the previous 'l' row in the partition or 'd' if non existent\"; \n"
"pattern sql.lag(b:any_1, l:any_2, d:bat[:any_1], p:any_3, o:any_4) :any_1 \n"
"address SQLlag \n"
"comment \"return the value in the previous 'l' row in the partition or 'd' if non existent\"; \n"
"pattern batsql.lag(b:bat[:any_1], l:any_2, d:bat[:any_1], p:any_3, o:any_4) :bat[:any_1] \n"
"address SQLlag \n"
"comment \"return the value in the previous 'l' row in the partition or 'd' if non existent\"; \n"
"pattern sql.lag(b:any_1, l:bat[:any_2], d:bat[:any_1], p:any_3, o:any_4) :any_1 \n"
"address SQLlag \n"
"comment \"return the value in the previous 'l' row in the partition or 'd' if non existent\"; \n"
"pattern batsql.lag(b:bat[:any_1], l:bat[:any_2], d:bat[:any_1], p:any_3, o:any_4) :bat[:any_1] \n"
"address SQLlag \n"
"comment \"return the value in the previous 'l' row in the partition or 'd' if non existent\"; \n"
"pattern sql.lead(b:any_1, p:any_3, o:any_4) :any_1 \n"
"address SQLlead \n"
"comment \"return the value in the next row in the partition or NULL if non existent\"; \n"
"pattern batsql.lead(b:bat[:any_1], p:any_3, o:any_4) :bat[:any_1] \n"
"address SQLlead \n"
"comment \"return the value in the next row in the partition or NULL if non existent\"; \n"
"pattern sql.lead(b:any_1, l:any_2, p:any_3, o:any_4) :any_1 \n"
"address SQLlead \n"
"comment \"return the value in the next 'l' row in the partition or NULL if non existent\"; \n"
"pattern batsql.lead(b:bat[:any_1], l:any_2, p:any_3, o:any_4) :bat[:any_1] \n"
"address SQLlead \n"
"comment \"return the value in the next 'l' row in the partition or NULL if non existent\"; \n"
"pattern sql.lead(b:any_1, l:bat[:any_2], p:any_3, o:any_4) :any_1 \n"
"address SQLlead \n"
"comment \"return the value in the next 'l' row in the partition or NULL if non existent\"; \n"
"pattern batsql.lead(b:bat[:any_1], l:bat[:any_2], p:any_3, o:any_4) :bat[:any_1] \n"
"address SQLlead \n"
"comment \"return the value in the next 'l' row in the partition or NULL if non existent\"; \n"
"pattern sql.lead(b:any_1, l:any_2, d:any_1, p:any_3, o:any_4) :any_1 \n"
"address SQLlead \n"
"comment \"return the value in the next 'l' row in the partition or 'd' if non existent\"; \n"
"pattern batsql.lead(b:bat[:any_1], l:any_2, d:any_1, p:any_3, o:any_4) :bat[:any_1] \n"
"address SQLlead \n"
"comment \"return the value in the next 'l' row in the partition or 'd' if non existent\"; \n"
"pattern sql.lead(b:any_1, l:bat[:any_2], d:any_1, p:any_3, o:any_4) :any_1 \n"
"address SQLlead \n"
"comment \"return the value in the next 'l' row in the partition or 'd' if non existent\"; \n"
"pattern batsql.lead(b:bat[:any_1], l:bat[:any_2], d:any_1, p:any_3, o:any_4) :bat[:any_1] \n"
"address SQLlead \n"
"comment \"return the value in the next 'l' row in the partition or 'd' if non existent\"; \n"
"pattern sql.lead(b:any_1, l:any_2, d:bat[:any_1], p:any_3, o:any_4) :any_1 \n"
"address SQLlead \n"
"comment \"return the value in the next 'l' row in the partition or 'd' if non existent\"; \n"
"pattern batsql.lead(b:bat[:any_1], l:any_2, d:bat[:any_1], p:any_3, o:any_4) :bat[:any_1] \n"
"address SQLlead \n"
"comment \"return the value in the next 'l' row in the partition or 'd' if non existent\"; \n"
"pattern sql.lead(b:any_1, l:bat[:any_2], d:bat[:any_1], p:any_3, o:any_4) :any_1 \n"
"address SQLlead \n"
"comment \"return the value in the next 'l' row in the partition or 'd' if non existent\"; \n"
"pattern batsql.lead(b:bat[:any_1], l:bat[:any_2], d:bat[:any_1], p:any_3, o:any_4) :bat[:any_1] \n"
"address SQLlead \n"
"comment \"return the value in the next 'l' row in the partition or 'd' if non existent\"; \n"
"pattern sql.ntile(b:any_1, n:any_2, p:any_3, o:any_4) :any_2 \n"
"address SQLntile \n"
"comment \"return the groups divided as equally as possible\"; \n"
"pattern batsql.ntile(b:bat[:any_1], n:any_2, p:any_3, o:any_4) :bat[:any_2] \n"
"address SQLntile \n"
"comment \"return the groups divided as equally as possible\"; \n"
"pattern sql.ntile(b:any_1, n:bat[:any_2], p:any_3, o:any_4) :any_2 \n"
"address SQLntile \n"
"comment \"return the groups divided as equally as possible\"; \n"
"pattern batsql.ntile(b:bat[:any_1], n:bat[:any_2], p:any_3, o:any_4) :bat[:any_2] \n"
"address SQLntile \n"
"comment \"return the groups divided as equally as possible\"; \n"
"pattern sql.first_value(b:any_1, s:lng, e:lng) :any_1 \n"
"address SQLfirst_value \n"
"comment \"return the first value of groups\"; \n"
"pattern batsql.first_value(b:bat[:any_1], s:bat[:lng], e:bat[:lng]) :bat[:any_1] \n"
"address SQLfirst_value \n"
"comment \"return the first value of groups\"; \n"
"pattern sql.last_value(b:any_1, s:lng, e:lng) :any_1 \n"
"address SQLlast_value \n"
"comment \"return the last value of groups\"; \n"
"pattern batsql.last_value(b:bat[:any_1], s:bat[:lng], e:bat[:lng]) :bat[:any_1] \n"
"address SQLlast_value \n"
"comment \"return the last value of groups\"; \n"
"pattern sql.nth_value(b:any_1, n:any_2, s:lng, e:lng) :any_1 \n"
"address SQLnth_value \n"
"comment \"return the nth value of each group\"; \n"
"pattern batsql.nth_value(b:bat[:any_1], n:any_2, s:bat[:lng], e:bat[:lng]) :bat[:any_1] \n"
"address SQLnth_value \n"
"comment \"return the nth value of each group\"; \n"
"pattern sql.nth_value(b:any_1, n:bat[:any_2], s:lng, e:lng) :any_1 \n"
"address SQLnth_value \n"
"comment \"return the nth value of each group\"; \n"
"pattern batsql.nth_value(b:bat[:any_1], n:bat[:any_2], s:bat[:lng], e:bat[:lng]) :bat[:any_1] \n"
"address SQLnth_value \n"
"comment \"return the nth value of each group\"; \n"
"pattern sql.min(b:any_1, s:lng, e:lng) :any_1 \n"
"address SQLmin \n"
"comment \"return the minimum of groups\"; \n"
"pattern batsql.min(b:bat[:any_1], s:bat[:lng], e:bat[:lng]) :bat[:any_1] \n"
"address SQLmin \n"
"comment \"return the minimum of groups\"; \n"
"pattern sql.max(b:any_1, s:lng, e:lng) :any_1 \n"
"address SQLmax \n"
"comment \"return the maximum of groups\"; \n"
"pattern batsql.max(b:bat[:any_1], s:bat[:lng], e:bat[:lng]) :bat[:any_1] \n"
"address SQLmax \n"
"comment \"return the maximum of groups\"; \n"
"pattern sql.count(b:any_1, ignils:bit, s:lng, e:lng) :lng \n"
"address SQLcount \n"
"comment \"return count of groups\"; \n"
"pattern batsql.count(b:bat[:any_1], ignils:bit, s:bat[:lng], e:bat[:lng]) :bat[:lng] \n"
"address SQLcount \n"
"comment \"return count of groups\"; \n"
"pattern sql.sum(b:bte, s:lng, e:lng) :lng \n"
"address SQLsum \n"
"comment \"return the sum of groups\"; \n"
"pattern batsql.sum(b:bat[:bte], s:bat[:lng], e:bat[:lng]) :bat[:lng] \n"
"address SQLsum \n"
"comment \"return the sum of groups\"; \n"
"pattern sql.prod(b:bte, s:lng, e:lng) :lng \n"
"address SQLprod \n"
"comment \"return the product of groups\"; \n"
"pattern batsql.prod(b:bat[:bte], s:bat[:lng], e:bat[:lng]) :bat[:lng] \n"
"address SQLprod \n"
"comment \"return the product of groups\"; \n"
"pattern sql.sum(b:sht, s:lng, e:lng) :lng \n"
"address SQLsum \n"
"comment \"return the sum of groups\"; \n"
"pattern batsql.sum(b:bat[:sht], s:bat[:lng], e:bat[:lng]) :bat[:lng] \n"
"address SQLsum \n"
"comment \"return the sum of groups\"; \n"
"pattern sql.prod(b:sht, s:lng, e:lng) :lng \n"
"address SQLprod \n"
"comment \"return the product of groups\"; \n"
"pattern batsql.prod(b:bat[:sht], s:bat[:lng], e:bat[:lng]) :bat[:lng] \n"
"address SQLprod \n"
"comment \"return the product of groups\"; \n"
"pattern sql.sum(b:int, s:lng, e:lng) :lng \n"
"address SQLsum \n"
"comment \"return the sum of groups\"; \n"
"pattern batsql.sum(b:bat[:int], s:bat[:lng], e:bat[:lng]) :bat[:lng] \n"
"address SQLsum \n"
"comment \"return the sum of groups\"; \n"
"pattern sql.prod(b:int, s:lng, e:lng) :lng \n"
"address SQLprod \n"
"comment \"return the product of groups\"; \n"
"pattern batsql.prod(b:bat[:int], s:bat[:lng], e:bat[:lng]) :bat[:lng] \n"
"address SQLprod \n"
"comment \"return the product of groups\"; \n"
"pattern sql.sum(b:lng, s:lng, e:lng) :lng \n"
"address SQLsum \n"
"comment \"return the sum of groups\"; \n"
"pattern batsql.sum(b:bat[:lng], s:bat[:lng], e:bat[:lng]) :bat[:lng] \n"
"address SQLsum \n"
"comment \"return the sum of groups\"; \n"
"pattern sql.prod(b:lng, s:lng, e:lng) :lng \n"
"address SQLprod \n"
"comment \"return the product of groups\"; \n"
"pattern batsql.prod(b:bat[:lng], s:bat[:lng], e:bat[:lng]) :bat[:lng] \n"
"address SQLprod \n"
"comment \"return the product of groups\"; \n"
"pattern sql.sum(b:flt, s:lng, e:lng) :flt \n"
"address SQLsum \n"
"comment \"return the sum of groups\"; \n"
"pattern batsql.sum(b:bat[:flt], s:bat[:lng], e:bat[:lng]) :bat[:flt] \n"
"address SQLsum \n"
"comment \"return the sum of groups\"; \n"
"pattern sql.prod(b:flt, s:lng, e:lng) :flt \n"
"address SQLprod \n"
"comment \"return the product of groups\"; \n"
"pattern batsql.prod(b:bat[:flt], s:bat[:lng], e:bat[:lng]) :bat[:flt] \n"
"address SQLprod \n"
"comment \"return the product of groups\"; \n"
"pattern sql.sum(b:flt, s:lng, e:lng) :dbl \n"
"address SQLsum \n"
"comment \"return the sum of groups\"; \n"
"pattern batsql.sum(b:bat[:flt], s:bat[:lng], e:bat[:lng]) :bat[:dbl] \n"
"address SQLsum \n"
"comment \"return the sum of groups\"; \n"
"pattern sql.prod(b:flt, s:lng, e:lng) :dbl \n"
"address SQLprod \n"
"comment \"return the product of groups\"; \n"
"pattern batsql.prod(b:bat[:flt], s:bat[:lng], e:bat[:lng]) :bat[:dbl] \n"
"address SQLprod \n"
"comment \"return the product of groups\"; \n"
"pattern sql.sum(b:dbl, s:lng, e:lng) :dbl \n"
"address SQLsum \n"
"comment \"return the sum of groups\"; \n"
"pattern batsql.sum(b:bat[:dbl], s:bat[:lng], e:bat[:lng]) :bat[:dbl] \n"
"address SQLsum \n"
"comment \"return the sum of groups\"; \n"
"pattern sql.prod(b:dbl, s:lng, e:lng) :dbl \n"
"address SQLprod \n"
"comment \"return the product of groups\"; \n"
"pattern batsql.prod(b:bat[:dbl], s:bat[:lng], e:bat[:lng]) :bat[:dbl] \n"
"address SQLprod \n"
"comment \"return the product of groups\"; \n"
"pattern sql.avg(b:bte, s:lng, e:lng) :dbl \n"
"address SQLavg \n"
"comment \"return the average of groups\"; \n"
"pattern batsql.avg(b:bat[:bte], s:bat[:lng], e:bat[:lng]) :bat[:dbl] \n"
"address SQLavg \n"
"comment \"return the average of groups\"; \n"
"pattern sql.avg(b:sht, s:lng, e:lng) :dbl \n"
"address SQLavg \n"
"comment \"return the average of groups\"; \n"
"pattern batsql.avg(b:bat[:sht], s:bat[:lng], e:bat[:lng]) :bat[:dbl] \n"
"address SQLavg \n"
"comment \"return the average of groups\"; \n"
"pattern sql.avg(b:int, s:lng, e:lng) :dbl \n"
"address SQLavg \n"
"comment \"return the average of groups\"; \n"
"pattern batsql.avg(b:bat[:int], s:bat[:lng], e:bat[:lng]) :bat[:dbl] \n"
"address SQLavg \n"
"comment \"return the average of groups\"; \n"
"pattern sql.avg(b:lng, s:lng, e:lng) :dbl \n"
"address SQLavg \n"
"comment \"return the average of groups\"; \n"
"pattern batsql.avg(b:bat[:lng], s:bat[:lng], e:bat[:lng]) :bat[:dbl] \n"
"address SQLavg \n"
"comment \"return the average of groups\"; \n"
"pattern sql.avg(b:flt, s:lng, e:lng) :dbl \n"
"address SQLavg \n"
"comment \"return the average of groups\"; \n"
"pattern batsql.avg(b:bat[:flt], s:bat[:lng], e:bat[:lng]) :bat[:dbl] \n"
"address SQLavg \n"
"comment \"return the average of groups\"; \n"
"pattern sql.avg(b:dbl, s:lng, e:lng) :dbl \n"
"address SQLavg \n"
"comment \"return the average of groups\"; \n"
"pattern batsql.avg(b:bat[:dbl], s:bat[:lng], e:bat[:lng]) :bat[:dbl] \n"
"address SQLavg \n"
"comment \"return the average of groups\"; \n"
"command aggr.exist(b:bat[:any_2], h:any_1):bit \n"
"address ALGexist; \n"
"command aggr.exist(b:bat[:any_2]):bit \n"
"address SQLexist; \n"
"pattern aggr.exist(v:any_2):bit \n"
"address SQLexist_val; \n"
},
