{ "sql_rank_hge",
"# This Source Code Form is subject to the terms of the Mozilla Public \n"
"# License, v. 2.0.  If a copy of the MPL was not distributed with this \n"
"# file, You can obtain one at http://mozilla.org/MPL/2.0/. \n"
"# \n"
"# Copyright 1997 - July 2008 CWI, August 2008 - 2019 MonetDB B.V. \n"
"# This file was generated by using the script sql_rank_hge.mal.sh. \n"
"module sql; \n"
"pattern sql.window_bound(b:any_1, unit:int, bound:int, excl:int, start:hge) :lng \n"
"address SQLwindow_bound \n"
"comment \"computes window ranges for each row\"; \n"
"pattern batsql.window_bound(b:bat[:any_1], unit:int, bound:int, excl:int, start:hge) :bat[:lng] \n"
"address SQLwindow_bound \n"
"comment \"computes window ranges for each row\"; \n"
"pattern sql.window_bound(p:bit, b:any_1, unit:int, bound:int, excl:int, start:hge) :lng \n"
"address SQLwindow_bound \n"
"comment \"computes window ranges for each row\"; \n"
"pattern batsql.window_bound(p:bat[:bit], b:bat[:any_1], unit:int, bound:int, excl:int, start:hge) :bat[:lng] \n"
"address SQLwindow_bound \n"
"comment \"computes window ranges for each row\"; \n"
"pattern batsql.window_bound(b:bat[:any_1], unit:int, bound:int, excl:int, start:bat[:hge]) :bat[:lng] \n"
"address SQLwindow_bound \n"
"comment \"computes window ranges for each row\"; \n"
"pattern batsql.window_bound(p:bat[:bit], b:bat[:any_1], unit:int, bound:int, excl:int, start:bat[:hge]) :bat[:lng] \n"
"address SQLwindow_bound \n"
"comment \"computes window ranges for each row\"; \n"
"pattern sql.sum(b:bte, s:lng, e:lng) :hge \n"
"address SQLsum \n"
"comment \"return the sum of groups\"; \n"
"pattern batsql.sum(b:bat[:bte], s:bat[:lng], e:bat[:lng]) :bat[:hge] \n"
"address SQLsum \n"
"comment \"return the sum of groups\"; \n"
"pattern sql.prod(b:bte, s:lng, e:lng) :hge \n"
"address SQLprod \n"
"comment \"return the product of groups\"; \n"
"pattern batsql.prod(b:bat[:bte], s:bat[:lng], e:bat[:lng]) :bat[:hge] \n"
"address SQLprod \n"
"comment \"return the product of groups\"; \n"
"pattern sql.sum(b:sht, s:lng, e:lng) :hge \n"
"address SQLsum \n"
"comment \"return the sum of groups\"; \n"
"pattern batsql.sum(b:bat[:sht], s:bat[:lng], e:bat[:lng]) :bat[:hge] \n"
"address SQLsum \n"
"comment \"return the sum of groups\"; \n"
"pattern sql.prod(b:sht, s:lng, e:lng) :hge \n"
"address SQLprod \n"
"comment \"return the product of groups\"; \n"
"pattern batsql.prod(b:bat[:sht], s:bat[:lng], e:bat[:lng]) :bat[:hge] \n"
"address SQLprod \n"
"comment \"return the product of groups\"; \n"
"pattern sql.sum(b:int, s:lng, e:lng) :hge \n"
"address SQLsum \n"
"comment \"return the sum of groups\"; \n"
"pattern batsql.sum(b:bat[:int], s:bat[:lng], e:bat[:lng]) :bat[:hge] \n"
"address SQLsum \n"
"comment \"return the sum of groups\"; \n"
"pattern sql.prod(b:int, s:lng, e:lng) :hge \n"
"address SQLprod \n"
"comment \"return the product of groups\"; \n"
"pattern batsql.prod(b:bat[:int], s:bat[:lng], e:bat[:lng]) :bat[:hge] \n"
"address SQLprod \n"
"comment \"return the product of groups\"; \n"
"pattern sql.sum(b:lng, s:lng, e:lng) :hge \n"
"address SQLsum \n"
"comment \"return the sum of groups\"; \n"
"pattern batsql.sum(b:bat[:lng], s:bat[:lng], e:bat[:lng]) :bat[:hge] \n"
"address SQLsum \n"
"comment \"return the sum of groups\"; \n"
"pattern sql.prod(b:lng, s:lng, e:lng) :hge \n"
"address SQLprod \n"
"comment \"return the product of groups\"; \n"
"pattern batsql.prod(b:bat[:lng], s:bat[:lng], e:bat[:lng]) :bat[:hge] \n"
"address SQLprod \n"
"comment \"return the product of groups\"; \n"
"pattern sql.sum(b:hge, s:lng, e:lng) :hge \n"
"address SQLsum \n"
"comment \"return the sum of groups\"; \n"
"pattern batsql.sum(b:bat[:hge], s:bat[:lng], e:bat[:lng]) :bat[:hge] \n"
"address SQLsum \n"
"comment \"return the sum of groups\"; \n"
"pattern sql.prod(b:hge, s:lng, e:lng) :hge \n"
"address SQLprod \n"
"comment \"return the product of groups\"; \n"
"pattern batsql.prod(b:bat[:hge], s:bat[:lng], e:bat[:lng]) :bat[:hge] \n"
"address SQLprod \n"
"comment \"return the product of groups\"; \n"
"pattern sql.avg(b:hge, s:lng, e:lng) :dbl \n"
"address SQLavg \n"
"comment \"return the average of groups\"; \n"
"pattern batsql.avg(b:bat[:hge], s:bat[:lng], e:bat[:lng]) :bat[:dbl] \n"
"address SQLavg \n"
"comment \"return the average of groups\"; \n"
},
