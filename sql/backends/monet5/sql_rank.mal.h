/*
* This Source Code Form is subject to the terms of the Mozilla Public
* License, v. 2.0.  If a copy of the MPL was not distributed with this
* file, You can obtain one at http://mozilla.org/MPL/2.0/.
*
* Copyright 1997 - July 2008 CWI, August 2008 - 2019 MonetDB B.V.
*/

// This file was generated automatically with mal2h.py. Do not edit this file directly.
{ "sql_rank", "\n\nmodule sql;\n\npattern sql.diff(b:any_1) :bit\naddress SQLdiff\n;\n\npattern batsql.diff(b:bat[:any_1]) :bat[:bit]\naddress SQLdiff\n;\n\npattern sql.diff(p:bit, b:any_1) :bit\naddress SQLdiff\n;\n\npattern batsql.diff(p:bat[:bit], b:bat[:any_1]) :bat[:bit]\naddress SQLdiff\n;\n\npattern sql.window_bound(b:any_1, unit:int, bound:int, excl:int, limit:bte) :lng\naddress SQLwindow_bound\n;\n\npattern batsql.window_bound(b:bat[:any_1], unit:int, bound:int, excl:int, limit:bte) :bat[:lng]\naddress SQLwindow_bound\n;\n\npattern sql.window_bound(p:bit, b:any_1, unit:int, bound:int, excl:int, limit:bte) :lng\naddress SQLwindow_bound\n;\n\npattern batsql.window_bound(p:bat[:bit], b:bat[:any_1], unit:int, bound:int, excl:int, limit:bte) :bat[:lng]\naddress SQLwindow_bound\n;\n\npattern batsql.window_bound(b:bat[:any_1], unit:int, bound:int, excl:int, limit:bat[:bte]) :bat[:lng]\naddress SQLwindow_bound\n;\n\npattern batsql.window_bound(p:bat[:bit], b:bat[:any_1], unit:int, bound:int, excl:int, limit:bat[:bte]) :bat[:lng]\naddress SQLwindow_bound\n;\n\n\npattern sql.window_bound(b:any_1, unit:int, bound:int, excl:int, limit:sht) :lng\naddress SQLwindow_bound\n;\n\npattern batsql.window_bound(b:bat[:any_1], unit:int, bound:int, excl:int, limit:sht) :bat[:lng]\naddress SQLwindow_bound\n;\n\npattern sql.window_bound(p:bit, b:any_1, unit:int, bound:int, excl:int, limit:sht) :lng\naddress SQLwindow_bound\n;\n\npattern batsql.window_bound(p:bat[:bit], b:bat[:any_1], unit:int, bound:int, excl:int, limit:sht) :bat[:lng]\naddress SQLwindow_bound\n;\n\npattern batsql.window_bound(b:bat[:any_1], unit:int, bound:int, excl:int, limit:bat[:sht]) :bat[:lng]\naddress SQLwindow_bound\n;\n\npattern batsql.window_bound(p:bat[:bit], b:bat[:any_1], unit:int, bound:int, excl:int, limit:bat[:sht]) :bat[:lng]\naddress SQLwindow_bound\n;\n\n\npattern sql.window_bound(b:any_1, unit:int, bound:int, excl:int, limit:int) :lng\naddress SQLwindow_bound\n;\n\npattern batsql.window_bound(b:bat[:any_1], unit:int, bound:int, excl:int, limit:int) :bat[:lng]\naddress SQLwindow_bound\n;\n\npattern sql.window_bound(p:bit, b:any_1, unit:int, bound:int, excl:int, limit:int) :lng\naddress SQLwindow_bound\n;\n\npattern batsql.window_bound(p:bat[:bit], b:bat[:any_1], unit:int, bound:int, excl:int, limit:int) :bat[:lng]\naddress SQLwindow_bound\n;\n\npattern batsql.window_bound(b:bat[:any_1], unit:int, bound:int, excl:int, limit:bat[:int]) :bat[:lng]\naddress SQLwindow_bound\n;\n\npattern batsql.window_bound(p:bat[:bit], b:bat[:any_1], unit:int, bound:int, excl:int, limit:bat[:int]) :bat[:lng]\naddress SQLwindow_bound\n;\n\n\npattern sql.window_bound(b:any_1, unit:int, bound:int, excl:int, limit:lng) :lng\naddress SQLwindow_bound\n;\n\npattern batsql.window_bound(b:bat[:any_1], unit:int, bound:int, excl:int, limit:lng) :bat[:lng]\naddress SQLwindow_bound\n;\n\npattern sql.window_bound(p:bit, b:any_1, unit:int, bound:int, excl:int, limit:lng) :lng\naddress SQLwindow_bound\n;\n\npattern batsql.window_bound(p:bat[:bit], b:bat[:any_1], unit:int, bound:int, excl:int, limit:lng) :bat[:lng]\naddress SQLwindow_bound\n;\n\npattern batsql.window_bound(b:bat[:any_1], unit:int, bound:int, excl:int, limit:bat[:lng]) :bat[:lng]\naddress SQLwindow_bound\n;\n\npattern batsql.window_bound(p:bat[:bit], b:bat[:any_1], unit:int, bound:int, excl:int, limit:bat[:lng]) :bat[:lng]\naddress SQLwindow_bound\n;\n\n\npattern sql.window_bound(b:any_1, unit:int, bound:int, excl:int, limit:flt) :lng\naddress SQLwindow_bound\n;\n\npattern batsql.window_bound(b:bat[:any_1], unit:int, bound:int, excl:int, limit:flt) :bat[:lng]\naddress SQLwindow_bound\n;\n\npattern sql.window_bound(p:bit, b:any_1, unit:int, bound:int, excl:int, limit:flt) :lng\naddress SQLwindow_bound\n;\n\npattern batsql.window_bound(p:bat[:bit], b:bat[:any_1], unit:int, bound:int, excl:int, limit:flt) :bat[:lng]\naddress SQLwindow_bound\n;\n\npattern batsql.window_bound(b:bat[:any_1], unit:int, bound:int, excl:int, limit:bat[:flt]) :bat[:lng]\naddress SQLwindow_bound\n;\n\npattern batsql.window_bound(p:bat[:bit], b:bat[:any_1], unit:int, bound:int, excl:int, limit:bat[:flt]) :bat[:lng]\naddress SQLwindow_bound\n;\n\n\npattern sql.window_bound(b:any_1, unit:int, bound:int, excl:int, limit:dbl) :lng\naddress SQLwindow_bound\n;\n\npattern batsql.window_bound(b:bat[:any_1], unit:int, bound:int, excl:int, limit:dbl) :bat[:lng]\naddress SQLwindow_bound\n;\n\npattern sql.window_bound(p:bit, b:any_1, unit:int, bound:int, excl:int, limit:dbl) :lng\naddress SQLwindow_bound\n;\n\npattern batsql.window_bound(p:bat[:bit], b:bat[:any_1], unit:int, bound:int, excl:int, limit:dbl) :bat[:lng]\naddress SQLwindow_bound\n;\n\npattern batsql.window_bound(b:bat[:any_1], unit:int, bound:int, excl:int, limit:bat[:dbl]) :bat[:lng]\naddress SQLwindow_bound\n;\n\npattern batsql.window_bound(p:bat[:bit], b:bat[:any_1], unit:int, bound:int, excl:int, limit:bat[:dbl]) :bat[:lng]\naddress SQLwindow_bound\n;\n\n\npattern sql.row_number(b:any_1, p:bit, o:bit) :int\naddress SQLrow_number\n;\n\npattern batsql.row_number(b:bat[:any_1], p:any_2, o:any_3) :bat[:int]\naddress SQLrow_number\n;\n\n\npattern sql.rank(b:any_1, p:bit, o:bit) :int\naddress SQLrank\n;\n\npattern batsql.rank(b:bat[:any_1], p:any_2, o:any_3) :bat[:int]\naddress SQLrank\n;\n\n\npattern sql.dense_rank(b:any_1, p:bit, o:bit) :int\naddress SQLdense_rank\n;\n\npattern batsql.dense_rank(b:bat[:any_1], p:any_2, o:any_3) :bat[:int]\naddress SQLdense_rank\n;\n\n\npattern sql.percent_rank(b:any_1, p:bit, o:bit) :dbl\naddress SQLpercent_rank\n;\n\npattern batsql.percent_rank(b:bat[:any_1], p:any_2, o:any_3) :bat[:dbl]\naddress SQLpercent_rank\n;\n\n\npattern sql.cume_dist(b:any_1, p:bit, o:bit) :dbl\naddress SQLcume_dist\n;\n\npattern batsql.cume_dist(b:bat[:any_1], p:any_2, o:any_3) :bat[:dbl]\naddress SQLcume_dist\n;\n\n\npattern sql.lag(b:any_1, p:any_3, o:any_4) :any_1\naddress SQLlag\n;\n\npattern batsql.lag(b:bat[:any_1], p:any_3, o:any_4) :bat[:any_1]\naddress SQLlag\n;\n\n\npattern sql.lag(b:any_1, l:any_2, p:any_3, o:any_4) :any_1\naddress SQLlag\n;\n\npattern batsql.lag(b:bat[:any_1], l:any_2, p:any_3, o:any_4) :bat[:any_1]\naddress SQLlag\n;\n\npattern sql.lag(b:any_1, l:bat[:any_2], p:any_3, o:any_4) :any_1\naddress SQLlag\n;\n\npattern batsql.lag(b:bat[:any_1], l:bat[:any_2], p:any_3, o:any_4) :bat[:any_1]\naddress SQLlag\n;\n\n\npattern sql.lag(b:any_1, l:any_2, d:any_1, p:any_3, o:any_4) :any_1\naddress SQLlag\n;\n\npattern batsql.lag(b:bat[:any_1], l:any_2, d:any_1, p:any_3, o:any_4) :bat[:any_1]\naddress SQLlag\n;\n\npattern sql.lag(b:any_1, l:bat[:any_2], d:any_1, p:any_3, o:any_4) :any_1\naddress SQLlag\n;\n\npattern batsql.lag(b:bat[:any_1], l:bat[:any_2], d:any_1, p:any_3, o:any_4) :bat[:any_1]\naddress SQLlag\n;\n\npattern sql.lag(b:any_1, l:any_2, d:bat[:any_1], p:any_3, o:any_4) :any_1\naddress SQLlag\n;\n\npattern batsql.lag(b:bat[:any_1], l:any_2, d:bat[:any_1], p:any_3, o:any_4) :bat[:any_1]\naddress SQLlag\n;\n\npattern sql.lag(b:any_1, l:bat[:any_2], d:bat[:any_1], p:any_3, o:any_4) :any_1\naddress SQLlag\n;\n\npattern batsql.lag(b:bat[:any_1], l:bat[:any_2], d:bat[:any_1], p:any_3, o:any_4) :bat[:any_1]\naddress SQLlag\n;\n\n\npattern sql.lead(b:any_1, p:any_3, o:any_4) :any_1\naddress SQLlead\n;\n\npattern batsql.lead(b:bat[:any_1], p:any_3, o:any_4) :bat[:any_1]\naddress SQLlead\n;\n\n\npattern sql.lead(b:any_1, l:any_2, p:any_3, o:any_4) :any_1\naddress SQLlead\n;\n\npattern batsql.lead(b:bat[:any_1], l:any_2, p:any_3, o:any_4) :bat[:any_1]\naddress SQLlead\n;\n\npattern sql.lead(b:any_1, l:bat[:any_2], p:any_3, o:any_4) :any_1\naddress SQLlead\n;\n\npattern batsql.lead(b:bat[:any_1], l:bat[:any_2], p:any_3, o:any_4) :bat[:any_1]\naddress SQLlead\n;\n\n\npattern sql.lead(b:any_1, l:any_2, d:any_1, p:any_3, o:any_4) :any_1\naddress SQLlead\n;\n\npattern batsql.lead(b:bat[:any_1], l:any_2, d:any_1, p:any_3, o:any_4) :bat[:any_1]\naddress SQLlead\n;\n\npattern sql.lead(b:any_1, l:bat[:any_2], d:any_1, p:any_3, o:any_4) :any_1\naddress SQLlead\n;\n\npattern batsql.lead(b:bat[:any_1], l:bat[:any_2], d:any_1, p:any_3, o:any_4) :bat[:any_1]\naddress SQLlead\n;\n\npattern sql.lead(b:any_1, l:any_2, d:bat[:any_1], p:any_3, o:any_4) :any_1\naddress SQLlead\n;\n\npattern batsql.lead(b:bat[:any_1], l:any_2, d:bat[:any_1], p:any_3, o:any_4) :bat[:any_1]\naddress SQLlead\n;\n\npattern sql.lead(b:any_1, l:bat[:any_2], d:bat[:any_1], p:any_3, o:any_4) :any_1\naddress SQLlead\n;\n\npattern batsql.lead(b:bat[:any_1], l:bat[:any_2], d:bat[:any_1], p:any_3, o:any_4) :bat[:any_1]\naddress SQLlead\n;\n\n\npattern sql.ntile(b:any_1, n:any_2, p:any_3, o:any_4) :any_2\naddress SQLntile\n;\n\npattern batsql.ntile(b:bat[:any_1], n:any_2, p:any_3, o:any_4) :bat[:any_2]\naddress SQLntile\n;\n\npattern sql.ntile(b:any_1, n:bat[:any_2], p:any_3, o:any_4) :any_2\naddress SQLntile\n;\n\npattern batsql.ntile(b:bat[:any_1], n:bat[:any_2], p:any_3, o:any_4) :bat[:any_2]\naddress SQLntile\n;\n\n\npattern sql.first_value(b:any_1, s:lng, e:lng) :any_1\naddress SQLfirst_value\n;\n\npattern batsql.first_value(b:bat[:any_1], s:bat[:lng], e:bat[:lng]) :bat[:any_1]\naddress SQLfirst_value\n;\n\n\npattern sql.last_value(b:any_1, s:lng, e:lng) :any_1\naddress SQLlast_value\n;\n\npattern batsql.last_value(b:bat[:any_1], s:bat[:lng], e:bat[:lng]) :bat[:any_1]\naddress SQLlast_value\n;\n\n\npattern sql.nth_value(b:any_1, n:any_2, s:lng, e:lng) :any_1\naddress SQLnth_value\n;\n\npattern batsql.nth_value(b:bat[:any_1], n:any_2, s:bat[:lng], e:bat[:lng]) :bat[:any_1]\naddress SQLnth_value\n;\n\npattern sql.nth_value(b:any_1, n:bat[:any_2], s:lng, e:lng) :any_1\naddress SQLnth_value\n;\n\npattern batsql.nth_value(b:bat[:any_1], n:bat[:any_2], s:bat[:lng], e:bat[:lng]) :bat[:any_1]\naddress SQLnth_value\n;\n\n\npattern sql.min(b:any_1, s:lng, e:lng) :any_1\naddress SQLmin\n;\n\npattern batsql.min(b:bat[:any_1], s:bat[:lng], e:bat[:lng]) :bat[:any_1]\naddress SQLmin\n;\n\npattern sql.max(b:any_1, s:lng, e:lng) :any_1\naddress SQLmax\n;\n\npattern batsql.max(b:bat[:any_1], s:bat[:lng], e:bat[:lng]) :bat[:any_1]\naddress SQLmax\n;\n\npattern sql.count(b:any_1, ignils:bit, s:lng, e:lng) :lng\naddress SQLcount\n;\n\npattern batsql.count(b:bat[:any_1], ignils:bit, s:bat[:lng], e:bat[:lng]) :bat[:lng]\naddress SQLcount\n;\n\npattern sql.sum(b:bte, s:lng, e:lng) :lng\naddress SQLsum\n;\n\npattern batsql.sum(b:bat[:bte], s:bat[:lng], e:bat[:lng]) :bat[:lng]\naddress SQLsum\n;\n\npattern sql.prod(b:bte, s:lng, e:lng) :lng\naddress SQLprod\n;\n\npattern batsql.prod(b:bat[:bte], s:bat[:lng], e:bat[:lng]) :bat[:lng]\naddress SQLprod\n;\n\npattern sql.sum(b:sht, s:lng, e:lng) :lng\naddress SQLsum\n;\n\npattern batsql.sum(b:bat[:sht], s:bat[:lng], e:bat[:lng]) :bat[:lng]\naddress SQLsum\n;\n\npattern sql.prod(b:sht, s:lng, e:lng) :lng\naddress SQLprod\n;\n\npattern batsql.prod(b:bat[:sht], s:bat[:lng], e:bat[:lng]) :bat[:lng]\naddress SQLprod\n;\n\npattern sql.sum(b:int, s:lng, e:lng) :lng\naddress SQLsum\n;\n\npattern batsql.sum(b:bat[:int], s:bat[:lng], e:bat[:lng]) :bat[:lng]\naddress SQLsum\n;\n\npattern sql.prod(b:int, s:lng, e:lng) :lng\naddress SQLprod\n;\n\npattern batsql.prod(b:bat[:int], s:bat[:lng], e:bat[:lng]) :bat[:lng]\naddress SQLprod\n;\n\npattern sql.sum(b:lng, s:lng, e:lng) :lng\naddress SQLsum\n;\n\npattern batsql.sum(b:bat[:lng], s:bat[:lng], e:bat[:lng]) :bat[:lng]\naddress SQLsum\n;\n\npattern sql.prod(b:lng, s:lng, e:lng) :lng\naddress SQLprod\n;\n\npattern batsql.prod(b:bat[:lng], s:bat[:lng], e:bat[:lng]) :bat[:lng]\naddress SQLprod\n;\n\npattern sql.sum(b:flt, s:lng, e:lng) :flt\naddress SQLsum\n;\n\npattern batsql.sum(b:bat[:flt], s:bat[:lng], e:bat[:lng]) :bat[:flt]\naddress SQLsum\n;\n\npattern sql.prod(b:flt, s:lng, e:lng) :flt\naddress SQLprod\n;\n\npattern batsql.prod(b:bat[:flt], s:bat[:lng], e:bat[:lng]) :bat[:flt]\naddress SQLprod\n;\n\npattern sql.sum(b:flt, s:lng, e:lng) :dbl\naddress SQLsum\n;\n\npattern batsql.sum(b:bat[:flt], s:bat[:lng], e:bat[:lng]) :bat[:dbl]\naddress SQLsum\n;\n\npattern sql.prod(b:flt, s:lng, e:lng) :dbl\naddress SQLprod\n;\n\npattern batsql.prod(b:bat[:flt], s:bat[:lng], e:bat[:lng]) :bat[:dbl]\naddress SQLprod\n;\n\npattern sql.sum(b:dbl, s:lng, e:lng) :dbl\naddress SQLsum\n;\n\npattern batsql.sum(b:bat[:dbl], s:bat[:lng], e:bat[:lng]) :bat[:dbl]\naddress SQLsum\n;\n\npattern sql.prod(b:dbl, s:lng, e:lng) :dbl\naddress SQLprod\n;\n\npattern batsql.prod(b:bat[:dbl], s:bat[:lng], e:bat[:lng]) :bat[:dbl]\naddress SQLprod\n;\n\npattern sql.avg(b:bte, s:lng, e:lng) :dbl\naddress SQLavg\n;\n\npattern batsql.avg(b:bat[:bte], s:bat[:lng], e:bat[:lng]) :bat[:dbl]\naddress SQLavg\n;\n\npattern sql.avg(b:sht, s:lng, e:lng) :dbl\naddress SQLavg\n;\n\npattern batsql.avg(b:bat[:sht], s:bat[:lng], e:bat[:lng]) :bat[:dbl]\naddress SQLavg\n;\n\npattern sql.avg(b:int, s:lng, e:lng) :dbl\naddress SQLavg\n;\n\npattern batsql.avg(b:bat[:int], s:bat[:lng], e:bat[:lng]) :bat[:dbl]\naddress SQLavg\n;\n\npattern sql.avg(b:lng, s:lng, e:lng) :dbl\naddress SQLavg\n;\n\npattern batsql.avg(b:bat[:lng], s:bat[:lng], e:bat[:lng]) :bat[:dbl]\naddress SQLavg\n;\n\npattern sql.avg(b:flt, s:lng, e:lng) :dbl\naddress SQLavg\n;\n\npattern batsql.avg(b:bat[:flt], s:bat[:lng], e:bat[:lng]) :bat[:dbl]\naddress SQLavg\n;\n\npattern sql.avg(b:dbl, s:lng, e:lng) :dbl\naddress SQLavg\n;\n\npattern batsql.avg(b:bat[:dbl], s:bat[:lng], e:bat[:lng]) :bat[:dbl]\naddress SQLavg\n;\n\ncommand aggr.exist(b:bat[:any_2], h:any_1):bit\naddress ALGexist;\n\ncommand aggr.exist(b:bat[:any_2]):bit\naddress SQLexist;\n\npattern aggr.exist(v:any_2):bit\naddress SQLexist_val;\n" }, 
