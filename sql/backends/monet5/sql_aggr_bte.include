{ "sql_aggr_bte",
"# This Source Code Form is subject to the terms of the Mozilla Public \n"
"# License, v. 2.0.  If a copy of the MPL was not distributed with this \n"
"# file, You can obtain one at http://mozilla.org/MPL/2.0/. \n"
"# \n"
"# Copyright 1997 - July 2008 CWI, August 2008 - 2019 MonetDB B.V. \n"
"function aggr.covar(e1:bat[:bte], e2:bat[:bte]):dbl; \n"
"	e0:bat[:sht] := batcalc.*(e1,e2); \n"
"	s0:dbl := aggr.avg(e0); \n"
"	# ignore \"mutual\" NILs: \n"
"	e1n  := algebra.select(e1,    nil:bte,nil:bte,false,false,false); \n"
"	e12n := algebra.select(e1,e1n,nil:bte,nil:bte,false,false,false); \n"
"	s1:dbl := batcalc.avg(e1,e12n); \n"
"	s2:dbl := batcalc.avg(e2,e12n); \n"
"	s3:dbl := calc.*(s1,s2); \n"
"	v:dbl := calc.-(s0,s3); \n"
"	return v; \n"
"end aggr.covar; \n"
"function aggr.corr(e1:bat[:bte], e2:bat[:bte]):dbl; \n"
"	cv := aggr.covar(e1,e2); \n"
"	sd1 := aggr.stdev(e1); \n"
"	sd2 := aggr.stdev(e2); \n"
"	sd := calc.*(sd1,sd2); \n"
"	sdn := calc.==(sd,0:dbl); \n"
"	sds := calc.ifthenelse(sdn,nil:dbl,sd); \n"
"	res := calc./(cv,sds); \n"
"	return res; \n"
"end aggr.corr; \n"
"function aggr.subcovar(e1:bat[:bte], e2:bat[:bte], g:bat[:oid], e:bat[:any_2], f:bit):bat[:dbl]; \n"
"	e0:bat[:sht] := batcalc.*(e1,e2); \n"
"	s0:bat[:dbl] := aggr.subavg(e0,g,e,f,true); \n"
"	# ignore \"mutual\" NILs: \n"
"	t := calc.not(f); \n"
"	e1n  := algebra.select(e1,    nil:bte,nil:bte,t,t,false); \n"
"	e12n := algebra.select(e1,e1n,nil:bte,nil:bte,t,t,false); \n"
"	s1:bat[:dbl] := aggr.subavg(e1,g,e,e12n,f,true); \n"
"	s2:bat[:dbl] := aggr.subavg(e2,g,e,e12n,f,true); \n"
"	s3:bat[:dbl] := batcalc.*(s1,s2); \n"
"	v:bat[:dbl] := batcalc.-(s0,s3); \n"
"	return v; \n"
"end aggr.subcovar; \n"
"function aggr.subcorr(e1:bat[:bte], e2:bat[:bte], g:bat[:oid],e:bat[:any_2], f:bit):bat[:dbl]; \n"
"	cv := aggr.subcovar(e1,e2,g,e,f); \n"
"	sd1 := aggr.substdevp(e1,g,e,f,true); \n"
"	sd2 := aggr.substdevp(e2,g,e,f,true); \n"
"	sd := batcalc.*(sd1,sd2); \n"
"	sdn := batcalc.==(sd,0:dbl); \n"
"	sds := batcalc.ifthenelse(sdn,nil:dbl,sd); \n"
"	res := batcalc./(cv,sds); \n"
"	return res; \n"
"end aggr.subcorr; \n"
},
