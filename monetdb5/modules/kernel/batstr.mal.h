/*
* This Source Code Form is subject to the terms of the Mozilla Public
* License, v. 2.0.  If a copy of the MPL was not distributed with this
* file, You can obtain one at http://mozilla.org/MPL/2.0/.
*
* Copyright 1997 - July 2008 CWI, August 2008 - 2019 MonetDB B.V.
*/

// This file was generated automatically with mal2h.py. Do not edit this file directly.
{ "batstr", "\nmodule batstr;\n\ncommand batstr.length( s:bat[:str] ) :bat[:int]\naddress STRbatLength\ncomment \"Return the length of a string.\";\n\ncommand batstr.nbytes( s:bat[:str] ) :bat[:int]\naddress STRbatBytes\ncomment \"Return the string length in bytes.\";\n\ncommand batstr.toLower( s:bat[:str] ) :bat[:str]\naddress STRbatLower\ncomment \"Convert a string to lower case.\";\ncommand batstr.toUpper( s:bat[:str] ) :bat[:str]\naddress STRbatUpper\ncomment \"Convert a string to upper case.\";\n\ncommand batstr.trim( s:bat[:str] ) :bat[:str]\naddress STRbatStrip\ncomment \"Strip whitespaces around a string.\";\ncommand batstr.ltrim( s:bat[:str] ) :bat[:str]\naddress STRbatLtrim\ncomment \"Strip whitespaces from start of a string.\";\ncommand batstr.rtrim( s:bat[:str] ) :bat[:str]\naddress STRbatRtrim\ncomment \"Strip whitespaces from end of a string.\";\n\ncommand batstr.trim( s:bat[:str], s2:str ) :bat[:str]\naddress STRbatStrip2_const\ncomment \"Strip characters in the second string around the first strings.\";\ncommand batstr.ltrim( s:bat[:str], s2:str ) :bat[:str]\naddress STRbatLtrim2_const\ncomment \"Strip characters in the second string from start of the first strings.\";\ncommand batstr.rtrim( s:bat[:str], s2:str ) :bat[:str]\naddress STRbatRtrim2_const\ncomment \"Strip characters in the second string from end of the first strings.\";\n\ncommand batstr.trim( s:bat[:str], s2:bat[:str] ) :bat[:str]\naddress STRbatStrip2_bat\ncomment \"Strip characters in the second strings around the first strings.\";\ncommand batstr.ltrim( s:bat[:str], s2:bat[:str] ) :bat[:str]\naddress STRbatLtrim2_bat\ncomment \"Strip characters in the second strings from start of the first strings.\";\ncommand batstr.rtrim( s:bat[:str], s2:bat[:str] ) :bat[:str]\naddress STRbatRtrim2_bat\ncomment \"Strip characters in the second strings from end of the first strings.\";\n\ncommand batstr.lpad( s:bat[:str], n:int ) :bat[:str]\naddress STRbatLpad_const\ncomment \"Prepend whitespaces to the strings to reach the given length. Truncate the strings on the right if their lengths is larger than the given length.\";\ncommand batstr.rpad( s:bat[:str], n:int ) :bat[:str]\naddress STRbatRpad_const\ncomment \"Append whitespaces to the strings to reach the given length. Truncate the strings on the right if their lengths is larger than the given length.\";\n\ncommand batstr.lpad( s:bat[:str], n:bat[:int] ) :bat[:str]\naddress STRbatLpad_bat\ncomment \"Prepend whitespaces to the strings to reach the given lengths. Truncate the strings on the right if their lengths is larger than the given lengths.\";\ncommand batstr.rpad( s:bat[:str], n:bat[:int] ) :bat[:str]\naddress STRbatRpad_bat\ncomment \"Append whitespaces to the strings to reach the given lengths. Truncate the strings on the right if their lengths is larger than the given lengths.\";\n\ncommand batstr.lpad( s:bat[:str], n:int, s2:str ) :bat[:str]\naddress STRbatLpad2_const_const\ncomment \"Prepend the second string to the first strings to reach the given length. Truncate the first strings on the right if their lengths is larger than the given length.\";\ncommand batstr.rpad( s:bat[:str], n:int, s2:str ) :bat[:str]\naddress STRbatRpad2_const_const\ncomment \"Append the second string to the first strings to reach the given length. Truncate the first strings on the right if their lengths is larger than the given length.\";\n\ncommand batstr.lpad( s:bat[:str], n:bat[:int], s2:str ) :bat[:str]\naddress STRbatLpad2_bat_const\ncomment \"Prepend the second string to the first strings to reach the given lengths. Truncate the first strings on the right if their lengths is larger than the given lengths.\";\ncommand batstr.rpad( s:bat[:str], n:bat[:int], s2:str ) :bat[:str]\naddress STRbatRpad2_bat_const\ncomment \"Append the second string to the first strings to reach the given lengths. Truncate the first strings on the right if their lengths is larger than the given lengths.\";\n\ncommand batstr.lpad( s:bat[:str], n:int, s2:bat[:str] ) :bat[:str]\naddress STRbatLpad2_const_bat\ncomment \"Prepend the second strings to the first strings to reach the given length. Truncate the first strings on the right if their lengths is larger than the given length.\";\ncommand batstr.rpad( s:bat[:str], n:int, s2:bat[:str] ) :bat[:str]\naddress STRbatRpad2_const_bat\ncomment \"Append the second strings to the first strings to reach the given length. Truncate the first strings on the right if their lengths is larger than the given length.\";\n\ncommand batstr.lpad( s:bat[:str], n:bat[:int], s2:bat[:str] ) :bat[:str]\naddress STRbatLpad2_bat_bat\ncomment \"Prepend the second strings to the first strings to reach the given lengths. Truncate the first strings on the right if their lengths is larger than the given lengths.\";\ncommand batstr.rpad( s:bat[:str], n:bat[:int], s2:bat[:str] ) :bat[:str]\naddress STRbatRpad2_bat_bat\ncomment \"Append the second strings to the first strings to reach the given lengths. Truncate the first strings on the right if their lengths is larger than the given lengths.\";\n\ncommand batstr.startsWith(s:bat[:str],prefix:bat[:str]):bat[:bit]\naddress STRbatPrefix\ncomment \"Prefix check.\";\ncommand batstr.startsWith(s:bat[:str],prefix:str):bat[:bit]\naddress STRbatPrefixcst\ncomment \"Prefix check.\";\n\ncommand batstr.endsWith( s:bat[:str], suffix:bat[:str] ) :bat[:bit]\naddress STRbatSuffix\ncomment \"Suffix check.\";\ncommand batstr.endsWith( s:bat[:str], suffix:str ) :bat[:bit]\naddress STRbatSuffixcst\ncomment \"Suffix check.\";\n\ncommand batstr.search( s:bat[:str], c:bat[:str] ) :bat[:int]\naddress STRbatstrSearch\ncomment \"Search for a substring. Returns position, -1 if not found.\";\ncommand batstr.search( s:bat[:str], c:str ) :bat[:int]\naddress STRbatstrSearchcst\ncomment \"Search for a substring. Returns position, -1 if not found.\";\n\ncommand batstr.r_search( s:bat[:str], c:bat[:str] ) :bat[:int]\naddress STRbatRstrSearch\ncomment \"Reverse search for a substring. Returns position, -1 if not found.\";\ncommand batstr.r_search( s:bat[:str], c:str ) :bat[:int]\naddress STRbatRstrSearchcst\ncomment \"Reverse search for a substring. Returns position, -1 if not found.\";\n\ncommand batstr.string(b:bat[:str],offset:bat[:int]) :bat[:str]\naddress STRbatTail\ncomment \"Return the tail s[offset..n] of a string s[0..n].\";\ncommand batstr.string(b:bat[:str],offset:int) :bat[:str]\naddress STRbatTailcst\ncomment \"Return the tail s[offset..n] of a string s[0..n].\";\n\ncommand batstr.substring( s:bat[:str], start:bat[:int], \n\tindex:bat[:int]) :bat[:str]\naddress STRbatsubstring\ncomment \"Substring extraction using [start,start+length]\";\n\ncommand batstr.substring( s:bat[:str], start:int, index:int)\n\t:bat[:str]\naddress STRbatsubstringcst\ncomment \"Substring extraction using [start,start+length]\";\n\ncommand batstr.unicodeAt(s:bat[:str], index:bat[:int]) :bat[:int]\naddress STRbatWChrAt\ncomment \"get a unicode character (as an int) from a string position.\";\ncommand batstr.unicodeAt(s:bat[:str], index:int) :bat[:int]\naddress STRbatWChrAtcst\ncomment \"get a unicode character (as an int) from a string position.\";\n\ncommand batstr.substitute(s:bat[:str],src:str,dst:str,rep:bit):bat[:str]\naddress STRbatSubstitutecst\ncomment \"Substitute first occurrence of 'src' by\n\t'dst'.  Iff repeated = true this is\n\trepeated while 'src' can be found in the\n\tresult string. In order to prevent\n\trecursion and result strings of unlimited\n\tsize, repeating is only done iff src is\n\tnot a substring of dst.\";" }, 
