{ "mmath",
"# This Source Code Form is subject to the terms of the Mozilla Public \n"
"# License, v. 2.0.  If a copy of the MPL was not distributed with this \n"
"# file, You can obtain one at http://mozilla.org/MPL/2.0/. \n"
"# \n"
"# Copyright 1997 - July 2008 CWI, August 2008 - 2019 MonetDB B.V. \n"
"module mmath; \n"
"command acos(x:flt):flt  \n"
"address MATHunary_ACOSflt; \n"
"command acos(x:dbl):dbl  \n"
"address MATHunary_ACOSdbl \n"
"comment \"The acos(x) function calculates the arc cosine of x, that is the  \n"
"	value whose cosine is x. The value is returned in radians and is  \n"
"	mathematically defined to be between 0 and PI (inclusive).\"; \n"
"command asin(x:flt)  :flt  \n"
"address MATHunary_ASINflt; \n"
"command asin(x:dbl)  :dbl  \n"
"address MATHunary_ASINdbl \n"
"comment \"The asin(x) function calculates the arc sine of x, that is the value  \n"
"	whose sine is x. The value is returned in radians and is mathematically  \n"
"	defined to be between -PI/20 and -PI/2 (inclusive).\"; \n"
"command atan(x:flt)     :flt  \n"
"address MATHunary_ATANflt; \n"
"command atan(x:dbl)     :dbl  \n"
"address MATHunary_ATANdbl \n"
"comment \"The atan(x) function calculates the arc tangent of x, that is the value  \n"
"	whose tangent is x. The value is returned in radians and is mathematically  \n"
"	defined to be between -PI/2 and PI/2 (inclusive).\"; \n"
"command atan2(x:flt,y:flt):flt  \n"
"address MATHbinary_ATAN2flt; \n"
"command atan2(x:dbl,y:dbl):dbl  \n"
"address MATHbinary_ATAN2dbl \n"
"comment \"The atan2(x,y) function calculates the arc tangent of the two  \n"
"        variables x and y.  It is similar to calculating the arc \n"
"	tangent of y / x, except that the signs of both arguments are  \n"
"        used to determine the quadrant of the result.  The value is  \n"
"	returned in radians and is mathematically defined to be between  \n"
"        -PI/2 and PI/2 (inclusive).\"; \n"
"command cos(x:flt)   	  :flt  \n"
"address MATHunary_COSflt; \n"
"command cos(x:dbl)   	  :dbl  \n"
"address MATHunary_COSdbl \n"
"comment \"The cos(x) function returns the cosine of x, where x is given in  \n"
"        radians. The return value is between -1 and 1.\"; \n"
"command sin(x:flt)   	  :flt  \n"
"address MATHunary_SINflt; \n"
"command sin(x:dbl)   	  :dbl  \n"
"address MATHunary_SINdbl \n"
"comment \"The sin(x) function returns the cosine of x, where x is given in  \n"
"        radians. The return value is between -1 and 1.\"; \n"
"command tan(x:flt)   	  :flt  \n"
"address MATHunary_TANflt; \n"
"command tan(x:dbl)   	  :dbl  \n"
"address MATHunary_TANdbl \n"
"comment \"The tan(x) function returns the tangent of x, \n"
"        where x is given in radians\"; \n"
"command cot(x:flt)   	  :flt  \n"
"address MATHunary_COTflt; \n"
"command cot(x:dbl)   	  :dbl  \n"
"address MATHunary_COTdbl \n"
"comment \"The cot(x) function returns the Cotangent of x, \n"
"        where x is given in radians\"; \n"
"command cosh(x:flt)     :flt  \n"
"address MATHunary_COSHflt; \n"
"command cosh(x:dbl)     :dbl  \n"
"address MATHunary_COSHdbl \n"
"comment \"The cosh() function  returns the hyperbolic cosine of x, which is  \n"
"	defined mathematically as (exp(x) + exp(-x)) / 2.\"; \n"
"command sinh(x:flt)     :flt  \n"
"address MATHunary_SINHflt; \n"
"command sinh(x:dbl)     :dbl  \n"
"address MATHunary_SINHdbl \n"
"comment \"The sinh() function  returns  the  hyperbolic sine of x, which  \n"
"        is defined mathematically as (exp(x) - exp(-x)) / 2.\"; \n"
"command tanh(x:flt)     :flt  \n"
"address MATHunary_TANHflt; \n"
"command tanh(x:dbl)     :dbl  \n"
"address MATHunary_TANHdbl \n"
"comment \"The tanh() function returns the hyperbolic tangent of x, which is  \n"
"	defined mathematically as sinh(x) / cosh(x).\"; \n"
"command radians(x:flt)     :flt  \n"
"address MATHunary_RADIANSflt; \n"
"command radians(x:dbl)     :dbl  \n"
"address MATHunary_RADIANSdbl \n"
"comment \"The radians() function converts degrees into radians\";  \n"
"command degrees(x:flt)     :flt  \n"
"address MATHunary_DEGREESflt; \n"
"command degrees(x:dbl)     :dbl  \n"
"address MATHunary_DEGREESdbl \n"
"comment \"The degrees() function converts radians into degrees\";  \n"
"command exp(x:flt)   	  :flt  \n"
"address MATHunary_EXPflt; \n"
"command exp(x:dbl)   	  :dbl  \n"
"address MATHunary_EXPdbl \n"
"comment \"The exp(x) function returns the value of e (the base of  \n"
"        natural logarithms) raised to the power of x.\"; \n"
"command log(x:flt)   	  :flt  \n"
"address MATHunary_LOGflt; \n"
"command log(x:dbl)   	  :dbl  \n"
"address MATHunary_LOGdbl \n"
"comment \"The log(x) function returns the natural logarithm of x.\"; \n"
"command log(x:flt,base:flt)   	  :flt \n"
"address MATHbinary_LOGflt \n"
"comment \"The log(x) function returns the logarithm of x in the given base.\"; \n"
"command log(x:dbl,base:dbl)   	  :dbl \n"
"address MATHbinary_LOGdbl \n"
"comment \"The log(x) function returns the logarithm of x in the given base.\"; \n"
"command log10(x:flt)    :flt  \n"
"address MATHunary_LOG10flt; \n"
"command log10(x:dbl)    :dbl  \n"
"address MATHunary_LOG10dbl \n"
"comment \"The log10(x) function returns the base-10 logarithm of x.\"; \n"
"command log2(x:flt)    :flt  \n"
"address MATHunary_LOG2flt; \n"
"command log2(x:dbl)    :dbl  \n"
"address MATHunary_LOG2dbl \n"
"comment \"The log2(x) function returns the base-2 logarithm of x.\"; \n"
"command pow(x:flt,y:flt)  :flt  \n"
"address MATHbinary_POWflt; \n"
"command pow(x:dbl,y:dbl)  :dbl  \n"
"address MATHbinary_POWdbl \n"
"comment \"The pow(x,y) function  returns the value of x raised to the power of y.\"; \n"
"command sqrt(y:flt)  	  :flt  \n"
"address MATHunary_SQRTflt; \n"
"command sqrt(y:dbl)  	  :dbl  \n"
"address MATHunary_SQRTdbl \n"
"comment \"The sqrt(x) function returns the non-negative root of x.\"; \n"
"command cbrt(y:flt)  	  :flt  \n"
"address MATHunary_CBRTflt; \n"
"command cbrt(y:dbl)  	  :dbl  \n"
"address MATHunary_CBRTdbl \n"
"comment \"The cbrt(x) function returns the cube root of x.\"; \n"
"command ceil(y:flt)     :flt  \n"
"address MATHunary_CEILflt; \n"
"command ceil(y:dbl)     :dbl  \n"
"address MATHunary_CEILdbl \n"
"comment \"The ceil(x) function rounds x upwards to the nearest integer.\"; \n"
"command fabs(y:dbl)     :dbl  \n"
"address MATHunary_FABSdbl \n"
"comment \"The fabs(x) function  returns  the  absolute value of the  \n"
"        floating-point number x.\"; \n"
"command floor(y:flt)    :flt  \n"
"address MATHunary_FLOORflt; \n"
"command floor(y:dbl)    :dbl  \n"
"address MATHunary_FLOORdbl \n"
"comment \"The floor(x) function rounds x downwards to the nearest integer.\"; \n"
"pattern fmod(y:flt,x:flt) :flt  \n"
"address CMDvarMODsignal; \n"
"pattern fmod(y:dbl,x:dbl) :dbl  \n"
"address CMDvarMODsignal \n"
"comment \"The fmod(x,y) function computes the remainder of dividing x by y. \n"
"	The return value is x - n * y, where n is the quotient of x / y, \n"
"	rounded towards zero to an integer.\"; \n"
"command round(x:flt,y:int)     :flt  \n"
"address MATHbinary_ROUNDflt; \n"
"command round(x:dbl,y:int)     :dbl  \n"
"address MATHbinary_ROUNDdbl \n"
"comment \"The round(n, m) returns n rounded to m places to the right  \n"
"        of the decimal point; if m is omitted, to 0 places. m can be  \n"
"	negative to round off digits left of the decimal point.  \n"
"        m must be an integer.\"; \n"
"command isnan(d:dbl) :bit  \n"
"address MATHunary_ISNAN \n"
"comment \"The isnan(x) function returns true if x is 'not-a-number'  \n"
"        (NaN), and false otherwise.\"; \n"
"command isinf(d:dbl) :int  \n"
"address MATHunary_ISINF \n"
"comment \"The isinf(x) function returns -1 if x represents negative  \n"
"        infinity, 1 if x represents positive infinity, and 0 otherwise.\"; \n"
"command finite(d:dbl) :bit  \n"
"address MATHunary_FINITE \n"
"comment \"The finite(x) function returns true if x is neither infinite  \n"
"        nor a 'not-a-number' (NaN) value, and false otherwise.\"; \n"
"# @+ Random numbers \n"
"unsafe command rand () :int  \n"
"address MATHrandint \n"
"comment \"return a random number\"; \n"
"unsafe command rand (v:int) :int  \n"
"address MATHrandintarg \n"
"comment \"return a random number\"; \n"
"command srand(seed:int) :void  \n"
"address MATHsrandint \n"
"comment \"initialize the rand() function with a seed\"; \n"
"command sqlrand(seed:int) :int  \n"
"address MATHsqlrandint \n"
"comment \"initialize the rand() function with a seed and call rand()\"; \n"
"command pi():dbl \n"
"address MATHpi \n"
"comment \"return an important mathematical value\"; \n"
"command prelude() :void \n"
"address MATHprelude \n"
"comment \"initilize mmath module\"; \n"
"mmath.prelude(); \n"
},
