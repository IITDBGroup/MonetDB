/*
* This Source Code Form is subject to the terms of the Mozilla Public
* License, v. 2.0.  If a copy of the MPL was not distributed with this
* file, You can obtain one at http://mozilla.org/MPL/2.0/.
*
* Copyright 1997 - July 2008 CWI, August 2008 - 2019 MonetDB B.V.
*/

// This file was generated automatically with mal2h.py. Do not edit this file directly.
{ "mmath", "\nmodule mmath;\n\ncommand acos(x:flt):flt \naddress MATHunary_ACOSflt;\ncommand acos(x:dbl):dbl \naddress MATHunary_ACOSdbl\ncomment \"The acos(x) function calculates the arc cosine of x, that is the \n\tvalue whose cosine is x. The value is returned in radians and is \n\tmathematically defined to be between 0 and PI (inclusive).\";\n\ncommand asin(x:flt)  :flt \naddress MATHunary_ASINflt;\ncommand asin(x:dbl)  :dbl \naddress MATHunary_ASINdbl\ncomment \"The asin(x) function calculates the arc sine of x, that is the value \n\twhose sine is x. The value is returned in radians and is mathematically \n\tdefined to be between -PI/20 and -PI/2 (inclusive).\";\n\ncommand atan(x:flt)     :flt \naddress MATHunary_ATANflt;\ncommand atan(x:dbl)     :dbl \naddress MATHunary_ATANdbl\ncomment \"The atan(x) function calculates the arc tangent of x, that is the value \n\twhose tangent is x. The value is returned in radians and is mathematically \n\tdefined to be between -PI/2 and PI/2 (inclusive).\";\n\ncommand atan2(x:flt,y:flt):flt \naddress MATHbinary_ATAN2flt;\ncommand atan2(x:dbl,y:dbl):dbl \naddress MATHbinary_ATAN2dbl\ncomment \"The atan2(x,y) function calculates the arc tangent of the two \n        variables x and y.  It is similar to calculating the arc\n\ttangent of y / x, except that the signs of both arguments are \n        used to determine the quadrant of the result.  The value is \n\treturned in radians and is mathematically defined to be between \n        -PI/2 and PI/2 (inclusive).\";\n\n\ncommand cos(x:flt)   \t  :flt \naddress MATHunary_COSflt;\ncommand cos(x:dbl)   \t  :dbl \naddress MATHunary_COSdbl\ncomment \"The cos(x) function returns the cosine of x, where x is given in \n        radians. The return value is between -1 and 1.\";\n\ncommand sin(x:flt)   \t  :flt \naddress MATHunary_SINflt;\ncommand sin(x:dbl)   \t  :dbl \naddress MATHunary_SINdbl\ncomment \"The sin(x) function returns the cosine of x, where x is given in \n        radians. The return value is between -1 and 1.\";\n\ncommand tan(x:flt)   \t  :flt \naddress MATHunary_TANflt;\ncommand tan(x:dbl)   \t  :dbl \naddress MATHunary_TANdbl\ncomment \"The tan(x) function returns the tangent of x,\n        where x is given in radians\";\n\ncommand cot(x:flt)   \t  :flt \naddress MATHunary_COTflt;\ncommand cot(x:dbl)   \t  :dbl \naddress MATHunary_COTdbl\ncomment \"The cot(x) function returns the Cotangent of x,\n        where x is given in radians\";\n\ncommand cosh(x:flt)     :flt \naddress MATHunary_COSHflt;\ncommand cosh(x:dbl)     :dbl \naddress MATHunary_COSHdbl\ncomment \"The cosh() function  returns the hyperbolic cosine of x, which is \n\tdefined mathematically as (exp(x) + exp(-x)) / 2.\";\n\ncommand sinh(x:flt)     :flt \naddress MATHunary_SINHflt;\ncommand sinh(x:dbl)     :dbl \naddress MATHunary_SINHdbl\ncomment \"The sinh() function  returns  the  hyperbolic sine of x, which \n        is defined mathematically as (exp(x) - exp(-x)) / 2.\";\n\ncommand tanh(x:flt)     :flt \naddress MATHunary_TANHflt;\ncommand tanh(x:dbl)     :dbl \naddress MATHunary_TANHdbl\ncomment \"The tanh() function returns the hyperbolic tangent of x, which is \n\tdefined mathematically as sinh(x) / cosh(x).\";\n\ncommand radians(x:flt)     :flt \naddress MATHunary_RADIANSflt;\ncommand radians(x:dbl)     :dbl \naddress MATHunary_RADIANSdbl\ncomment \"The radians() function converts degrees into radians\"; \n\ncommand degrees(x:flt)     :flt \naddress MATHunary_DEGREESflt;\ncommand degrees(x:dbl)     :dbl \naddress MATHunary_DEGREESdbl\ncomment \"The degrees() function converts radians into degrees\"; \n\ncommand exp(x:flt)   \t  :flt \naddress MATHunary_EXPflt;\ncommand exp(x:dbl)   \t  :dbl \naddress MATHunary_EXPdbl\ncomment \"The exp(x) function returns the value of e (the base of \n        natural logarithms) raised to the power of x.\";\n\ncommand log(x:flt)   \t  :flt \naddress MATHunary_LOGflt;\ncommand log(x:dbl)   \t  :dbl \naddress MATHunary_LOGdbl\ncomment \"The log(x) function returns the natural logarithm of x.\";\n\ncommand log(x:flt,base:flt)   \t  :flt\naddress MATHbinary_LOGflt\ncomment \"The log(x) function returns the logarithm of x in the given base.\";\ncommand log(x:dbl,base:dbl)   \t  :dbl\naddress MATHbinary_LOGdbl\ncomment \"The log(x) function returns the logarithm of x in the given base.\";\n\ncommand log10(x:flt)    :flt \naddress MATHunary_LOG10flt;\ncommand log10(x:dbl)    :dbl \naddress MATHunary_LOG10dbl\ncomment \"The log10(x) function returns the base-10 logarithm of x.\";\n\ncommand log2(x:flt)    :flt \naddress MATHunary_LOG2flt;\ncommand log2(x:dbl)    :dbl \naddress MATHunary_LOG2dbl\ncomment \"The log2(x) function returns the base-2 logarithm of x.\";\n\n\ncommand pow(x:flt,y:flt)  :flt \naddress MATHbinary_POWflt;\ncommand pow(x:dbl,y:dbl)  :dbl \naddress MATHbinary_POWdbl\ncomment \"The pow(x,y) function  returns the value of x raised to the power of y.\";\n\ncommand sqrt(y:flt)  \t  :flt \naddress MATHunary_SQRTflt;\ncommand sqrt(y:dbl)  \t  :dbl \naddress MATHunary_SQRTdbl\ncomment \"The sqrt(x) function returns the non-negative root of x.\";\n\ncommand cbrt(y:flt)  \t  :flt \naddress MATHunary_CBRTflt;\ncommand cbrt(y:dbl)  \t  :dbl \naddress MATHunary_CBRTdbl\ncomment \"The cbrt(x) function returns the cube root of x.\";\n\n\ncommand ceil(y:flt)     :flt \naddress MATHunary_CEILflt;\ncommand ceil(y:dbl)     :dbl \naddress MATHunary_CEILdbl\ncomment \"The ceil(x) function rounds x upwards to the nearest integer.\";\n\ncommand fabs(y:dbl)     :dbl \naddress MATHunary_FABSdbl\ncomment \"The fabs(x) function  returns  the  absolute value of the \n        floating-point number x.\";\n\ncommand floor(y:flt)    :flt \naddress MATHunary_FLOORflt;\ncommand floor(y:dbl)    :dbl \naddress MATHunary_FLOORdbl\ncomment \"The floor(x) function rounds x downwards to the nearest integer.\";\n\npattern fmod(y:flt,x:flt) :flt \naddress CMDvarMODsignal;\npattern fmod(y:dbl,x:dbl) :dbl \naddress CMDvarMODsignal\ncomment \"The fmod(x,y) function computes the remainder of dividing x by y.\n\tThe return value is x - n * y, where n is the quotient of x / y,\n\trounded towards zero to an integer.\";\n\ncommand round(x:flt,y:int)     :flt \naddress MATHbinary_ROUNDflt;\ncommand round(x:dbl,y:int)     :dbl \naddress MATHbinary_ROUNDdbl\ncomment \"The round(n, m) returns n rounded to m places to the right \n        of the decimal point; if m is omitted, to 0 places. m can be \n\tnegative to round off digits left of the decimal point. \n        m must be an integer.\";\n\ncommand isnan(d:dbl) :bit \naddress MATHunary_ISNAN\ncomment \"The isnan(x) function returns true if x is 'not-a-number' \n        (NaN), and false otherwise.\";\ncommand isinf(d:dbl) :int \naddress MATHunary_ISINF\ncomment \"The isinf(x) function returns -1 if x represents negative \n        infinity, 1 if x represents positive infinity, and 0 otherwise.\";\ncommand finite(d:dbl) :bit \naddress MATHunary_FINITE\ncomment \"The finite(x) function returns true if x is neither infinite \n        nor a 'not-a-number' (NaN) value, and false otherwise.\";\n\nunsafe command rand () :int \naddress MATHrandint\ncomment \"return a random number\";\n\nunsafe command rand (v:int) :int \naddress MATHrandintarg\ncomment \"return a random number\";\n\ncommand srand(seed:int) :void \naddress MATHsrandint\ncomment \"initialize the rand() function with a seed\";\n\ncommand sqlrand(seed:int) :int \naddress MATHsqlrandint\ncomment \"initialize the rand() function with a seed and call rand()\";\n\ncommand pi():dbl\naddress MATHpi\ncomment \"return an important mathematical value\";\n\ncommand prelude() :void\naddress MATHprelude\ncomment \"initilize mmath module\";\n\nmmath.prelude();" }, 
