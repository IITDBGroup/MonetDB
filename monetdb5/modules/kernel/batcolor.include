{ "batcolor",
"# This Source Code Form is subject to the terms of the Mozilla Public \n"
"# License, v. 2.0.  If a copy of the MPL was not distributed with this \n"
"# file, You can obtain one at http://mozilla.org/MPL/2.0/. \n"
"# \n"
"# Copyright 1997 - July 2008 CWI, August 2008 - 2019 MonetDB B.V. \n"
"module batcolor; \n"
"command str(b:bat[:color]):bat[:str] \n"
"address CLRbatStr \n"
"comment \"Identity mapping for string bats\"; \n"
"command color(s:bat[:str]):bat[:color] \n"
"address CLRbatColor \n"
"comment \"Converts string to color\"; \n"
"command rgb(r:bat[:int], g:bat[:int], b:bat[:int]):bat[:color]  \n"
"address CLRbatRgb \n"
"comment	\"Converts an RGB triplets to a color atom\"; \n"
"command red(c:bat[:color]) :bat[:int]  \n"
"address CLRbatRed \n"
"comment	\"Extracts red component from a color atom\"; \n"
"command green(c:bat[:color]) :bat[:int]  \n"
"address CLRbatGreen \n"
"comment	\"Extracts green component from a color atom\"; \n"
"command blue (c:bat[:color]) :bat[:int]  \n"
"address CLRbatBlue \n"
"comment	\"Extracts blue component from a color atom\"; \n"
"command hue(c:bat[:color]) :bat[:int]  \n"
"address CLRbatHueInt \n"
"comment	\"Extracts hue component from a color atom\"; \n"
"command saturation(c:bat[:color]) :bat[:int] \n"
"address CLRbatSaturationInt \n"
"comment	\"Extracts saturation component from a color atom\"; \n"
"command value(c:bat[:color]) :bat[:int]  \n"
"address CLRbatValueInt \n"
"comment	\"Extracts value component from a color atom\"; \n"
"command hsv(h:bat[:flt],s:bat[:flt], v:bat[:flt]) :bat[:color]  \n"
"address CLRbatHsv \n"
"comment	\"Converts an HSV triplets to a color atom\"; \n"
"command hue(c:bat[:color]) :bat[:flt]  \n"
"address CLRbatHue \n"
"comment	\"Extracts hue component from a color atom\"; \n"
"command saturation(c:bat[:color]) :bat[:flt]  \n"
"address CLRbatSaturation \n"
"comment	\"Extracts saturation component from a color atom\"; \n"
"command value(c:bat[:color]) :bat[:flt]  \n"
"address CLRbatValue \n"
"comment	\"Extracts value component from a color atom\"; \n"
"command ycc(y:bat[:flt],cr:bat[:flt],cb:bat[:flt]) :bat[:color]  \n"
"address CLRbatycc \n"
"comment	\"Converts an YCC triplets to a color atom\"; \n"
"command luminance (c:bat[:color]) :bat[:int]  \n"
"address CLRbatLuminance \n"
"comment	\"Extracts Y(luminance) component from a color atom\"; \n"
"command cr(c:bat[:color]) :bat[:int]  \n"
"address CLRbatCr \n"
"comment	\"Extracts Cr(red color) component from a color atom\"; \n"
"command cb(c:bat[:color]) :bat[:int]  \n"
"address CLRbatCb \n"
"comment	\"Extracts Cb(blue color) component from a color atom\"; \n"
},
