{ "00_aggr_hge",
"# This Source Code Form is subject to the terms of the Mozilla Public \n"
"# License, v. 2.0.  If a copy of the MPL was not distributed with this \n"
"# file, You can obtain one at http://mozilla.org/MPL/2.0/. \n"
"# \n"
"# Copyright 1997 - July 2008 CWI, August 2008 - 2019 MonetDB B.V. \n"
"# This file was generated by using the script 00_aggr_hge.mal.sh. \n"
"module aggr; \n"
"command sum(b:bat[:bte],g:bat[:oid],e:bat[:any_1]) \n"
"		:bat[:hge] \n"
"address AGGRsum3_hge \n"
"comment \"Grouped tail sum on bte\"; \n"
"command subsum(b:bat[:bte],g:bat[:oid],e:bat[:any_1],skip_nils:bit,abort_on_error:bit) :bat[:hge] \n"
"address AGGRsubsum_hge \n"
"comment \"Grouped sum aggregate\"; \n"
"command subsum(b:bat[:bte],g:bat[:oid],e:bat[:any_1],s:bat[:oid],skip_nils:bit,abort_on_error:bit) :bat[:hge] \n"
"address AGGRsubsumcand_hge \n"
"comment \"Grouped sum aggregate with candidates list\"; \n"
"command prod(b:bat[:bte],g:bat[:oid],e:bat[:any_1]) \n"
"		:bat[:hge] \n"
"address AGGRprod3_hge \n"
"comment \"Grouped tail product on bte\"; \n"
"command subprod(b:bat[:bte],g:bat[:oid],e:bat[:any_1],skip_nils:bit,abort_on_error:bit) :bat[:hge] \n"
"address AGGRsubprod_hge \n"
"comment \"Grouped product aggregate\"; \n"
"command subprod(b:bat[:bte],g:bat[:oid],e:bat[:any_1],s:bat[:oid],skip_nils:bit,abort_on_error:bit) :bat[:hge] \n"
"address AGGRsubprodcand_hge \n"
"comment \"Grouped product aggregate with candidates list\"; \n"
"command sum(b:bat[:sht],g:bat[:oid],e:bat[:any_1]) \n"
"		:bat[:hge] \n"
"address AGGRsum3_hge \n"
"comment \"Grouped tail sum on sht\"; \n"
"command subsum(b:bat[:sht],g:bat[:oid],e:bat[:any_1],skip_nils:bit,abort_on_error:bit) :bat[:hge] \n"
"address AGGRsubsum_hge \n"
"comment \"Grouped sum aggregate\"; \n"
"command subsum(b:bat[:sht],g:bat[:oid],e:bat[:any_1],s:bat[:oid],skip_nils:bit,abort_on_error:bit) :bat[:hge] \n"
"address AGGRsubsumcand_hge \n"
"comment \"Grouped sum aggregate with candidates list\"; \n"
"command prod(b:bat[:sht],g:bat[:oid],e:bat[:any_1]) \n"
"		:bat[:hge] \n"
"address AGGRprod3_hge \n"
"comment \"Grouped tail product on sht\"; \n"
"command subprod(b:bat[:sht],g:bat[:oid],e:bat[:any_1],skip_nils:bit,abort_on_error:bit) :bat[:hge] \n"
"address AGGRsubprod_hge \n"
"comment \"Grouped product aggregate\"; \n"
"command subprod(b:bat[:sht],g:bat[:oid],e:bat[:any_1],s:bat[:oid],skip_nils:bit,abort_on_error:bit) :bat[:hge] \n"
"address AGGRsubprodcand_hge \n"
"comment \"Grouped product aggregate with candidates list\"; \n"
"command sum(b:bat[:int],g:bat[:oid],e:bat[:any_1]) \n"
"		:bat[:hge] \n"
"address AGGRsum3_hge \n"
"comment \"Grouped tail sum on int\"; \n"
"command subsum(b:bat[:int],g:bat[:oid],e:bat[:any_1],skip_nils:bit,abort_on_error:bit) :bat[:hge] \n"
"address AGGRsubsum_hge \n"
"comment \"Grouped sum aggregate\"; \n"
"command subsum(b:bat[:int],g:bat[:oid],e:bat[:any_1],s:bat[:oid],skip_nils:bit,abort_on_error:bit) :bat[:hge] \n"
"address AGGRsubsumcand_hge \n"
"comment \"Grouped sum aggregate with candidates list\"; \n"
"command prod(b:bat[:int],g:bat[:oid],e:bat[:any_1]) \n"
"		:bat[:hge] \n"
"address AGGRprod3_hge \n"
"comment \"Grouped tail product on int\"; \n"
"command subprod(b:bat[:int],g:bat[:oid],e:bat[:any_1],skip_nils:bit,abort_on_error:bit) :bat[:hge] \n"
"address AGGRsubprod_hge \n"
"comment \"Grouped product aggregate\"; \n"
"command subprod(b:bat[:int],g:bat[:oid],e:bat[:any_1],s:bat[:oid],skip_nils:bit,abort_on_error:bit) :bat[:hge] \n"
"address AGGRsubprodcand_hge \n"
"comment \"Grouped product aggregate with candidates list\"; \n"
"command sum(b:bat[:lng],g:bat[:oid],e:bat[:any_1]) \n"
"		:bat[:hge] \n"
"address AGGRsum3_hge \n"
"comment \"Grouped tail sum on lng\"; \n"
"command subsum(b:bat[:lng],g:bat[:oid],e:bat[:any_1],skip_nils:bit,abort_on_error:bit) :bat[:hge] \n"
"address AGGRsubsum_hge \n"
"comment \"Grouped sum aggregate\"; \n"
"command subsum(b:bat[:lng],g:bat[:oid],e:bat[:any_1],s:bat[:oid],skip_nils:bit,abort_on_error:bit) :bat[:hge] \n"
"address AGGRsubsumcand_hge \n"
"comment \"Grouped sum aggregate with candidates list\"; \n"
"command prod(b:bat[:lng],g:bat[:oid],e:bat[:any_1]) \n"
"		:bat[:hge] \n"
"address AGGRprod3_hge \n"
"comment \"Grouped tail product on lng\"; \n"
"command subprod(b:bat[:lng],g:bat[:oid],e:bat[:any_1],skip_nils:bit,abort_on_error:bit) :bat[:hge] \n"
"address AGGRsubprod_hge \n"
"comment \"Grouped product aggregate\"; \n"
"command subprod(b:bat[:lng],g:bat[:oid],e:bat[:any_1],s:bat[:oid],skip_nils:bit,abort_on_error:bit) :bat[:hge] \n"
"address AGGRsubprodcand_hge \n"
"comment \"Grouped product aggregate with candidates list\"; \n"
"command sum(b:bat[:hge],g:bat[:oid],e:bat[:any_1]) \n"
"		:bat[:hge] \n"
"address AGGRsum3_hge \n"
"comment \"Grouped tail sum on hge\"; \n"
"command subsum(b:bat[:hge],g:bat[:oid],e:bat[:any_1],skip_nils:bit,abort_on_error:bit) :bat[:hge] \n"
"address AGGRsubsum_hge \n"
"comment \"Grouped sum aggregate\"; \n"
"command subsum(b:bat[:hge],g:bat[:oid],e:bat[:any_1],s:bat[:oid],skip_nils:bit,abort_on_error:bit) :bat[:hge] \n"
"address AGGRsubsumcand_hge \n"
"comment \"Grouped sum aggregate with candidates list\"; \n"
"command prod(b:bat[:hge],g:bat[:oid],e:bat[:any_1]) \n"
"		:bat[:hge] \n"
"address AGGRprod3_hge \n"
"comment \"Grouped tail product on hge\"; \n"
"command subprod(b:bat[:hge],g:bat[:oid],e:bat[:any_1],skip_nils:bit,abort_on_error:bit) :bat[:hge] \n"
"address AGGRsubprod_hge \n"
"comment \"Grouped product aggregate\"; \n"
"command subprod(b:bat[:hge],g:bat[:oid],e:bat[:any_1],s:bat[:oid],skip_nils:bit,abort_on_error:bit) :bat[:hge] \n"
"address AGGRsubprodcand_hge \n"
"comment \"Grouped product aggregate with candidates list\"; \n"
"command avg(b:bat[:hge], g:bat[:oid], e:bat[:any_1]):bat[:dbl] \n"
"address AGGRavg13_dbl \n"
"comment \"Grouped tail average on hge\"; \n"
"command avg(b:bat[:hge], g:bat[:oid], e:bat[:any_1]) (:bat[:dbl],:bat[:lng]) \n"
"address AGGRavg23_dbl \n"
"comment \"Grouped tail average on hge, also returns count\"; \n"
"command subavg(b:bat[:hge],g:bat[:oid],e:bat[:any_1],skip_nils:bit,abort_on_error:bit) :bat[:dbl] \n"
"address AGGRsubavg1_dbl \n"
"comment \"Grouped average aggregate\"; \n"
"command subavg(b:bat[:hge],g:bat[:oid],e:bat[:any_1],s:bat[:oid],skip_nils:bit,abort_on_error:bit) :bat[:dbl] \n"
"address AGGRsubavg1cand_dbl \n"
"comment \"Grouped average aggregate with candidates list\"; \n"
"command subavg(b:bat[:hge],g:bat[:oid],e:bat[:any_1],skip_nils:bit,abort_on_error:bit) (:bat[:dbl],:bat[:lng]) \n"
"address AGGRsubavg2_dbl \n"
"comment \"Grouped average aggregate, also returns count\"; \n"
"command subavg(b:bat[:hge],g:bat[:oid],e:bat[:any_1],s:bat[:oid],skip_nils:bit,abort_on_error:bit) (:bat[:dbl],:bat[:lng]) \n"
"address AGGRsubavg2cand_dbl \n"
"comment \"Grouped average aggregate with candidates list, also returns count\"; \n"
"command stdev(b:bat[:hge], g:bat[:oid], e:bat[:any_1]):bat[:dbl] \n"
"address AGGRstdev3_dbl \n"
"comment \"Grouped tail standard deviation (sample/non-biased) on hge\"; \n"
"command substdev(b:bat[:hge],g:bat[:oid],e:bat[:any_1],skip_nils:bit,abort_on_error:bit) :bat[:dbl] \n"
"address AGGRsubstdev_dbl \n"
"comment \"Grouped standard deviation (sample/non-biased) aggregate\"; \n"
"command substdev(b:bat[:hge],g:bat[:oid],e:bat[:any_1],s:bat[:oid],skip_nils:bit,abort_on_error:bit) :bat[:dbl] \n"
"address AGGRsubstdevcand_dbl \n"
"comment \"Grouped standard deviation (sample/non-biased) aggregate with candidates list\"; \n"
"command stdevp(b:bat[:hge], g:bat[:oid], e:bat[:any_1]):bat[:dbl] \n"
"address AGGRstdevp3_dbl \n"
"comment \"Grouped tail standard deviation (population/biased) on hge\"; \n"
"command substdevp(b:bat[:hge],g:bat[:oid],e:bat[:any_1],skip_nils:bit,abort_on_error:bit) :bat[:dbl] \n"
"address AGGRsubstdevp_dbl \n"
"comment \"Grouped standard deviation (population/biased) aggregate\"; \n"
"command substdevp(b:bat[:hge],g:bat[:oid],e:bat[:any_1],s:bat[:oid],skip_nils:bit,abort_on_error:bit) :bat[:dbl] \n"
"address AGGRsubstdevpcand_dbl \n"
"comment \"Grouped standard deviation (population/biased) aggregate with candidates list\"; \n"
"command variance(b:bat[:hge], g:bat[:oid], e:bat[:any_1]):bat[:dbl] \n"
"address AGGRvariance3_dbl \n"
"comment \"Grouped tail variance (sample/non-biased) on hge\"; \n"
"command subvariance(b:bat[:hge],g:bat[:oid],e:bat[:any_1],skip_nils:bit,abort_on_error:bit) :bat[:dbl] \n"
"address AGGRsubvariance_dbl \n"
"comment \"Grouped variance (sample/non-biased) aggregate\"; \n"
"command subvariance(b:bat[:hge],g:bat[:oid],e:bat[:any_1],s:bat[:oid],skip_nils:bit,abort_on_error:bit) :bat[:dbl] \n"
"address AGGRsubvariancecand_dbl \n"
"comment \"Grouped variance (sample/non-biased) aggregate with candidates list\"; \n"
"command variancep(b:bat[:hge], g:bat[:oid], e:bat[:any_1]):bat[:dbl] \n"
"address AGGRvariancep3_dbl \n"
"comment \"Grouped tail variance (population/biased) on hge\"; \n"
"command subvariancep(b:bat[:hge],g:bat[:oid],e:bat[:any_1],skip_nils:bit,abort_on_error:bit) :bat[:dbl] \n"
"address AGGRsubvariancep_dbl \n"
"comment \"Grouped variance (population/biased) aggregate\"; \n"
"command subvariancep(b:bat[:hge],g:bat[:oid],e:bat[:any_1],s:bat[:oid],skip_nils:bit,abort_on_error:bit) :bat[:dbl] \n"
"address AGGRsubvariancepcand_dbl \n"
"comment \"Grouped variance (population/biased) aggregate with candidates list\"; \n"
},
