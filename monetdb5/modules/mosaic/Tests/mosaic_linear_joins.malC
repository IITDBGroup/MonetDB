# Linear range compressions

b:= bat.new(:int);
bat.append(b,0);
bat.append(b,2);
bat.append(b,4);
bat.append(b,6);
bat.append(b,8);
bat.append(b,10);
bat.append(b,1);
bat.append(b,4);
bat.append(b,7);
bat.append(b,10);
bat.append(b,13);
bat.append(b,16);
base:= algebra.copy(b);

io.print(base);
mosaic.compress(b,"linear");
#mosaic.dump(b);
b:= mosaic.decompress(b);
io.print(b);

c:= bat.new(:oid);
bat.append(c,0@0);
bat.append(c,2@0);
bat.append(c,4@0);
bat.append(c,7@0);
io.print(c);

#mosaic.dump(b);
s:= algebra.projection(c,base);
io.print(s);
xs:= mosaic.projection(c,b);
io.print(xs);

d:= bat.new(:int);
bat.append(d,4);
bat.append(d,13);
bat.append(d,nil:int);

(jl,jr):= algebra.join(base,d, nil:bat, nil:bat,false,0:lng);
io.print(jl);
io.print(jr);
io.print(jl,jr);
(ml,mr):= mosaic.join(b,d, nil:bat, nil:bat,false,0:lng);
io.print(ml);
io.print(mr);
io.print(ml,mr);

io.printf("reverse join operands");
(jl,jr):= algebra.join(d,base, nil:bat, nil:bat,false,0:lng);
io.print(jl);
io.print(jr);
io.print(jl,jr);
(ml,mr):= mosaic.join(d,b, nil:bat, nil:bat,false,0:lng);
io.print(ml);
io.print(mr);
io.print(ml,mr);
