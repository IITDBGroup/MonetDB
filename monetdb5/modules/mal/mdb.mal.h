/*
* This Source Code Form is subject to the terms of the Mozilla Public
* License, v. 2.0.  If a copy of the MPL was not distributed with this
* file, You can obtain one at http://mozilla.org/MPL/2.0/.
*
* Copyright 1997 - July 2008 CWI, August 2008 - 2019 MonetDB B.V.
*/

// This file was generated automatically with mal2h.py. Do not edit this file directly.
{ "mdb", "\nmodule mdb;\n\npattern start():void \naddress MDBstart\ncomment \"Start interactive debugger\";\npattern start(clientid:int):void \naddress MDBstart\ncomment \"Start interactive debugger on a client\";\npattern start(mod:str,fcn:str):void \naddress MDBstartFactory\ncomment \"Start interactive debugger on a running factory\";\n\npattern stop():void\naddress MDBstop\ncomment \"Stop the interactive debugger\";\n\npattern inspect(mod:str,fcn:str):void\naddress MDBinspect\ncomment \"Run the debugger on a specific function\";\n\ncommand modules():bat[:str] \naddress CMDmodules\ncomment \"List available modules\";\n\npattern setTrace(b:bit):void\naddress MDBsetTrace\ncomment \"Turn on/off tracing of current routine\";\n\npattern setTrace(b:str):void\naddress MDBsetVarTrace\ncomment \"Turn on/off tracing of a variable \";\n\npattern setCatch(b:bit):void\naddress MDBsetCatch\ncomment \"Turn on/off catching exceptions\";\n\ncommand getDebug():int\naddress MDBgetDebug\ncomment \"Get the kernel debugging bit-set.\nSee the MonetDB configuration file for details\";\n\ncommand setDebug(flg:str):int\naddress MDBsetDebugStr\ncomment \"Set the kernel debugging bit-set and return its previous value.\nThe recognized options are: threads, memory, properties,\nio, transactions, modules, algorithms, estimates.\";\ncommand setDebug(flg:int):int\naddress MDBsetDebug\ncomment \"Set the kernel debugging bit-set and return its previous value.\";\n\ncommand getException(s:str):str\naddress MDBgetExceptionVariable\ncomment \"Extract the variable name from the exception message\";\ncommand getReason(s:str):str\naddress MDBgetExceptionReason\ncomment \"Extract the reason from the exception message\";\ncommand getContext(s:str):str\naddress MDBgetExceptionContext\ncomment \"Extract the context string from the exception message\";\n\npattern list():void\naddress MDBlist\ncomment \"Dump the current routine on standard out.\";\npattern listMapi():void\naddress MDBlistMapi\ncomment \"Dump the current routine on standard out with Mapi prefix.\";\npattern list(M:str,F:str):void\naddress MDBlist3\ncomment \"Dump the routine M.F on standard out.\";\npattern List():void \naddress MDBlistDetail\ncomment \"Dump the current routine on standard out.\";\npattern List(M:str,F:str):void \naddress MDBlist3Detail\ncomment \"Dump the routine M.F on standard out.\";\npattern var():void \naddress MDBvar\ncomment \"Dump the symboltable of current routine on standard out.\";\npattern var(M:str,F:str):void \naddress MDBvar3\ncomment \"Dump the symboltable of routine M.F on standard out.\";\n\npattern getStackDepth():int \naddress MDBStkDepth\ncomment \"Return the depth of the calling stack.\";\n\npattern getStackFrame(i:int)(:bat[:str] ,:bat[:str])\naddress MDBgetStackFrameN;\npattern getStackFrame()(:bat[:str] ,:bat[:str])\naddress MDBgetStackFrame\ncomment \"Collect variable binding of current (n-th) stack frame.\";\npattern getStackTrace()(:bat[:int], :bat[:str])\naddress MDBStkTrace;\n\npattern dump()\naddress MDBdump\ncomment \"Dump instruction, stacktrace, and stack\";\n\npattern getDefinition():bat[:str] \naddress MDBgetDefinition\ncomment \"Returns a string representation of the current function \n\twith typing information attached\";" }, 
