/*
* This Source Code Form is subject to the terms of the Mozilla Public
* License, v. 2.0.  If a copy of the MPL was not distributed with this
* file, You can obtain one at http://mozilla.org/MPL/2.0/.
*
* Copyright 1997 - July 2008 CWI, August 2008 - 2019 MonetDB B.V.
*/

// This file was generated automatically with mal2h.py. Do not edit this file directly.
{ "clients", "\nmodule clients;\n\npattern setListing(flag:int):int\naddress CLTsetListing\ncomment \"Turn on/off echo of MAL instructions:\n\t1 - echo input,\n\t2 - show mal instruction,\n\t4 - show details of type resolutoin, \n\t8 - show binding information.\";\n\npattern getId():int\naddress CLTgetClientId\ncomment \"Return a number that uniquely represents the current client.\";\n\npattern getInfo( )(:bat[:str],:bat[:str])\naddress CLTInfo\ncomment \"Pseudo bat with client attributes.\";\n\npattern getScenario():str \naddress CLTgetScenario\ncomment \"Retrieve current scenario name.\";\npattern setScenario(msg:str):str \naddress CLTsetScenario\ncomment \"Switch to other scenario handler, return previous one.\";\n\npattern quit():void\naddress CLTquit\ncomment \"Terminate the client session.\";\n\npattern quit(idx:int):void\naddress CLTquit\ncomment \"Terminate the session for a single client using a soft error.\nIt is the privilige of the console user.\";\n\ncommand getLogins( )(user:bat[:oid],start:bat[:str] )\naddress CLTLogin\ncomment \"Pseudo bat of client id and login time.\";\n\ncommand getLastCommand( ):bat[:str] \naddress CLTLastCommand\ncomment \"Pseudo bat of client's last command time.\";\n\ncommand getActions( ):bat[:int] \naddress CLTActions\ncomment \"Pseudo bat of client's command counts.\";\n\ncommand getUsers( ):bat[:str] \naddress CLTusers\ncomment \"Pseudo bat of users id and name.\";\n\npattern stop(id:int)\naddress CLTstop\ncomment \"Stop the query execution at the next eligble statement.\";\n\npattern suspend(id:int):void\naddress CLTsuspend\ncomment \"Put a client process to sleep for some time.\nIt will simple sleep for a second at a time, until\nthe awake bit has been set in its descriptor\";\n\ncommand wakeup(id:int):void\naddress CLTwakeup\ncomment \"Wakeup a client process\";\n\npattern setsession(n:lng):void\naddress CLTsetSessionTimeout\ncomment \"Abort a session after  n seconds.\";\n\npattern settimeout(n:lng):void\naddress CLTsetTimeout\ncomment \"Abort a query after  n seconds.\";\n\npattern settimeout(q:lng,s:lng):void\naddress CLTsetTimeout\ncomment \"Abort a query after q seconds (q=0 means run undisturbed).\nThe session timeout aborts the connection after spending too\nmany seconds on query processing.\";\n\npattern getTimeout()(q:lng,s:lng)\naddress CLTgetTimeout\ncomment \"A query is aborted after q milliseconds (q=0 means run undisturbed).\nThe session timeout aborts the connection after spending too\nmany seconds on query processing.\";\n\npattern shutdown(delay:int):str\naddress CLTshutdown;\npattern shutdown(delay:int, forced:bit):str\naddress CLTshutdown\ncomment \"Close all other client connections. Return if it succeeds.\nIf forced is set then always stop the system the hard way\";\n\ncommand md5sum(pw:str):str\naddress CLTmd5sum\ncomment \"Return hex string representation of the MD5 hash of the given string\";\n\ncommand sha1sum(pw:str):str\naddress CLTsha1sum\ncomment \"Return hex string representation of the SHA-1 hash of the given string\";\n\ncommand sha2sum(pw:str, bits:int):str\naddress CLTsha2sum\ncomment \"Return hex string representation of the SHA-2 hash with bits of the given string\";\ncommand ripemd160sum(pw:str):str\naddress CLTripemd160sum\ncomment \"Return hex string representation of the RIPEMD160 hash of the given string\";\n\ncommand backendsum(pw:str):str\naddress CLTbackendsum\ncomment \"Return hex string representation of the currently used hash of the given string\";\n\npattern addUser(nme:str, pw:str):oid\naddress CLTaddUser\ncomment \"Allow user with password access to the given scenarios\";\n\npattern removeUser(nme:str):void\naddress CLTremoveUser\ncomment \"Remove the given user from the system\";\n\npattern getUsername():str\naddress CLTgetUsername\ncomment \"Return the username of the currently logged in user\";\n\npattern getPasswordHash(user:str):str\naddress CLTgetPasswordHash\ncomment \"Return the password hash of the given user\";\n\npattern changeUsername(old:str, new:str):void\naddress CLTchangeUsername\ncomment \"Change the username of the user into the new string\";\n\npattern changePassword(old:str, new:str):void\naddress CLTchangePassword\ncomment \"Change the password for the current user\";\n\npattern setPassword(user:str, pass:str):void\naddress CLTsetPassword\ncomment \"Set the password for the given user\";\n\npattern checkPermission(usr:str, pw:str):void\naddress CLTcheckPermission\ncomment \"Check permission for a user, requires hashed password (backendsum)\";\n\npattern getUsers()(:bat[:oid],:bat[:str])\naddress CLTgetUsers\ncomment \"return a BAT with user id and one with name available in the system\";" }, 
