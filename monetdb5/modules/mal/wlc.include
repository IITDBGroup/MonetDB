{ "wlc",
"# This Source Code Form is subject to the terms of the Mozilla Public \n"
"# License, v. 2.0.  If a copy of the MPL was not distributed with this \n"
"# file, You can obtain one at http://mozilla.org/MPL/2.0/. \n"
"# \n"
"# Copyright 1997 - July 2008 CWI, August 2008 - 2019 MonetDB B.V. \n"
"module wlc; \n"
"pattern init() \n"
"address WLCinitCmd \n"
"comment \"Test for running as master\"; \n"
"pattern master() \n"
"address WLCmaster \n"
"comment \"Activate the workload-capture-replay process\"; \n"
"pattern master(path:str) \n"
"address WLCmaster \n"
"comment \"Activate the workload-capture-replay process. Use a different location for the logs.\"; \n"
"pattern stopmaster() \n"
"address WLCstopmaster \n"
"comment \"Stop capturing the logs\"; \n"
"pattern setmasterbeat(duration:int) \n"
"address WLCsetmasterbeat \n"
"comment \"Maximal delay for transaction log flushing\"; \n"
"pattern getmasterbeat(duration:int):str \n"
"address WLCgetmasterbeat \n"
"comment \"Maximal delay for transaction log flushing\"; \n"
"pattern getmasterclock():str \n"
"address WLCgetmasterclock \n"
"comment \"Timestamp of last update transaction\"; \n"
"pattern getmastertick():lng \n"
"address WLCgetmastertick \n"
"comment \"Transaction identifier of the last committed transaction\"; \n"
"pattern rollback() \n"
"address WLCrollbackCmd \n"
"comment \"Mark the end of the work unit\"; \n"
"pattern commit() \n"
"address WLCcommitCmd \n"
"comment \"Mark the end of the work unit\"; \n"
"pattern query(q:str) \n"
"address WLCquery \n"
"comment \"Keep the queries for replay.\"; \n"
"pattern catalog(q:str) \n"
"address WLCcatalog \n"
"comment \"Keep the catalog changing queries for replay. \"; \n"
"pattern action(q:str) \n"
"address WLCaction \n"
"comment \"Keep the database changing queries for replay. \"; \n"
"pattern append(sname:str, tname:str, cname:str, ins:any):int \n"
"address WLCappend \n"
"comment \"Keep the insertions in the workload-capture-replay list\"; \n"
"pattern update(sname:str, tname:str, cname:str, tid:any, val:any):int \n"
"address WLCupdate \n"
"comment \"Keep the update in the workload-capture-replay list\"; \n"
"pattern delete(sname:str, tname:str, b:any):int \n"
"address WLCdelete \n"
"comment \"Keep the deletions in the workload-capture-replay list\"; \n"
"pattern clear_table(sname:str, tname:str):int \n"
"address WLCclear_table \n"
"comment \"Keep the deletions in the workload-capture-replay list\"; \n"
"pattern commit() \n"
"address WLCcommitCmd \n"
"comment \"Commit the workload-capture-replay record\"; \n"
"pattern rollback() \n"
"address WLCcommitCmd \n"
"comment \"Rollback the workload-capture-replay record\"; \n"
"# The wrapping of the catalog and transaction operations \n"
"pattern create_seq( sname:str, seqname:str, action:int) \n"
"address WLCgeneric \n"
"comment \"Catalog operation create_seq\"; \n"
"pattern alter_seq( sname:str, seqname:str, val:lng) \n"
"address WLCgeneric \n"
"comment \"Catalog operation alter_seq\"; \n"
"pattern drop_seq( sname:str, nme:str, action:int) \n"
"address WLCgeneric \n"
"comment \"Catalog operation drop_seq\"; \n"
"pattern create_schema(sname:str, auth:str, ifnotexists:int, action:int) \n"
"address WLCgeneric \n"
"comment \"Catalog operation create_schema\"; \n"
"pattern drop_schema( sname:str, s:str, ifexists:int, action:int) \n"
"address WLCgeneric \n"
"comment \"Catalog operation drop_schema\"; \n"
"pattern create_table(sname:str, tname:str, temp:int) \n"
"address WLCgeneric \n"
"comment \"Catalog operation create_table\"; \n"
"pattern create_view(sname:str, tname:str, temp:int) \n"
"address WLCgeneric \n"
"comment \"Catalog operation create_view\"; \n"
"pattern drop_table( sname:str, name:str, action:int, ifexists:int) \n"
"address WLCgeneric \n"
"comment \"Catalog operation drop_table\"; \n"
"pattern drop_view( sname:str, name:str, action:int, ifexists:int) \n"
"address WLCgeneric \n"
"comment \"Catalog operation drop_view\"; \n"
"pattern drop_constraint( sname:str, name:str, action:int, ifexists:int) \n"
"address WLCgeneric \n"
"comment \"Catalog operation drop_constraint\"; \n"
"pattern alter_table( sname:str, tname:str, action:int) \n"
"address WLCgeneric \n"
"comment \"Catalog operation alter_table\"; \n"
"pattern create_type( sname:str, nme:str, impl:str) \n"
"address WLCgeneric \n"
"comment \"Catalog operation create_type\"; \n"
"pattern drop_type( sname:str, nme:str, action:int) \n"
"address WLCgeneric \n"
"comment \"Catalog operation drop_type\"; \n"
"pattern grant_roles( sname:str, auth:str, grantor:int, admin:int) \n"
"address WLCgeneric \n"
"comment \"Catalog operation grant_roles\"; \n"
"pattern revoke_roles( sname:str, auth:str, grantor:int, admin:int) \n"
"address WLCgeneric \n"
"comment \"Catalog operation revoke_roles\"; \n"
"pattern grant( sname:str, tbl:str, grantee:str, privs:int, cname:str, gr:int, grantor:int) \n"
"address WLCgeneric \n"
"comment \"Catalog operation grant\"; \n"
"pattern revoke ( sname:str, tbl:str, grantee:str, privs:int, cname:str,grant:int, grantor:int) \n"
"address WLCgeneric \n"
"comment \"Catalog operation revoke\"; \n"
"pattern grant_function( sname:str, fcnid:int, grantee:str, privs:int, grant:int, grantor:int) \n"
"address WLCgeneric \n"
"comment \"Catalog operation grant_function\"; \n"
"pattern revoke_function( sname:str, fcnid:int, grantee:str, privs:int, grant:int, grantor:int) \n"
"address WLCgeneric \n"
"comment \"Catalog operation revoke_function\"; \n"
"pattern create_user( sname:str, passwrd:str, enc:int, schema:str, fullname:str) \n"
"address WLCgeneric \n"
"comment \"Catalog operation create_user\"; \n"
"pattern drop_user(sname:str, action:int) \n"
"address WLCgeneric \n"
"comment \"Catalog operation drop_user\"; \n"
"pattern drop_user(sname:str, auth:str, action:int) \n"
"address WLCgeneric \n"
"comment \"Catalog operation drop_user\"; \n"
"pattern alter_user( sname:str, passwrd:str, enc:int, schema:str, oldpasswrd:str) \n"
"address WLCgeneric \n"
"comment \"Catalog operation alter_user\"; \n"
"pattern rename_user( sname:str, newnme:str, action:int) \n"
"address WLCgeneric \n"
"comment \"Catalog operation rename_user\"; \n"
"pattern create_role(sname:str,role:str,grator:int) \n"
"address WLCgeneric \n"
"comment \"Catalog operation create_role\"; \n"
"pattern drop_role( auth:str, role:str, action:int) \n"
"address WLCgeneric \n"
"comment \"Catalog operation drop_role\"; \n"
"pattern drop_role( role:str, action:int) \n"
"address WLCgeneric \n"
"comment \"Catalog operation drop_role\"; \n"
"pattern drop_index( sname:str, iname:str, action:int) \n"
"address WLCgeneric \n"
"comment \"Catalog operation drop_index\"; \n"
"pattern drop_function( sname:str, fname:str, fid:int, type:int, action:int) \n"
"address WLCgeneric \n"
"comment \"Catalog operation drop_function\"; \n"
"pattern create_function( sname:str, fname:str) \n"
"address WLCgeneric \n"
"comment \"Catalog operation create_function\"; \n"
"pattern create_trigger( sname:str, tname:str, triggername:str, time:int, orientation:int, event:int, old:str, new:str, cond:str, qry:str) \n"
"address WLCgeneric \n"
"comment \"Catalog operation create_trigger\"; \n"
"pattern drop_trigger(sname:str, nme:str, ifexists:int) \n"
"address WLCgeneric \n"
"comment \"Catalog operation drop_trigger\"; \n"
"pattern alter_add_table( sname:str, mtnme:str, psnme:str, ptnme:str, action:int) \n"
"address WLCgeneric \n"
"comment \"Catalog operation alter_add_table\"; \n"
"pattern alter_del_table( sname:str, mtnme:str, psnme:str, ptnme:str, action:int) \n"
"address WLCgeneric \n"
"comment \"Catalog operation alter_del_table\"; \n"
"pattern alter_set_table( sname:str, tnme:str, access:int) \n"
"address WLCgeneric \n"
"comment \"Catalog operation alter_set_table\"; \n"
"pattern alter_add_range_partition( sname:str, mtnme:str, psnme:str, ptnme:str, min:str, max:str, nills:int, update:int) \n"
"address WLCgeneric \n"
"comment \"Catalog operation alter_add_range_partition\"; \n"
"pattern comment_on(objid:int, remark:str) \n"
"address WLCgeneric \n"
"comment \"Catalog operation comment_on\"; \n"
"pattern rename_schema(sname:str, newnme:str) \n"
"address WLCgeneric \n"
"comment \"Catalog operation rename_schema\"; \n"
"pattern rename_table(sname:str, tname:str, newnme:str) \n"
"address WLCgeneric \n"
"comment \"Catalog operation rename_table\"; \n"
"pattern rename_column(sname:str, tname:str, cname:str, newnme:str) \n"
"address WLCgeneric \n"
"comment \"Catalog operation rename_column\"; \n"
"pattern transaction_release(chain:int,name:str):void \n"
"address WLCgeneric \n"
"comment \"A transaction statement (type can be commit,release,rollback or start)\"; \n"
"pattern transaction_commit(chain:int,name:str):void \n"
"address WLCgeneric \n"
"comment \"A transaction statement (type can be commit,release,rollback or start)\"; \n"
"pattern transaction_rollback(chain:int,name:str):void \n"
"address WLCgeneric \n"
"comment \"A transaction statement (type can be commit,release,rollback or start)\"; \n"
"pattern transaction_begin(chain:int,name:str):void \n"
"address WLCgeneric \n"
"comment \"A transaction statement (type can be commit,release,rollback or start)\"; \n"
"unsafe pattern transaction() \n"
"address WLCgeneric \n"
"comment \"Start an autocommit transaction\"; \n"
"pattern alter_add_value_partition( sname:str, mtnme:str, psnme:str, ptnme:str, nills:int, update:int) \n"
"address WLCgeneric \n"
"comment \"Catalog operation alter_add_value_partition\"; \n"
"pattern alter_add_value_partition( sname:str, mtnme:str, psnme:str, ptnme:str, nills:int, update:int, arg:str...) \n"
"address WLCgeneric \n"
"comment \"Catalog operation alter_add_value_partition\"; \n"
},
