/*
* This Source Code Form is subject to the terms of the Mozilla Public
* License, v. 2.0.  If a copy of the MPL was not distributed with this
* file, You can obtain one at http://mozilla.org/MPL/2.0/.
*
* Copyright 1997 - July 2008 CWI, August 2008 - 2019 MonetDB B.V.
*/

// This file was generated automatically with mal2h.py. Do not edit this file directly.
{ "remote", "\nmodule remote;\n\ncommand prelude():void\naddress RMTprelude\ncomment \"initialise the remote module\";\n\ncommand epilogue():void\naddress RMTepilogue\ncomment \"release the resources held by the remote module\";\n\ncommand resolve(pattern:str):bat[:str]\naddress RMTresolve\ncomment \"resolve a pattern against Merovingian and return the URIs\";\n\ncommand connect(uri:str, user:str, passwd:str):str\naddress RMTconnect\ncomment \"returns a newly created connection for uri, using user name and password\";\ncommand connect(uri:str, user:str, passwd:str, scen:str):str\naddress RMTconnectScen\ncomment \"returns a newly created connection for uri, using user name, password and scenario\";\npattern connect(table:str, schen:str):str\naddress RMTconnectTable\ncomment \"return a newly created connection for a table. username and password should be in the vault\";\n\ncommand disconnect(conn:str):void\naddress RMTdisconnect\ncomment \"disconnects the connection pointed to by handle (received from a call to connect()\";\n\npattern get(conn:str, ident:str):any\naddress RMTget\ncomment \"retrieves a copy of remote object ident\";\n\npattern put(conn:str, object:any):str\naddress RMTput\ncomment \"copies object to the remote site and returns its identifier\";\n\npattern register(conn:str, mod:str, fcn:str):void\naddress RMTregister\ncomment \"register <mod>.<fcn> at the remote site\";\n\npattern exec(conn:str, mod:str, func:str):str\naddress RMTexec\ncomment \"remotely executes <mod>.<func> and returns the handle to its result\";\npattern exec(conn:str, mod:str, func:str):str...\naddress RMTexec\ncomment \"remotely executes <mod>.<func> and returns the handle to its result\";\npattern exec(conn:str, mod:str, func:str, :str...):str\naddress RMTexec\ncomment \"remotely executes <mod>.<func> using the argument list of remote objects and returns the handle to its result\";\npattern exec(conn:str, mod:str, func:str, :str...):str...\naddress RMTexec\ncomment \"remotely executes <mod>.<func> using the argument list of remote objects and returns the handle to its result\";\ncommand isalive(conn:str):int\naddress RMTisalive\ncomment \"check if conn is still valid and connected\";\n\npattern batload(tt:any_1, size:int):bat[:any_1]\naddress RMTbatload\ncomment \"create a BAT of the given type and size, and load values from the input stream\";\n\npattern batbincopy(b:bat[:any]):void\naddress RMTbincopyto\ncomment \"dump BAT b in binary form to the stream\";\npattern batbincopy():bat[:any]\naddress RMTbincopyfrom\ncomment \"store the binary BAT data in the BBP and return as BAT\";\n\npattern bintype():void\naddress RMTbintype\ncomment \"print the binary type of this mserver5\";\n\ncommand register_supervisor(sup_uuid:str, query_uuid:str):int\naddress RMTregisterSupervisor\ncomment \"Register the supervisor uuid at a remote site\";\n\nremote.prelude();" }, 
