#inspired by SQL
# function user.s6_1():void;                                                                             |
#     X_1:void := querylog.define("select count(distinct i) from tmp;":str, "default_pipe":str, 14:int); |
#     X_4:int := sql.mvc();                                                                              |
#     C_5:bat[:oid] := sql.tid(X_4:int, "sys":str, "tmp":str);                                           |
#     X_8:bat[:int] := sql.bind(X_4:int, "sys":str, "tmp":str, "i":str, 0:int);                          |
#     X_17:bat[:int] := algebra.projection(C_5:bat[:oid], X_8:bat[:int]);                                |
#     (X_18:bat[:oid], C_19:bat[:oid], X_20:bat[:lng]) := group.groupdone(X_17:bat[:int]);               |
#     X_21:bat[:int] := algebra.projection(C_19:bat[:oid], X_17:bat[:int]);                              |
#     X_22:lng := aggr.count(X_21:bat[:int], true:bit);                                                  |
#     sql.resultSet("sys.L4":str, "L3":str, "bigint":str, 64:int, 0:int, 7:int, X_22:lng);               |
# end user.s6_1;                                                                                         |

b:= bat.new(:int);
bat.append(b,0);
bat.append(b,1);
bat.append(b,2);
bat.append(b,3);
bat.append(b,4);
bat.append(b,5);
bat.append(b,6);
bat.append(b,7);
bat.append(b,8);
bat.append(b,9);
d:= bat.new(:int);
bat.append(d,0);
bat.append(d,1);
bat.append(d,1);
bat.append(d,2);
bat.append(d,2);
bat.append(d,3);
bat.append(d,3);
bat.append(d,4);
bat.append(d,4);
bat.append(d,5);
io.print(b,d);
(o,g,c):= group.groupdone(d);
io.print(o);
io.print(g,c);
k := algebra.projection(g,d);
a:= aggr.count(k);
io.print(a);

(k1,k2,k3,k4):= partition.slice(d);
p1 := algebra.projection(k1,d);
p2 := algebra.projection(k2,d);
p3 := algebra.projection(k3,d);
p4 := algebra.projection(k4,d);
(o1,g1,c1):= group.groupdone(p1);
(o2,g2,c2):= group.groupdone(p2);
(o3,g3,c3):= group.groupdone(p3);
(o4,g4,c4):= group.groupdone(p4);
j1 := algebra.projection(g1,p1);
j2 := algebra.projection(g2,p2);
j3 := algebra.projection(g3,p3);
j4 := algebra.projection(g4,p4);
s1 := aggr.count(j1,true);
s2 := aggr.count(j2,true);
s3 := aggr.count(j3,true);
s4 := aggr.count(j4,true);
m := mat.pack(s1,s2,s3,s4);
a4:= aggr.sum(m);
io.print(a4);

