{ "mal_mapi",
"# This Source Code Form is subject to the terms of the Mozilla Public \n"
"# License, v. 2.0.  If a copy of the MPL was not distributed with this \n"
"# file, You can obtain one at http://mozilla.org/MPL/2.0/. \n"
"# \n"
"# Copyright 1997 - July 2008 CWI, August 2008 - 2019 MonetDB B.V. \n"
"module mapi; \n"
"command listen():int \n"
"address SERVERlisten_default \n"
"comment \"Start a Mapi server with the default settings.\"; \n"
"command listen(port:int):int \n"
"address SERVERlisten_port \n"
"comment \"Start a Mapi listener on the port given.\"; \n"
"command listen(unixsocket:str):int \n"
"address SERVERlisten_usock \n"
"comment \"Start a Mapi listener on the unix socket file given.\"; \n"
"command stop():void \n"
"address SERVERstop \n"
"comment \"Terminate connection listeners.\"; \n"
"command suspend():void \n"
"address SERVERsuspend \n"
"comment \"Suspend accepting connections.\"; \n"
"command resume():void \n"
"address SERVERresume \n"
"comment \"Resume connection listeners.\"; \n"
"command malclient(in:streams, out:streams):void \n"
"address SERVERclient \n"
"comment \"Start a Mapi client for a particular stream pair.\"; \n"
"command trace(mid:int,flag:int):void \n"
"address SERVERtrace \n"
"comment \"Toggle the Mapi library debug tracer.\"; \n"
"pattern reconnect(host:str, port:int, usr:str, passwd:str,lang:str):int \n"
"address SERVERreconnectWithoutAlias \n"
"comment \"Re-establish connection with a remote mserver.\"; \n"
"pattern reconnect(host:str, port:int, db_alias:str, usr:str, passwd:str,lang:str):int \n"
"address SERVERreconnectAlias \n"
"comment \"Re-establish connection with a remote mserver.\"; \n"
"command reconnect(mid:int):void \n"
"address SERVERreconnect \n"
"comment \"Re-establish a connection.\"; \n"
"pattern connect(host:str, port:int, usr:str, passwd:str,lang:str):int \n"
"address SERVERconnect \n"
"comment \"Establish connection with a remote mserver.\"; \n"
"command disconnect(dbalias:str):int \n"
"address SERVERdisconnectWithAlias \n"
"comment \"Close connection with a remote Mserver.\"; \n"
"command disconnect():int \n"
"address SERVERdisconnectALL \n"
"comment \"Close connections with all remote Mserver.\"; \n"
"command setAlias(key:int,dbalias:str) \n"
"address SERVERsetAlias \n"
"comment \"Give the channel a logical name.\"; \n"
"command lookup(dbalias:str):int \n"
"address SERVERlookup \n"
"comment \"Retrieve the connection identifier.\"; \n"
"command disconnect(mid:int):void \n"
"address SERVERdisconnect \n"
"comment \"Terminate the session.\"; \n"
"command destroy(mid:int):void \n"
"address SERVERdestroy \n"
"comment \"Destroy the handle for an Mserver.\"; \n"
"command ping(mid:int):int \n"
"address SERVERping \n"
"comment \"Test availability of an Mserver.\"; \n"
"command query(mid:int, qry:str):int \n"
"address SERVERquery \n"
"comment \"Send the query for execution\"; \n"
"command query_handle(mid:int, qry:str):int \n"
"address SERVERquery_handle \n"
"comment \"Send the query for execution.\"; \n"
"pattern query_array(mid:int, qry:str, arg:str...):int \n"
"address SERVERquery_array \n"
"comment \"Send the query for execution replacing '?' by arguments.\"; \n"
"command prepare(mid:int, qry:str):int \n"
"address SERVERprepare \n"
"comment \"Prepare a query for execution.\"; \n"
"command finish(hdl:int):int \n"
"address SERVERfinish \n"
"comment \"Remove all remaining answers.\"; \n"
"command get_field_count(hdl:int):int \n"
"address SERVERget_field_count \n"
"comment \"Return number of fields.\"; \n"
"command get_row_count(hdl:int):lng \n"
"address SERVERget_row_count \n"
"comment \"Return number of rows.\"; \n"
"command rows_affected(hdl:int):lng \n"
"address SERVERrows_affected \n"
"comment \"Return number of affected rows.\"; \n"
"command fetch_row(hdl:int):int \n"
"address SERVERfetch_row \n"
"comment \"Retrieve the next row for analysis.\"; \n"
"command fetch_all_rows(hdl:int):lng \n"
"address SERVERfetch_all_rows \n"
"comment \"Retrieve all rows into the cache.\"; \n"
"command fetch_field(hdl:int,fnr:int):str \n"
"address SERVERfetch_field_str \n"
"comment \"Retrieve a single field.\"; \n"
"command fetch_field(hdl:int,fnr:int):int \n"
"address SERVERfetch_field_int \n"
"comment \"Retrieve a single int field.\"; \n"
"command fetch_field(hdl:int,fnr:int):lng \n"
"address SERVERfetch_field_lng \n"
"comment \"Retrieve a single lng field.\"; \n"
"command fetch_field(hdl:int,fnr:int):sht \n"
"address SERVERfetch_field_sht \n"
"comment \"Retrieve a single sht field.\"; \n"
"command fetch_field(hdl:int,fnr:int):void \n"
"address SERVERfetch_field_void \n"
"comment \"Retrieve a single void field.\"; \n"
"command fetch_field(hdl:int,fnr:int):oid \n"
"address SERVERfetch_field_oid \n"
"comment \"Retrieve a single void field.\"; \n"
"command fetch_field(hdl:int,fnr:int):bte \n"
"address SERVERfetch_field_bte \n"
"comment \"Retrieve a single bte field.\"; \n"
"command fetch_field_array(hdl:int):bat[:str] \n"
"address SERVERfetch_field_bat \n"
"comment \"Retrieve all fields for a row.\"; \n"
"command fetch_line(hdl:int):str \n"
"address SERVERfetch_line \n"
"comment \"Retrieve a complete line.\"; \n"
"command fetch_reset(hdl:int):int \n"
"address SERVERfetch_reset \n"
"comment \"Reset the cache read line.\"; \n"
"command next_result(hdl:int):int \n"
"address SERVERnext_result \n"
"comment \"Go to next result set.\"; \n"
"command error(mid:int):int \n"
"address SERVERerror \n"
"comment \"Check for an error in the communication.\"; \n"
"command getError(mid:int):str \n"
"address SERVERgetError \n"
"comment \"Get error message.\"; \n"
"command explain(mid:int):str \n"
"address SERVERexplain \n"
"comment \"Turn the error seen into a string.\"; \n"
"pattern put(mid:int, nme:str, val:any_1):void \n"
"address SERVERput \n"
"comment \"Send a value to a remote site.\"; \n"
"pattern put(nme:str, val:any_1):str \n"
"address SERVERputLocal \n"
"comment \"Prepare sending a value to a remote site.\"; \n"
"pattern rpc(key:int,qry:str...):any \n"
"address SERVERmapi_rpc_single_row \n"
"comment \"Send a simple query for execution and fetch result.\"; \n"
"pattern rpc(key:int,qry:str):bat[:any_2] \n"
"address SERVERmapi_rpc_bat; \n"
"command rpc(key:int,qry:str):int \n"
"address SERVERquery \n"
"comment \"Send a simple query for execution.\"; \n"
"pattern bind(key:int,rschema:str,rtable:str,rcolumn:str,i:int):bat[:any_2] \n"
"address SERVERbindBAT \n"
"comment \"Bind a remote variable to a local one.\"; \n"
"pattern bind(key:int,rschema:str,rtable:str,i:int):bat[:any_2] \n"
"address SERVERbindBAT \n"
"comment \"Bind a remote variable to a local one.\"; \n"
"pattern bind(key:int,remoteName:str):bat[:any_2] \n"
"address SERVERbindBAT \n"
"comment \"Bind a remote variable to a local one.\"; \n"
"mapi.listen(); \n"
},
