{ "mal_io",
"# This Source Code Form is subject to the terms of the Mozilla Public \n"
"# License, v. 2.0.  If a copy of the MPL was not distributed with this \n"
"# file, You can obtain one at http://mozilla.org/MPL/2.0/. \n"
"# \n"
"# Copyright 1997 - July 2008 CWI, August 2008 - 2019 MonetDB B.V. \n"
"module io; \n"
"pattern stdin():bstream \n"
"address io_stdin \n"
"comment \"return the input stream to the database client\"; \n"
"pattern stderr():streams \n"
"address io_stderr \n"
"comment \"return the error stream for the database console\"; \n"
"pattern stdout():streams \n"
"address io_stdout \n"
"comment \"return the output stream for the database client\"; \n"
"pattern print(val:any_1,lst:any...):void  \n"
"address IOprint_val \n"
"comment \"Print a MAL value tuple .\"; \n"
"pattern print(b1:bat[:any]...):void  \n"
"address IOtable \n"
"comment \"BATs are printed with '#' for legend  \n"
"	lines, and the BUNs on seperate lines  \n"
"	between brackets, containing each to  \n"
"	comma separated values (head and tail).  \n"
"	If multiple BATs are passed for printing,  \n"
"	print() performs an implicit natural  \n"
"	join on the void head, producing a multi attribute table.\"; \n"
"pattern print(val:any_1):void  \n"
"address IOprint_val \n"
"comment \"Print a MAL value.\"; \n"
"pattern print(val:bat[:any_1]):void  \n"
"address IOprint_val \n"
"comment \"Print a MAL value column .\"; \n"
"pattern printf(fmt:str,val:any...):void  \n"
"address IOprintf \n"
"comment \"Select default format \"; \n"
"pattern printf(fmt:str):void  \n"
"address IOprintf \n"
"comment \"Select default format \"; \n"
"pattern printf(filep:streams,fmt:str,val:any...):void  \n"
"address IOprintfStream \n"
"comment \"Select default format \"; \n"
"pattern printf(filep:streams,fmt:str):void  \n"
"address IOprintfStream \n"
"comment \"Select default format \"; \n"
"command export(b:bat[:any_2], filepath:str)   \n"
"address IOexport \n"
"comment \"Export a BAT as ASCII to a file. If the 'filepath' is not absolute, it \n"
" is put into the $DBPATH directory. Success of failure is indicated.\"; \n"
"command import(b:bat[:any_2], filepath:str) \n"
"address IOimport \n"
"comment \"Import a BAT from an ASCII dump. The tuples are appended to the \n"
" first argument. Its signature must match the dump, \n"
" else parsing errors will occur as an exception.\"; \n"
"# used for testing malloc failures \n"
"command setmallocsuccesscount(count:lng):void \n"
"address IOsetmallocsuccesscount \n"
"comment \"Set number of mallocs that are allowed to succeed.\"; \n"
},
