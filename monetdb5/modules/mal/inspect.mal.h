/*
* This Source Code Form is subject to the terms of the Mozilla Public
* License, v. 2.0.  If a copy of the MPL was not distributed with this
* file, You can obtain one at http://mozilla.org/MPL/2.0/.
*
* Copyright 1997 - July 2008 CWI, August 2008 - 2019 MonetDB B.V.
*/

// This file was generated automatically with mal2h.py. Do not edit this file directly.
{ "inspect", "\nmodule inspect;\n\npattern getDefinition(mod:str,fcn:str) :bat[:str] \naddress INSPECTgetDefinition\ncomment \"Returns a string representation of a specific function.\";\n\npattern getSignature(mod:str,fcn:str) :bat[:str] \naddress INSPECTgetSignature\ncomment \"Returns the function signature(s).\";\n\npattern getAddress(mod:str,fcn:str) :bat[:str] \naddress INSPECTgetAddress\ncomment \"Returns the function signature(s).\";\n\npattern getComment(mod:str,fcn:str) :bat[:str]\naddress INSPECTgetComment\ncomment \"Returns the function help information.\";\n\npattern getSource(mod:str,fcn:str):str\naddress INSPECTgetSource\ncomment \"Return the original input for a function.\";\n\npattern getKind():bat[:str]\naddress INSPECTgetkind\ncomment \"Obtain the instruction kind.\";\npattern getModule():bat[:str]\naddress INSPECTgetAllModules\ncomment \"Obtain the function name.\";\npattern getFunction():bat[:str]\naddress INSPECTgetAllFunctions\ncomment \"Obtain the function name.\";\npattern getSignatures():bat[:str]\naddress INSPECTgetAllSignatures\ncomment \"Obtain the function signatures.\";\npattern getAddresses():bat[:str]\naddress INSPECTgetAllAddresses\ncomment \"Obtain the function address.\";\n\n\npattern getSize():lng\naddress INSPECTgetSize\ncomment \"Return the storage size for the current function (in bytes).\";\n\npattern getSize(mod:str,fcn:str):lng\naddress INSPECTgetFunctionSize\ncomment \"Return the storage size for a function (in bytes).\";\n\n\npattern getType(v:any_1) :str \naddress INSPECTtypeName\ncomment \"Return the concrete type of a variable (expression).\";\n\npattern equalType(l:any, r:any):bit\naddress INSPECTequalType\ncomment \"Return true if both operands are of the same type\";\ncommand getAtomNames():bat[:str] \naddress INSPECTatom_names\ncomment \"Collect a BAT with the atom names.\";\ncommand getAtomSuper():bat[:str] \naddress INSPECTatom_sup_names\ncomment \"Collect a BAT with the atom names.\";\ncommand getAtomSizes():bat[:int] \naddress INSPECTatom_sizes\ncomment \"Collect a BAT with the atom sizes.\";\n\ncommand getEnvironment() (k:bat[:str], v:bat[:str])\naddress INSPECTgetEnvironment\ncomment \"Collect the environment variables.\";\ncommand getEnvironment(k:str) :str\naddress INSPECTgetEnvironmentKey\ncomment \"Get the value of an environemnt variable\";" }, 
