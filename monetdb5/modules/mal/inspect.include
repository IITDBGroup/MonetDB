{ "inspect",
"# This Source Code Form is subject to the terms of the Mozilla Public \n"
"# License, v. 2.0.  If a copy of the MPL was not distributed with this \n"
"# file, You can obtain one at http://mozilla.org/MPL/2.0/. \n"
"# \n"
"# Copyright 1997 - July 2008 CWI, August 2008 - 2019 MonetDB B.V. \n"
"module inspect; \n"
"pattern getDefinition(mod:str,fcn:str) :bat[:str]  \n"
"address INSPECTgetDefinition \n"
"comment \"Returns a string representation of a specific function.\"; \n"
"pattern getSignature(mod:str,fcn:str) :bat[:str]  \n"
"address INSPECTgetSignature \n"
"comment \"Returns the function signature(s).\"; \n"
"pattern getAddress(mod:str,fcn:str) :bat[:str]  \n"
"address INSPECTgetAddress \n"
"comment \"Returns the function signature(s).\"; \n"
"pattern getComment(mod:str,fcn:str) :bat[:str] \n"
"address INSPECTgetComment \n"
"comment \"Returns the function help information.\"; \n"
"pattern getSource(mod:str,fcn:str):str \n"
"address INSPECTgetSource \n"
"comment \"Return the original input for a function.\"; \n"
"pattern getKind():bat[:str] \n"
"address INSPECTgetkind \n"
"comment \"Obtain the instruction kind.\"; \n"
"pattern getModule():bat[:str] \n"
"address INSPECTgetAllModules \n"
"comment \"Obtain the function name.\"; \n"
"pattern getFunction():bat[:str] \n"
"address INSPECTgetAllFunctions \n"
"comment \"Obtain the function name.\"; \n"
"pattern getSignatures():bat[:str] \n"
"address INSPECTgetAllSignatures \n"
"comment \"Obtain the function signatures.\"; \n"
"pattern getAddresses():bat[:str] \n"
"address INSPECTgetAllAddresses \n"
"comment \"Obtain the function address.\"; \n"
"pattern getSize():lng \n"
"address INSPECTgetSize \n"
"comment \"Return the storage size for the current function (in bytes).\"; \n"
"pattern getSize(mod:str,fcn:str):lng \n"
"address INSPECTgetFunctionSize \n"
"comment \"Return the storage size for a function (in bytes).\"; \n"
"pattern getType(v:any_1) :str  \n"
"address INSPECTtypeName \n"
"comment \"Return the concrete type of a variable (expression).\"; \n"
"pattern equalType(l:any, r:any):bit \n"
"address INSPECTequalType \n"
"comment \"Return true if both operands are of the same type\"; \n"
"command getAtomNames():bat[:str]  \n"
"address INSPECTatom_names \n"
"comment \"Collect a BAT with the atom names.\"; \n"
"command getAtomSuper():bat[:str]  \n"
"address INSPECTatom_sup_names \n"
"comment \"Collect a BAT with the atom names.\"; \n"
"command getAtomSizes():bat[:int]  \n"
"address INSPECTatom_sizes \n"
"comment \"Collect a BAT with the atom sizes.\"; \n"
"command getEnvironment() (k:bat[:str], v:bat[:str]) \n"
"address INSPECTgetEnvironment \n"
"comment \"Collect the environment variables.\"; \n"
"command getEnvironment(k:str) :str \n"
"address INSPECTgetEnvironmentKey \n"
"comment \"Get the value of an environemnt variable\"; \n"
},
