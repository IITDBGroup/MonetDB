{ "batmtime",
"# This Source Code Form is subject to the terms of the Mozilla Public \n"
"# License, v. 2.0.  If a copy of the MPL was not distributed with this \n"
"# file, You can obtain one at http://mozilla.org/MPL/2.0/. \n"
"# \n"
"# Copyright 1997 - July 2008 CWI, August 2008 - 2019 MonetDB B.V. \n"
"# This file was generated by using the script batmtime.mal.sh. \n"
"module batcalc; \n"
"pattern <(b1:bat[:date],b2:bat[:date]) :bat[:bit] \n"
"address CMDbatLT \n"
"comment \"Return B1 < B2\"; \n"
"pattern <(b1:bat[:date],b2:bat[:date],s:bat[:oid]) :bat[:bit] \n"
"address CMDbatLT \n"
"comment \"Return B1 < B2 with candidates list\"; \n"
"pattern <(b:bat[:date],v:date) :bat[:bit] \n"
"address CMDbatLT \n"
"comment \"Return B < V\"; \n"
"pattern <(b:bat[:date],v:date,s:bat[:oid]) :bat[:bit] \n"
"address CMDbatLT \n"
"comment \"Return B < V with candidates list\"; \n"
"pattern <(v:date,b:bat[:date]) :bat[:bit] \n"
"address CMDbatLT \n"
"comment \"Return V < B\"; \n"
"pattern <(v:date,b:bat[:date],s:bat[:oid]) :bat[:bit] \n"
"address CMDbatLT \n"
"comment \"Return V < B with candidates list\"; \n"
"pattern <(b1:bat[:daytime],b2:bat[:daytime]) :bat[:bit] \n"
"address CMDbatLT \n"
"comment \"Return B1 < B2\"; \n"
"pattern <(b1:bat[:daytime],b2:bat[:daytime],s:bat[:oid]) :bat[:bit] \n"
"address CMDbatLT \n"
"comment \"Return B1 < B2 with candidates list\"; \n"
"pattern <(b:bat[:daytime],v:daytime) :bat[:bit] \n"
"address CMDbatLT \n"
"comment \"Return B < V\"; \n"
"pattern <(b:bat[:daytime],v:daytime,s:bat[:oid]) :bat[:bit] \n"
"address CMDbatLT \n"
"comment \"Return B < V with candidates list\"; \n"
"pattern <(v:daytime,b:bat[:daytime]) :bat[:bit] \n"
"address CMDbatLT \n"
"comment \"Return V < B\"; \n"
"pattern <(v:daytime,b:bat[:daytime],s:bat[:oid]) :bat[:bit] \n"
"address CMDbatLT \n"
"comment \"Return V < B with candidates list\"; \n"
"pattern <(b1:bat[:timestamp],b2:bat[:timestamp]) :bat[:bit] \n"
"address CMDbatLT \n"
"comment \"Return B1 < B2\"; \n"
"pattern <(b1:bat[:timestamp],b2:bat[:timestamp],s:bat[:oid]) :bat[:bit] \n"
"address CMDbatLT \n"
"comment \"Return B1 < B2 with candidates list\"; \n"
"pattern <(b:bat[:timestamp],v:timestamp) :bat[:bit] \n"
"address CMDbatLT \n"
"comment \"Return B < V\"; \n"
"pattern <(b:bat[:timestamp],v:timestamp,s:bat[:oid]) :bat[:bit] \n"
"address CMDbatLT \n"
"comment \"Return B < V with candidates list\"; \n"
"pattern <(v:timestamp,b:bat[:timestamp]) :bat[:bit] \n"
"address CMDbatLT \n"
"comment \"Return V < B\"; \n"
"pattern <(v:timestamp,b:bat[:timestamp],s:bat[:oid]) :bat[:bit] \n"
"address CMDbatLT \n"
"comment \"Return V < B with candidates list\"; \n"
"pattern <=(b1:bat[:date],b2:bat[:date]) :bat[:bit] \n"
"address CMDbatLE \n"
"comment \"Return B1 <= B2\"; \n"
"pattern <=(b1:bat[:date],b2:bat[:date],s:bat[:oid]) :bat[:bit] \n"
"address CMDbatLE \n"
"comment \"Return B1 <= B2 with candidates list\"; \n"
"pattern <=(b:bat[:date],v:date) :bat[:bit] \n"
"address CMDbatLE \n"
"comment \"Return B <= V\"; \n"
"pattern <=(b:bat[:date],v:date,s:bat[:oid]) :bat[:bit] \n"
"address CMDbatLE \n"
"comment \"Return B <= V with candidates list\"; \n"
"pattern <=(v:date,b:bat[:date]) :bat[:bit] \n"
"address CMDbatLE \n"
"comment \"Return V <= B\"; \n"
"pattern <=(v:date,b:bat[:date],s:bat[:oid]) :bat[:bit] \n"
"address CMDbatLE \n"
"comment \"Return V <= B with candidates list\"; \n"
"pattern <=(b1:bat[:daytime],b2:bat[:daytime]) :bat[:bit] \n"
"address CMDbatLE \n"
"comment \"Return B1 <= B2\"; \n"
"pattern <=(b1:bat[:daytime],b2:bat[:daytime],s:bat[:oid]) :bat[:bit] \n"
"address CMDbatLE \n"
"comment \"Return B1 <= B2 with candidates list\"; \n"
"pattern <=(b:bat[:daytime],v:daytime) :bat[:bit] \n"
"address CMDbatLE \n"
"comment \"Return B <= V\"; \n"
"pattern <=(b:bat[:daytime],v:daytime,s:bat[:oid]) :bat[:bit] \n"
"address CMDbatLE \n"
"comment \"Return B <= V with candidates list\"; \n"
"pattern <=(v:daytime,b:bat[:daytime]) :bat[:bit] \n"
"address CMDbatLE \n"
"comment \"Return V <= B\"; \n"
"pattern <=(v:daytime,b:bat[:daytime],s:bat[:oid]) :bat[:bit] \n"
"address CMDbatLE \n"
"comment \"Return V <= B with candidates list\"; \n"
"pattern <=(b1:bat[:timestamp],b2:bat[:timestamp]) :bat[:bit] \n"
"address CMDbatLE \n"
"comment \"Return B1 <= B2\"; \n"
"pattern <=(b1:bat[:timestamp],b2:bat[:timestamp],s:bat[:oid]) :bat[:bit] \n"
"address CMDbatLE \n"
"comment \"Return B1 <= B2 with candidates list\"; \n"
"pattern <=(b:bat[:timestamp],v:timestamp) :bat[:bit] \n"
"address CMDbatLE \n"
"comment \"Return B <= V\"; \n"
"pattern <=(b:bat[:timestamp],v:timestamp,s:bat[:oid]) :bat[:bit] \n"
"address CMDbatLE \n"
"comment \"Return B <= V with candidates list\"; \n"
"pattern <=(v:timestamp,b:bat[:timestamp]) :bat[:bit] \n"
"address CMDbatLE \n"
"comment \"Return V <= B\"; \n"
"pattern <=(v:timestamp,b:bat[:timestamp],s:bat[:oid]) :bat[:bit] \n"
"address CMDbatLE \n"
"comment \"Return V <= B with candidates list\"; \n"
"pattern >(b1:bat[:date],b2:bat[:date]) :bat[:bit] \n"
"address CMDbatGT \n"
"comment \"Return B1 > B2\"; \n"
"pattern >(b1:bat[:date],b2:bat[:date],s:bat[:oid]) :bat[:bit] \n"
"address CMDbatGT \n"
"comment \"Return B1 > B2 with candidates list\"; \n"
"pattern >(b:bat[:date],v:date) :bat[:bit] \n"
"address CMDbatGT \n"
"comment \"Return B > V\"; \n"
"pattern >(b:bat[:date],v:date,s:bat[:oid]) :bat[:bit] \n"
"address CMDbatGT \n"
"comment \"Return B > V with candidates list\"; \n"
"pattern >(v:date,b:bat[:date]) :bat[:bit] \n"
"address CMDbatGT \n"
"comment \"Return V > B\"; \n"
"pattern >(v:date,b:bat[:date],s:bat[:oid]) :bat[:bit] \n"
"address CMDbatGT \n"
"comment \"Return V > B with candidates list\"; \n"
"pattern >(b1:bat[:daytime],b2:bat[:daytime]) :bat[:bit] \n"
"address CMDbatGT \n"
"comment \"Return B1 > B2\"; \n"
"pattern >(b1:bat[:daytime],b2:bat[:daytime],s:bat[:oid]) :bat[:bit] \n"
"address CMDbatGT \n"
"comment \"Return B1 > B2 with candidates list\"; \n"
"pattern >(b:bat[:daytime],v:daytime) :bat[:bit] \n"
"address CMDbatGT \n"
"comment \"Return B > V\"; \n"
"pattern >(b:bat[:daytime],v:daytime,s:bat[:oid]) :bat[:bit] \n"
"address CMDbatGT \n"
"comment \"Return B > V with candidates list\"; \n"
"pattern >(v:daytime,b:bat[:daytime]) :bat[:bit] \n"
"address CMDbatGT \n"
"comment \"Return V > B\"; \n"
"pattern >(v:daytime,b:bat[:daytime],s:bat[:oid]) :bat[:bit] \n"
"address CMDbatGT \n"
"comment \"Return V > B with candidates list\"; \n"
"pattern >(b1:bat[:timestamp],b2:bat[:timestamp]) :bat[:bit] \n"
"address CMDbatGT \n"
"comment \"Return B1 > B2\"; \n"
"pattern >(b1:bat[:timestamp],b2:bat[:timestamp],s:bat[:oid]) :bat[:bit] \n"
"address CMDbatGT \n"
"comment \"Return B1 > B2 with candidates list\"; \n"
"pattern >(b:bat[:timestamp],v:timestamp) :bat[:bit] \n"
"address CMDbatGT \n"
"comment \"Return B > V\"; \n"
"pattern >(b:bat[:timestamp],v:timestamp,s:bat[:oid]) :bat[:bit] \n"
"address CMDbatGT \n"
"comment \"Return B > V with candidates list\"; \n"
"pattern >(v:timestamp,b:bat[:timestamp]) :bat[:bit] \n"
"address CMDbatGT \n"
"comment \"Return V > B\"; \n"
"pattern >(v:timestamp,b:bat[:timestamp],s:bat[:oid]) :bat[:bit] \n"
"address CMDbatGT \n"
"comment \"Return V > B with candidates list\"; \n"
"pattern >=(b1:bat[:date],b2:bat[:date]) :bat[:bit] \n"
"address CMDbatGE \n"
"comment \"Return B1 >= B2\"; \n"
"pattern >=(b1:bat[:date],b2:bat[:date],s:bat[:oid]) :bat[:bit] \n"
"address CMDbatGE \n"
"comment \"Return B1 >= B2 with candidates list\"; \n"
"pattern >=(b:bat[:date],v:date) :bat[:bit] \n"
"address CMDbatGE \n"
"comment \"Return B >= V\"; \n"
"pattern >=(b:bat[:date],v:date,s:bat[:oid]) :bat[:bit] \n"
"address CMDbatGE \n"
"comment \"Return B >= V with candidates list\"; \n"
"pattern >=(v:date,b:bat[:date]) :bat[:bit] \n"
"address CMDbatGE \n"
"comment \"Return V >= B\"; \n"
"pattern >=(v:date,b:bat[:date],s:bat[:oid]) :bat[:bit] \n"
"address CMDbatGE \n"
"comment \"Return V >= B with candidates list\"; \n"
"pattern >=(b1:bat[:daytime],b2:bat[:daytime]) :bat[:bit] \n"
"address CMDbatGE \n"
"comment \"Return B1 >= B2\"; \n"
"pattern >=(b1:bat[:daytime],b2:bat[:daytime],s:bat[:oid]) :bat[:bit] \n"
"address CMDbatGE \n"
"comment \"Return B1 >= B2 with candidates list\"; \n"
"pattern >=(b:bat[:daytime],v:daytime) :bat[:bit] \n"
"address CMDbatGE \n"
"comment \"Return B >= V\"; \n"
"pattern >=(b:bat[:daytime],v:daytime,s:bat[:oid]) :bat[:bit] \n"
"address CMDbatGE \n"
"comment \"Return B >= V with candidates list\"; \n"
"pattern >=(v:daytime,b:bat[:daytime]) :bat[:bit] \n"
"address CMDbatGE \n"
"comment \"Return V >= B\"; \n"
"pattern >=(v:daytime,b:bat[:daytime],s:bat[:oid]) :bat[:bit] \n"
"address CMDbatGE \n"
"comment \"Return V >= B with candidates list\"; \n"
"pattern >=(b1:bat[:timestamp],b2:bat[:timestamp]) :bat[:bit] \n"
"address CMDbatGE \n"
"comment \"Return B1 >= B2\"; \n"
"pattern >=(b1:bat[:timestamp],b2:bat[:timestamp],s:bat[:oid]) :bat[:bit] \n"
"address CMDbatGE \n"
"comment \"Return B1 >= B2 with candidates list\"; \n"
"pattern >=(b:bat[:timestamp],v:timestamp) :bat[:bit] \n"
"address CMDbatGE \n"
"comment \"Return B >= V\"; \n"
"pattern >=(b:bat[:timestamp],v:timestamp,s:bat[:oid]) :bat[:bit] \n"
"address CMDbatGE \n"
"comment \"Return B >= V with candidates list\"; \n"
"pattern >=(v:timestamp,b:bat[:timestamp]) :bat[:bit] \n"
"address CMDbatGE \n"
"comment \"Return V >= B\"; \n"
"pattern >=(v:timestamp,b:bat[:timestamp],s:bat[:oid]) :bat[:bit] \n"
"address CMDbatGE \n"
"comment \"Return V >= B with candidates list\"; \n"
"pattern ==(b1:bat[:date],b2:bat[:date]) :bat[:bit] \n"
"address CMDbatEQ \n"
"comment \"Return B1 == B2\"; \n"
"pattern ==(b1:bat[:date],b2:bat[:date],s:bat[:oid]) :bat[:bit] \n"
"address CMDbatEQ \n"
"comment \"Return B1 == B2 with candidates list\"; \n"
"pattern ==(b:bat[:date],v:date) :bat[:bit] \n"
"address CMDbatEQ \n"
"comment \"Return B == V\"; \n"
"pattern ==(b:bat[:date],v:date,s:bat[:oid]) :bat[:bit] \n"
"address CMDbatEQ \n"
"comment \"Return B == V with candidates list\"; \n"
"pattern ==(v:date,b:bat[:date]) :bat[:bit] \n"
"address CMDbatEQ \n"
"comment \"Return V == B\"; \n"
"pattern ==(v:date,b:bat[:date],s:bat[:oid]) :bat[:bit] \n"
"address CMDbatEQ \n"
"comment \"Return V == B with candidates list\"; \n"
"pattern ==(b1:bat[:daytime],b2:bat[:daytime]) :bat[:bit] \n"
"address CMDbatEQ \n"
"comment \"Return B1 == B2\"; \n"
"pattern ==(b1:bat[:daytime],b2:bat[:daytime],s:bat[:oid]) :bat[:bit] \n"
"address CMDbatEQ \n"
"comment \"Return B1 == B2 with candidates list\"; \n"
"pattern ==(b:bat[:daytime],v:daytime) :bat[:bit] \n"
"address CMDbatEQ \n"
"comment \"Return B == V\"; \n"
"pattern ==(b:bat[:daytime],v:daytime,s:bat[:oid]) :bat[:bit] \n"
"address CMDbatEQ \n"
"comment \"Return B == V with candidates list\"; \n"
"pattern ==(v:daytime,b:bat[:daytime]) :bat[:bit] \n"
"address CMDbatEQ \n"
"comment \"Return V == B\"; \n"
"pattern ==(v:daytime,b:bat[:daytime],s:bat[:oid]) :bat[:bit] \n"
"address CMDbatEQ \n"
"comment \"Return V == B with candidates list\"; \n"
"pattern ==(b1:bat[:timestamp],b2:bat[:timestamp]) :bat[:bit] \n"
"address CMDbatEQ \n"
"comment \"Return B1 == B2\"; \n"
"pattern ==(b1:bat[:timestamp],b2:bat[:timestamp],s:bat[:oid]) :bat[:bit] \n"
"address CMDbatEQ \n"
"comment \"Return B1 == B2 with candidates list\"; \n"
"pattern ==(b:bat[:timestamp],v:timestamp) :bat[:bit] \n"
"address CMDbatEQ \n"
"comment \"Return B == V\"; \n"
"pattern ==(b:bat[:timestamp],v:timestamp,s:bat[:oid]) :bat[:bit] \n"
"address CMDbatEQ \n"
"comment \"Return B == V with candidates list\"; \n"
"pattern ==(v:timestamp,b:bat[:timestamp]) :bat[:bit] \n"
"address CMDbatEQ \n"
"comment \"Return V == B\"; \n"
"pattern ==(v:timestamp,b:bat[:timestamp],s:bat[:oid]) :bat[:bit] \n"
"address CMDbatEQ \n"
"comment \"Return V == B with candidates list\"; \n"
"pattern ==(b1:bat[:date],b2:bat[:date],nil_matches:bit) :bat[:bit] \n"
"address CMDbatEQ \n"
"comment \"Return B1 == B2\"; \n"
"pattern ==(b1:bat[:date],b2:bat[:date],s:bat[:oid],nil_matches:bit) :bat[:bit] \n"
"address CMDbatEQ \n"
"comment \"Return B1 == B2 with candidates list\"; \n"
"pattern ==(b:bat[:date],v:date,nil_matches:bit) :bat[:bit] \n"
"address CMDbatEQ \n"
"comment \"Return B == V\"; \n"
"pattern ==(b:bat[:date],v:date,s:bat[:oid],nil_matches:bit) :bat[:bit] \n"
"address CMDbatEQ \n"
"comment \"Return B == V with candidates list\"; \n"
"pattern ==(v:date,b:bat[:date],nil_matches:bit) :bat[:bit] \n"
"address CMDbatEQ \n"
"comment \"Return V == B\"; \n"
"pattern ==(v:date,b:bat[:date],s:bat[:oid],nil_matches:bit) :bat[:bit] \n"
"address CMDbatEQ \n"
"comment \"Return V == B with candidates list\"; \n"
"pattern ==(b1:bat[:daytime],b2:bat[:daytime],nil_matches:bit) :bat[:bit] \n"
"address CMDbatEQ \n"
"comment \"Return B1 == B2\"; \n"
"pattern ==(b1:bat[:daytime],b2:bat[:daytime],s:bat[:oid],nil_matches:bit) :bat[:bit] \n"
"address CMDbatEQ \n"
"comment \"Return B1 == B2 with candidates list\"; \n"
"pattern ==(b:bat[:daytime],v:daytime,nil_matches:bit) :bat[:bit] \n"
"address CMDbatEQ \n"
"comment \"Return B == V\"; \n"
"pattern ==(b:bat[:daytime],v:daytime,s:bat[:oid],nil_matches:bit) :bat[:bit] \n"
"address CMDbatEQ \n"
"comment \"Return B == V with candidates list\"; \n"
"pattern ==(v:daytime,b:bat[:daytime],nil_matches:bit) :bat[:bit] \n"
"address CMDbatEQ \n"
"comment \"Return V == B\"; \n"
"pattern ==(v:daytime,b:bat[:daytime],s:bat[:oid],nil_matches:bit) :bat[:bit] \n"
"address CMDbatEQ \n"
"comment \"Return V == B with candidates list\"; \n"
"pattern ==(b1:bat[:timestamp],b2:bat[:timestamp],nil_matches:bit) :bat[:bit] \n"
"address CMDbatEQ \n"
"comment \"Return B1 == B2\"; \n"
"pattern ==(b1:bat[:timestamp],b2:bat[:timestamp],s:bat[:oid],nil_matches:bit) :bat[:bit] \n"
"address CMDbatEQ \n"
"comment \"Return B1 == B2 with candidates list\"; \n"
"pattern ==(b:bat[:timestamp],v:timestamp,nil_matches:bit) :bat[:bit] \n"
"address CMDbatEQ \n"
"comment \"Return B == V\"; \n"
"pattern ==(b:bat[:timestamp],v:timestamp,s:bat[:oid],nil_matches:bit) :bat[:bit] \n"
"address CMDbatEQ \n"
"comment \"Return B == V with candidates list\"; \n"
"pattern ==(v:timestamp,b:bat[:timestamp],nil_matches:bit) :bat[:bit] \n"
"address CMDbatEQ \n"
"comment \"Return V == B\"; \n"
"pattern ==(v:timestamp,b:bat[:timestamp],s:bat[:oid],nil_matches:bit) :bat[:bit] \n"
"address CMDbatEQ \n"
"comment \"Return V == B with candidates list\"; \n"
"pattern !=(b1:bat[:date],b2:bat[:date]) :bat[:bit] \n"
"address CMDbatNE \n"
"comment \"Return B1 != B2\"; \n"
"pattern !=(b1:bat[:date],b2:bat[:date],s:bat[:oid]) :bat[:bit] \n"
"address CMDbatNE \n"
"comment \"Return B1 != B2 with candidates list\"; \n"
"pattern !=(b:bat[:date],v:date) :bat[:bit] \n"
"address CMDbatNE \n"
"comment \"Return B != V\"; \n"
"pattern !=(b:bat[:date],v:date,s:bat[:oid]) :bat[:bit] \n"
"address CMDbatNE \n"
"comment \"Return B != V with candidates list\"; \n"
"pattern !=(v:date,b:bat[:date]) :bat[:bit] \n"
"address CMDbatNE \n"
"comment \"Return V != B\"; \n"
"pattern !=(v:date,b:bat[:date],s:bat[:oid]) :bat[:bit] \n"
"address CMDbatNE \n"
"comment \"Return V != B with candidates list\"; \n"
"pattern !=(b1:bat[:daytime],b2:bat[:daytime]) :bat[:bit] \n"
"address CMDbatNE \n"
"comment \"Return B1 != B2\"; \n"
"pattern !=(b1:bat[:daytime],b2:bat[:daytime],s:bat[:oid]) :bat[:bit] \n"
"address CMDbatNE \n"
"comment \"Return B1 != B2 with candidates list\"; \n"
"pattern !=(b:bat[:daytime],v:daytime) :bat[:bit] \n"
"address CMDbatNE \n"
"comment \"Return B != V\"; \n"
"pattern !=(b:bat[:daytime],v:daytime,s:bat[:oid]) :bat[:bit] \n"
"address CMDbatNE \n"
"comment \"Return B != V with candidates list\"; \n"
"pattern !=(v:daytime,b:bat[:daytime]) :bat[:bit] \n"
"address CMDbatNE \n"
"comment \"Return V != B\"; \n"
"pattern !=(v:daytime,b:bat[:daytime],s:bat[:oid]) :bat[:bit] \n"
"address CMDbatNE \n"
"comment \"Return V != B with candidates list\"; \n"
"pattern !=(b1:bat[:timestamp],b2:bat[:timestamp]) :bat[:bit] \n"
"address CMDbatNE \n"
"comment \"Return B1 != B2\"; \n"
"pattern !=(b1:bat[:timestamp],b2:bat[:timestamp],s:bat[:oid]) :bat[:bit] \n"
"address CMDbatNE \n"
"comment \"Return B1 != B2 with candidates list\"; \n"
"pattern !=(b:bat[:timestamp],v:timestamp) :bat[:bit] \n"
"address CMDbatNE \n"
"comment \"Return B != V\"; \n"
"pattern !=(b:bat[:timestamp],v:timestamp,s:bat[:oid]) :bat[:bit] \n"
"address CMDbatNE \n"
"comment \"Return B != V with candidates list\"; \n"
"pattern !=(v:timestamp,b:bat[:timestamp]) :bat[:bit] \n"
"address CMDbatNE \n"
"comment \"Return V != B\"; \n"
"pattern !=(v:timestamp,b:bat[:timestamp],s:bat[:oid]) :bat[:bit] \n"
"address CMDbatNE \n"
"comment \"Return V != B with candidates list\"; \n"
"pattern !=(b1:bat[:date],b2:bat[:date],nil_matches:bit) :bat[:bit] \n"
"address CMDbatNE \n"
"comment \"Return B1 != B2\"; \n"
"pattern !=(b1:bat[:date],b2:bat[:date],s:bat[:oid],nil_matches:bit) :bat[:bit] \n"
"address CMDbatNE \n"
"comment \"Return B1 != B2 with candidates list\"; \n"
"pattern !=(b:bat[:date],v:date,nil_matches:bit) :bat[:bit] \n"
"address CMDbatNE \n"
"comment \"Return B != V\"; \n"
"pattern !=(b:bat[:date],v:date,s:bat[:oid],nil_matches:bit) :bat[:bit] \n"
"address CMDbatNE \n"
"comment \"Return B != V with candidates list\"; \n"
"pattern !=(v:date,b:bat[:date],nil_matches:bit) :bat[:bit] \n"
"address CMDbatNE \n"
"comment \"Return V != B\"; \n"
"pattern !=(v:date,b:bat[:date],s:bat[:oid],nil_matches:bit) :bat[:bit] \n"
"address CMDbatNE \n"
"comment \"Return V != B with candidates list\"; \n"
"pattern !=(b1:bat[:daytime],b2:bat[:daytime],nil_matches:bit) :bat[:bit] \n"
"address CMDbatNE \n"
"comment \"Return B1 != B2\"; \n"
"pattern !=(b1:bat[:daytime],b2:bat[:daytime],s:bat[:oid],nil_matches:bit) :bat[:bit] \n"
"address CMDbatNE \n"
"comment \"Return B1 != B2 with candidates list\"; \n"
"pattern !=(b:bat[:daytime],v:daytime,nil_matches:bit) :bat[:bit] \n"
"address CMDbatNE \n"
"comment \"Return B != V\"; \n"
"pattern !=(b:bat[:daytime],v:daytime,s:bat[:oid],nil_matches:bit) :bat[:bit] \n"
"address CMDbatNE \n"
"comment \"Return B != V with candidates list\"; \n"
"pattern !=(v:daytime,b:bat[:daytime],nil_matches:bit) :bat[:bit] \n"
"address CMDbatNE \n"
"comment \"Return V != B\"; \n"
"pattern !=(v:daytime,b:bat[:daytime],s:bat[:oid],nil_matches:bit) :bat[:bit] \n"
"address CMDbatNE \n"
"comment \"Return V != B with candidates list\"; \n"
"pattern !=(b1:bat[:timestamp],b2:bat[:timestamp],nil_matches:bit) :bat[:bit] \n"
"address CMDbatNE \n"
"comment \"Return B1 != B2\"; \n"
"pattern !=(b1:bat[:timestamp],b2:bat[:timestamp],s:bat[:oid],nil_matches:bit) :bat[:bit] \n"
"address CMDbatNE \n"
"comment \"Return B1 != B2 with candidates list\"; \n"
"pattern !=(b:bat[:timestamp],v:timestamp,nil_matches:bit) :bat[:bit] \n"
"address CMDbatNE \n"
"comment \"Return B != V\"; \n"
"pattern !=(b:bat[:timestamp],v:timestamp,s:bat[:oid],nil_matches:bit) :bat[:bit] \n"
"address CMDbatNE \n"
"comment \"Return B != V with candidates list\"; \n"
"pattern !=(v:timestamp,b:bat[:timestamp],nil_matches:bit) :bat[:bit] \n"
"address CMDbatNE \n"
"comment \"Return V != B\"; \n"
"pattern !=(v:timestamp,b:bat[:timestamp],s:bat[:oid],nil_matches:bit) :bat[:bit] \n"
"address CMDbatNE \n"
"comment \"Return V != B with candidates list\"; \n"
"module batmtime; \n"
"command diff(b1:bat[:date],b2:bat[:date]) :bat[:int] \n"
"address MTIMEdate_diff_bulk \n"
"comment \"Difference of two sets of date.\"; \n"
"command diff(b1:bat[:timestamp],b2:bat[:timestamp]) :bat[:lng] \n"
"address MTIMEtimestamp_diff_bulk \n"
"comment \"Difference of two sets of timestamp.\"; \n"
},
