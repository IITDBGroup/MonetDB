{ "batExtensions",
"# This Source Code Form is subject to the terms of the Mozilla Public \n"
"# License, v. 2.0.  If a copy of the MPL was not distributed with this \n"
"# file, You can obtain one at http://mozilla.org/MPL/2.0/. \n"
"# \n"
"# Copyright 1997 - July 2008 CWI, August 2008 - 2019 MonetDB B.V. \n"
"pattern bat.new(tt:any_1) :bat[:any_1] \n"
"address CMDBATnew; \n"
"pattern bat.new(tt:any_1, size:int) :bat[:any_1] \n"
"address CMDBATnew; \n"
"pattern bat.new(tt:any_1, size:lng, persist:bit) :bat[:any_1] \n"
"address CMDBATnew; \n"
"pattern bat.new(tt:any_1, size:int, persist:bit) :bat[:any_1] \n"
"address CMDBATnew; \n"
"pattern bat.new(tt:any_1, size:lng) :bat[:any_1] \n"
"address CMDBATnew \n"
"comment \"Creates a new empty transient BAT, with tail-types as indicated.\"; \n"
"pattern bat.single(val:any_1):bat[:any_1] \n"
"address CMDBATsingle \n"
"comment \"Create a BAT with a single elemenet\"; \n"
"pattern bat.partition(b:bat[:any_1]):bat[:any_1]... \n"
"address CMDBATpartition \n"
"comment \"Create a serie of slices over the BAT argument. The BUNs are distributed evenly.\"; \n"
"pattern bat.partition(b:bat[:any_1], pieces:int, n:int):bat[:any_1] \n"
"address CMDBATpartition2 \n"
"comment \"Create the n-th slice over the BAT broken into several pieces.\"; \n"
"command bat.imprints(b:bat[:bte]) :void \n"
"address CMDBATimprints; \n"
"command bat.imprints(b:bat[:sht]) :void \n"
"address CMDBATimprints; \n"
"command bat.imprints(b:bat[:int]) :void \n"
"address CMDBATimprints; \n"
"command bat.imprints(b:bat[:lng]) :void \n"
"address CMDBATimprints; \n"
"command bat.imprints(b:bat[:flt]) :void \n"
"address CMDBATimprints; \n"
"command bat.imprints(b:bat[:dbl]) :void \n"
"address CMDBATimprints \n"
"comment \"Check for existence or create an imprint index on the BAT.\"; \n"
"command bat.imprintsize(b:bat[:bte]):lng \n"
"address CMDBATimprintsize; \n"
"command bat.imprintsize(b:bat[:sht]):lng \n"
"address CMDBATimprintsize; \n"
"command bat.imprintsize(b:bat[:int]):lng \n"
"address CMDBATimprintsize; \n"
"command bat.imprintsize(b:bat[:lng]):lng \n"
"address CMDBATimprintsize; \n"
"command bat.imprintsize(b:bat[:flt]):lng \n"
"address CMDBATimprintsize; \n"
"command bat.imprintsize(b:bat[:dbl]):lng \n"
"address CMDBATimprintsize \n"
"comment \"Return the storage size of the imprints index structure.\"; \n"
},
