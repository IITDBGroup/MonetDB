{ "txtsim",
"# This Source Code Form is subject to the terms of the Mozilla Public \n"
"# License, v. 2.0.  If a copy of the MPL was not distributed with this \n"
"# file, You can obtain one at http://mozilla.org/MPL/2.0/. \n"
"# \n"
"# Copyright 1997 - July 2008 CWI, August 2008 - 2019 MonetDB B.V. \n"
"module txtsim; \n"
"command levenshtein(s:str, t:str, insdel_cost:int, replace_cost:int, transpose_cost:int) : int \n"
"address levenshtein_impl \n"
"comment \"Calculates Levenshtein distance (edit distance) between two strings, variable operation costs (ins/del, replacement, transposition)\"; \n"
"command levenshtein(s:str, t:str) : int \n"
"address levenshteinbasic_impl \n"
"comment \"Calculates Levenshtein distance (edit distance) between two strings\"; \n"
"command editdistance(s:str, t:str) : int \n"
"address levenshteinbasic_impl \n"
"comment \"Alias for Levenshtein(str,str)\"; \n"
"command editdistance2(s:str, t:str) : int \n"
"address levenshteinbasic2_impl \n"
"comment \"Calculates Levenshtein distance (edit distance) between two strings. Cost of transposition is 1 instead of 2\"; \n"
"command similarity(string1:str, string2:str, minimum:dbl) : dbl \n"
"address fstrcmp_impl \n"
"comment \"Normalized edit distance between two strings\"; \n"
"command similarity(string1:str, string2:str) : dbl \n"
"address fstrcmp0_impl \n"
"comment \"Normalized edit distance between two strings\"; \n"
"command soundex(name:str) : str \n"
"address soundex_impl \n"
"comment \"Soundex function for phonetic matching\"; \n"
"command stringdiff(s1:str, s2:str) :int \n"
"address stringdiff_impl \n"
"comment \"calculate the soundexed editdistance\"; \n"
"command qgramnormalize(input:str): str \n"
"address CMDqgramnormalize \n"
"comment \"'Normalizes' strings (eg. toUpper and replaces non-alphanumerics with one space\"; \n"
"command qgramselfjoin(qgram:bat[ :oid], id:bat[ :oid], pos:bat[ :int], len:bat[ :int], c:flt, k:int) (:bat[:int],:bat[ :int]) \n"
"address CMDqgramselfjoin \n"
"comment \"QGram self-join on ordered(!) qgram tables and sub-ordered q-gram positions\"; \n"
"command txtsim.str2qgrams(s:str):bat[:str] \n"
"address CMDstr2qgrams \n"
"comment \"Break the string into 4-grams\"; \n"
},
