{ "bbp",
"# This Source Code Form is subject to the terms of the Mozilla Public \n"
"# License, v. 2.0.  If a copy of the MPL was not distributed with this \n"
"# file, You can obtain one at http://mozilla.org/MPL/2.0/. \n"
"# \n"
"# Copyright 1997 - July 2008 CWI, August 2008 - 2019 MonetDB B.V. \n"
"module bbp; \n"
"pattern bind(name:str):bat[:any_2] \n"
"address CMDbbpbind \n"
"comment \"Locate the BAT using its logical name\"; \n"
"command getIndex(b:bat[:any_2]):int \n"
"address CMDbbpgetIndex \n"
"comment \"Retrieve the index in the BBP\"; \n"
"command getNames() :bat[:str] 	 \n"
"address CMDbbpNames \n"
"comment \"Map BAT into its bbp name\"; \n"
"command get() (id:bat[:int],  \n"
"			ns:bat[:str], \n"
"	       tt:bat[:str], \n"
"	       cnt:bat[:lng], refcnt:bat[:int], \n"
"	       lrefcnt:bat[:int], location:bat[:str], \n"
"	       heat:bat[:int], dirty:bat[:str], \n"
"	       status:bat[:str], kind:bat[:str]) \n"
"address CMDbbp \n"
"comment \"bpp\"; \n"
"command getName( b:bat[:any_1]):str \n"
"address CMDbbpName \n"
"comment \"Map a BAT into its internal name\"; \n"
"command setName( b:bat[:any_1], n:str):str \n"
"address CMDsetName \n"
"comment \"Rename a BAT\"; \n"
"command getCount() :bat[:lng] 	 \n"
"address CMDbbpCount \n"
"comment \"Create a BAT with the cardinalities of all known BATs\"; \n"
"command getRefCount() :bat[:int] 	 \n"
"address CMDbbpRefCount \n"
"comment \"Create a BAT with the (hard) reference counts\"; \n"
"command getLRefCount() :bat[:int] 	 \n"
"address CMDbbpLRefCount \n"
"comment \"Create a BAT with the logical reference counts\"; \n"
"command getLocation() :bat[:str] 	 \n"
"address CMDbbpLocation \n"
"comment \"Create a BAT with their disk locations\"; \n"
"command getDirty() :bat[:str] 	 \n"
"address CMDbbpDirty \n"
"comment \"Create a BAT with the dirty/ diffs/clean status\"; \n"
"command getStatus() :bat[:str] 	 \n"
"address CMDbbpStatus \n"
"comment \"Create a BAT with the disk/load status\"; \n"
"command getKind():bat[:str]  \n"
"address CMDbbpKind \n"
"comment \"Create a BAT with the persistency status\"; \n"
"command getRefCount(b:bat[:any_1]) :int \n"
"address CMDgetBATrefcnt \n"
"comment \"Utility for debugging MAL interpreter\"; \n"
"command getLRefCount(b:bat[:any_1]) :int \n"
"address CMDgetBATlrefcnt \n"
"comment \"Utility for debugging MAL interpreter\"; \n"
"command getDiskSpace() :lng \n"
"address CMDbbpDiskSpace \n"
"comment \"Estimate the amount of disk space occupied by dbpath\"; \n"
"command getPageSize():int \n"
"address CMDgetPageSize \n"
"comment \"Obtain the memory page size\"; \n"
},
