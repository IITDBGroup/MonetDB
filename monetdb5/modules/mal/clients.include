{ "clients",
"# This Source Code Form is subject to the terms of the Mozilla Public \n"
"# License, v. 2.0.  If a copy of the MPL was not distributed with this \n"
"# file, You can obtain one at http://mozilla.org/MPL/2.0/. \n"
"# \n"
"# Copyright 1997 - July 2008 CWI, August 2008 - 2019 MonetDB B.V. \n"
"module clients; \n"
"pattern setListing(flag:int):int \n"
"address CLTsetListing \n"
"comment \"Turn on/off echo of MAL instructions: \n"
"	1 - echo input, \n"
"	2 - show mal instruction, \n"
"	4 - show details of type resolutoin,  \n"
"	8 - show binding information.\"; \n"
"pattern getId():int \n"
"address CLTgetClientId \n"
"comment \"Return a number that uniquely represents the current client.\"; \n"
"pattern getInfo( )(:bat[:str],:bat[:str]) \n"
"address CLTInfo \n"
"comment \"Pseudo bat with client attributes.\"; \n"
"pattern getScenario():str  \n"
"address CLTgetScenario \n"
"comment \"Retrieve current scenario name.\"; \n"
"pattern setScenario(msg:str):str  \n"
"address CLTsetScenario \n"
"comment \"Switch to other scenario handler, return previous one.\"; \n"
"pattern quit():void \n"
"address CLTquit \n"
"comment \"Terminate the client session.\"; \n"
"pattern quit(idx:int):void \n"
"address CLTquit \n"
"comment \"Terminate the session for a single client using a soft error. \n"
"It is the privilige of the console user.\"; \n"
"command getLogins( )(user:bat[:oid],start:bat[:str] ) \n"
"address CLTLogin \n"
"comment \"Pseudo bat of client id and login time.\"; \n"
"command getLastCommand( ):bat[:str]  \n"
"address CLTLastCommand \n"
"comment \"Pseudo bat of client's last command time.\"; \n"
"command getActions( ):bat[:int]  \n"
"address CLTActions \n"
"comment \"Pseudo bat of client's command counts.\"; \n"
"command getUsers( ):bat[:str]  \n"
"address CLTusers \n"
"comment \"Pseudo bat of users id and name.\"; \n"
"pattern stop(id:int) \n"
"address CLTstop \n"
"comment \"Stop the query execution at the next eligble statement.\"; \n"
"pattern suspend(id:int):void \n"
"address CLTsuspend \n"
"comment \"Put a client process to sleep for some time. \n"
"It will simple sleep for a second at a time, until \n"
"the awake bit has been set in its descriptor\"; \n"
"command wakeup(id:int):void \n"
"address CLTwakeup \n"
"comment \"Wakeup a client process\"; \n"
"pattern setsession(n:lng):void \n"
"address CLTsetSessionTimeout \n"
"comment \"Abort a session after  n seconds.\"; \n"
"pattern settimeout(n:lng):void \n"
"address CLTsetTimeout \n"
"comment \"Abort a query after  n seconds.\"; \n"
"pattern settimeout(q:lng,s:lng):void \n"
"address CLTsetTimeout \n"
"comment \"Abort a query after q seconds (q=0 means run undisturbed). \n"
"The session timeout aborts the connection after spending too \n"
"many seconds on query processing.\"; \n"
"pattern getTimeout()(q:lng,s:lng) \n"
"address CLTgetTimeout \n"
"comment \"A query is aborted after q milliseconds (q=0 means run undisturbed). \n"
"The session timeout aborts the connection after spending too \n"
"many seconds on query processing.\"; \n"
"pattern shutdown(delay:int):str \n"
"address CLTshutdown; \n"
"pattern shutdown(delay:int, forced:bit):str \n"
"address CLTshutdown \n"
"comment \"Close all other client connections. Return if it succeeds. \n"
"If forced is set then always stop the system the hard way\"; \n"
"command md5sum(pw:str):str \n"
"address CLTmd5sum \n"
"comment \"Return hex string representation of the MD5 hash of the given string\"; \n"
"command sha1sum(pw:str):str \n"
"address CLTsha1sum \n"
"comment \"Return hex string representation of the SHA-1 hash of the given string\"; \n"
"command sha2sum(pw:str, bits:int):str \n"
"address CLTsha2sum \n"
"comment \"Return hex string representation of the SHA-2 hash with bits of the given string\"; \n"
"command ripemd160sum(pw:str):str \n"
"address CLTripemd160sum \n"
"comment \"Return hex string representation of the RIPEMD160 hash of the given string\"; \n"
"command backendsum(pw:str):str \n"
"address CLTbackendsum \n"
"comment \"Return hex string representation of the currently used hash of the given string\"; \n"
"pattern addUser(nme:str, pw:str):oid \n"
"address CLTaddUser \n"
"comment \"Allow user with password access to the given scenarios\"; \n"
"pattern removeUser(nme:str):void \n"
"address CLTremoveUser \n"
"comment \"Remove the given user from the system\"; \n"
"pattern getUsername():str \n"
"address CLTgetUsername \n"
"comment \"Return the username of the currently logged in user\"; \n"
"pattern getPasswordHash(user:str):str \n"
"address CLTgetPasswordHash \n"
"comment \"Return the password hash of the given user\"; \n"
"pattern changeUsername(old:str, new:str):void \n"
"address CLTchangeUsername \n"
"comment \"Change the username of the user into the new string\"; \n"
"pattern changePassword(old:str, new:str):void \n"
"address CLTchangePassword \n"
"comment \"Change the password for the current user\"; \n"
"pattern setPassword(user:str, pass:str):void \n"
"address CLTsetPassword \n"
"comment \"Set the password for the given user\"; \n"
"pattern checkPermission(usr:str, pw:str):void \n"
"address CLTcheckPermission \n"
"comment \"Check permission for a user, requires hashed password (backendsum)\"; \n"
"pattern getUsers()(:bat[:oid],:bat[:str]) \n"
"address CLTgetUsers \n"
"comment \"return a BAT with user id and one with name available in the system\"; \n"
},
