{ "remote",
"# This Source Code Form is subject to the terms of the Mozilla Public \n"
"# License, v. 2.0.  If a copy of the MPL was not distributed with this \n"
"# file, You can obtain one at http://mozilla.org/MPL/2.0/. \n"
"# \n"
"# Copyright 1997 - July 2008 CWI, August 2008 - 2019 MonetDB B.V. \n"
"module remote; \n"
"command prelude():void \n"
"address RMTprelude \n"
"comment \"initialise the remote module\"; \n"
"command epilogue():void \n"
"address RMTepilogue \n"
"comment \"release the resources held by the remote module\"; \n"
"command resolve(pattern:str):bat[:str] \n"
"address RMTresolve \n"
"comment \"resolve a pattern against Merovingian and return the URIs\"; \n"
"command connect(uri:str, user:str, passwd:str):str \n"
"address RMTconnect \n"
"comment \"returns a newly created connection for uri, using user name and password\"; \n"
"command connect(uri:str, user:str, passwd:str, scen:str):str \n"
"address RMTconnectScen \n"
"comment \"returns a newly created connection for uri, using user name, password and scenario\"; \n"
"pattern connect(table:str, schen:str):str \n"
"address RMTconnectTable \n"
"comment \"return a newly created connection for a table. username and password should be in the vault\" \n"
"command disconnect(conn:str):void \n"
"address RMTdisconnect \n"
"comment \"disconnects the connection pointed to by handle (received from a call to connect()\"; \n"
"pattern get(conn:str, ident:str):any \n"
"address RMTget \n"
"comment \"retrieves a copy of remote object ident\"; \n"
"pattern put(conn:str, object:any):str \n"
"address RMTput \n"
"comment \"copies object to the remote site and returns its identifier\"; \n"
"pattern register(conn:str, mod:str, fcn:str):void \n"
"address RMTregister \n"
"comment \"register <mod>.<fcn> at the remote site\"; \n"
"pattern exec(conn:str, mod:str, func:str):str \n"
"address RMTexec \n"
"comment \"remotely executes <mod>.<func> and returns the handle to its result\"; \n"
"pattern exec(conn:str, mod:str, func:str):str... \n"
"address RMTexec \n"
"comment \"remotely executes <mod>.<func> and returns the handle to its result\"; \n"
"pattern exec(conn:str, mod:str, func:str, :str...):str \n"
"address RMTexec \n"
"comment \"remotely executes <mod>.<func> using the argument list of remote objects and returns the handle to its result\"; \n"
"pattern exec(conn:str, mod:str, func:str, :str...):str... \n"
"address RMTexec \n"
"comment \"remotely executes <mod>.<func> using the argument list of remote objects and returns the handle to its result\"; \n"
"command isalive(conn:str):int \n"
"address RMTisalive \n"
"comment \"check if conn is still valid and connected\"; \n"
"pattern batload(tt:any_1, size:int):bat[:any_1] \n"
"address RMTbatload \n"
"comment \"create a BAT of the given type and size, and load values from the input stream\"; \n"
"pattern batbincopy(b:bat[:any]):void \n"
"address RMTbincopyto \n"
"comment \"dump BAT b in binary form to the stream\"; \n"
"pattern batbincopy():bat[:any] \n"
"address RMTbincopyfrom \n"
"comment \"store the binary BAT data in the BBP and return as BAT\"; \n"
"pattern bintype():void \n"
"address RMTbintype \n"
"comment \"print the binary type of this mserver5\"; \n"
"command register_supervisor(sup_uuid:str, query_uuid:str):int \n"
"address RMTregisterSupervisor \n"
"comment \"Register the supervisor uuid at a remote site\"; \n"
"remote.prelude(); \n"
},
