{ "mdb",
"# This Source Code Form is subject to the terms of the Mozilla Public \n"
"# License, v. 2.0.  If a copy of the MPL was not distributed with this \n"
"# file, You can obtain one at http://mozilla.org/MPL/2.0/. \n"
"# \n"
"# Copyright 1997 - July 2008 CWI, August 2008 - 2019 MonetDB B.V. \n"
"module mdb; \n"
"pattern start():void  \n"
"address MDBstart \n"
"comment \"Start interactive debugger\"; \n"
"pattern start(clientid:int):void  \n"
"address MDBstart \n"
"comment \"Start interactive debugger on a client\"; \n"
"pattern start(mod:str,fcn:str):void  \n"
"address MDBstartFactory \n"
"comment \"Start interactive debugger on a running factory\"; \n"
"pattern stop():void \n"
"address MDBstop \n"
"comment \"Stop the interactive debugger\"; \n"
"pattern inspect(mod:str,fcn:str):void \n"
"address MDBinspect \n"
"comment \"Run the debugger on a specific function\"; \n"
"command modules():bat[:str]  \n"
"address CMDmodules \n"
"comment \"List available modules\"; \n"
"pattern setTrace(b:bit):void \n"
"address MDBsetTrace \n"
"comment \"Turn on/off tracing of current routine\"; \n"
"pattern setTrace(b:str):void \n"
"address MDBsetVarTrace \n"
"comment \"Turn on/off tracing of a variable \"; \n"
"pattern setCatch(b:bit):void \n"
"address MDBsetCatch \n"
"comment \"Turn on/off catching exceptions\"; \n"
"command getDebug():int \n"
"address MDBgetDebug \n"
"comment \"Get the kernel debugging bit-set. \n"
"See the MonetDB configuration file for details\"; \n"
"command setDebug(flg:str):int \n"
"address MDBsetDebugStr \n"
"comment \"Set the kernel debugging bit-set and return its previous value. \n"
"The recognized options are: threads, memory, properties, \n"
"io, transactions, modules, algorithms, estimates.\"; \n"
"command setDebug(flg:int):int \n"
"address MDBsetDebug \n"
"comment \"Set the kernel debugging bit-set and return its previous value.\"; \n"
"command getException(s:str):str \n"
"address MDBgetExceptionVariable \n"
"comment \"Extract the variable name from the exception message\"; \n"
"command getReason(s:str):str \n"
"address MDBgetExceptionReason \n"
"comment \"Extract the reason from the exception message\"; \n"
"command getContext(s:str):str \n"
"address MDBgetExceptionContext \n"
"comment \"Extract the context string from the exception message\"; \n"
"pattern list():void \n"
"address MDBlist \n"
"comment \"Dump the current routine on standard out.\"; \n"
"pattern listMapi():void \n"
"address MDBlistMapi \n"
"comment \"Dump the current routine on standard out with Mapi prefix.\"; \n"
"pattern list(M:str,F:str):void \n"
"address MDBlist3 \n"
"comment \"Dump the routine M.F on standard out.\"; \n"
"pattern List():void  \n"
"address MDBlistDetail \n"
"comment \"Dump the current routine on standard out.\"; \n"
"pattern List(M:str,F:str):void  \n"
"address MDBlist3Detail \n"
"comment \"Dump the routine M.F on standard out.\"; \n"
"pattern var():void  \n"
"address MDBvar \n"
"comment \"Dump the symboltable of current routine on standard out.\"; \n"
"pattern var(M:str,F:str):void  \n"
"address MDBvar3 \n"
"comment \"Dump the symboltable of routine M.F on standard out.\"; \n"
"pattern getStackDepth():int  \n"
"address MDBStkDepth \n"
"comment \"Return the depth of the calling stack.\"; \n"
"pattern getStackFrame(i:int)(:bat[:str] ,:bat[:str]) \n"
"address MDBgetStackFrameN; \n"
"pattern getStackFrame()(:bat[:str] ,:bat[:str]) \n"
"address MDBgetStackFrame \n"
"comment \"Collect variable binding of current (n-th) stack frame.\"; \n"
"pattern getStackTrace()(:bat[:int], :bat[:str]) \n"
"address MDBStkTrace; \n"
"pattern dump() \n"
"address MDBdump \n"
"comment \"Dump instruction, stacktrace, and stack\"; \n"
"pattern getDefinition():bat[:str]  \n"
"address MDBgetDefinition \n"
"comment \"Returns a string representation of the current function  \n"
"	with typing information attached\"; \n"
},
