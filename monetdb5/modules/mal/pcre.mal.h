/*
* This Source Code Form is subject to the terms of the Mozilla Public
* License, v. 2.0.  If a copy of the MPL was not distributed with this
* file, You can obtain one at http://mozilla.org/MPL/2.0/.
*
* Copyright 1997 - July 2008 CWI, August 2008 - 2019 MonetDB B.V.
*/

// This file was generated automatically with mal2h.py. Do not edit this file directly.
{ "pcre", "\natom pcre;\ncommand index(pat:pcre, s:str) :int\naddress PCREindex\n;\n\ncommand match(s:str, pat:str):bit\naddress PCREmatch\n;\n\ncommand imatch(s:str, pat:str):bit\naddress PCREimatch\n;\n\ncommand patindex(pat:str, s:str) :int\naddress PCREpatindex\n;\n\ncommand replace(origin:str,pat:str,repl:str,flags:str):str\naddress PCREreplace_wrap\n;\n\ncommand replace_first(origin:str,pat:str,repl:str,flags:str):str\naddress PCREreplace_wrap\n;\n\ncommand pcre_quote(s:str):str\naddress PCREquote\n;\n\ncommand sql2pcre(pat:str,esc:str):str\naddress PCREsql2pcre\n;\n\ncommand prelude() :void\naddress pcre_init\n;\n\npcre.prelude();\n\ncommand str.replace(origin:str,pat:str,repl:str,flags:str):str\naddress PCREreplace_wrap;\n\ncommand algebra.like(s:str, pat:str, esc:str):bit address PCRElike3;\ncommand algebra.like(s:str, pat:str):bit address PCRElike2;\ncommand algebra.not_like(s:str, pat:str, esc:str):bit address PCREnotlike3;\ncommand algebra.not_like(s:str, pat:str):bit address PCREnotlike2;\ncommand algebra.ilike(s:str, pat:str, esc:str):bit address PCREilike3;\ncommand algebra.ilike(s:str, pat:str):bit address PCREilike2;\ncommand algebra.not_ilike(s:str, pat:str, esc:str):bit address PCREnotilike3;\ncommand algebra.not_ilike(s:str, pat:str):bit address PCREnotilike2;\n\nmodule batpcre;\n\ncommand batpcre.replace(orig:bat[:str],pat:str,repl:str,flag:str):bat[:str]\naddress PCREreplace_bat_wrap;\ncommand batpcre.replace_first(orig:bat[:str],pat:str,repl:str,flag:str):bat[:str]\naddress PCREreplacefirst_bat_wrap;\n\nmodule batalgebra;\n\ncommand batalgebra.like(s:bat[:str], pat:str, esc:str):bat[:bit] address BATPCRElike;\ncommand batalgebra.like(s:bat[:str], pat:str):bat[:bit] address BATPCRElike2;\ncommand batalgebra.not_like(s:bat[:str], pat:str, esc:str):bat[:bit] address BATPCREnotlike;\ncommand batalgebra.not_like(s:bat[:str], pat:str):bat[:bit] address BATPCREnotlike2;\ncommand batalgebra.ilike(s:bat[:str], pat:str, esc:str):bat[:bit] address BATPCREilike;\ncommand batalgebra.ilike(s:bat[:str], pat:str):bat[:bit] address BATPCREilike2;\ncommand batalgebra.not_ilike(s:bat[:str], pat:str, esc:str):bat[:bit] address BATPCREnotilike;\ncommand batalgebra.not_ilike(s:bat[:str], pat:str):bat[:bit] address BATPCREnotilike2;\n\ncommand algebra.likeselect(b:bat[:str], s:bat[:oid], pat:str, esc:str, caseignore:bit, anti:bit) :bat[:oid]\naddress PCRElikeselect2\n;\n\ncommand algebra.likeselect(b:bat[:str], cand:bat[:oid], pat:str, esc:str, anti:bit) :bat[:oid]\naddress PCRElikeselect3;\n\ncommand algebra.ilikeselect(b:bat[:str], cand:bat[:oid], pat:str, esc:str, anti:bit) :bat[:oid]\naddress PCRElikeselect1;\n\ncommand algebra.likeselect(b:bat[:str], cand:bat[:oid], pat:str, anti:bit) :bat[:oid]\naddress PCRElikeselect5;\n\ncommand algebra.ilikeselect(b:bat[:str], cand:bat[:oid], pat:str, anti:bit) :bat[:oid]\naddress PCRElikeselect4;\n\ncommand algebra.likejoin(l:bat[:str],r:bat[:str],esc:str,sl:bat[:oid],sr:bat[:oid],nil_matches:bit,estimate:lng) (:bat[:oid],:bat[:oid])\naddress LIKEjoin\n;\n\ncommand algebra.ilikejoin(l:bat[:str],r:bat[:str],esc:str,sl:bat[:oid],sr:bat[:oid],nil_matches:bit,estimate:lng) (:bat[:oid],:bat[:oid])\naddress ILIKEjoin\n;\n\ncommand algebra.likejoin(l:bat[:str],r:bat[:str],sl:bat[:oid],sr:bat[:oid],nil_matches:bit,estimate:lng) (:bat[:oid],:bat[:oid])\naddress LIKEjoin1;\n\ncommand algebra.ilikejoin(l:bat[:str],r:bat[:str],sl:bat[:oid],sr:bat[:oid],nil_matches:bit,estimate:lng) (:bat[:oid],:bat[:oid])\naddress ILIKEjoin1;" }, 
