/*
* This Source Code Form is subject to the terms of the Mozilla Public
* License, v. 2.0.  If a copy of the MPL was not distributed with this
* file, You can obtain one at http://mozilla.org/MPL/2.0/.
*
* Copyright 1997 - July 2008 CWI, August 2008 - 2019 MonetDB B.V.
*/

// This file was generated automatically with mal2h.py. Do not edit this file directly.
{ "str", "\nmodule str;\n\ncommand str(s:str):str\naddress STRtostr\ncomment \"Noop routine.\";\ncommand string(s:str,offset:int) :str\naddress STRTail\ncomment \"Return the tail s[offset..n]\n\t of a string s[0..n].\";\ncommand string(s:str,offset:int,count:int):str\naddress STRSubString\ncomment \"Return substring s[offset..offset+count] of a string s[0..n]\";\ncommand +( l:str, r:str) :str\naddress STRConcat\ncomment \"Concatenate two strings.\";\n\ncommand length( s:str ) :int\naddress STRLength\ncomment \"Return the length of a string.\";\n\ncommand nbytes( s:str ) :int\naddress STRBytes\ncomment \"Return the string length in bytes.\";\n\ncommand unicodeAt(s:str, index:int) :int\naddress STRWChrAt\ncomment \"get a unicode character\n\t(as an int) from a string position.\";\ncommand unicode(wchar:int) :str\naddress STRFromWChr\ncomment \"convert a unicode to a character.\";\n\ncommand startsWith(s:str,prefix:str):bit\naddress STRPrefix\ncomment \"Prefix check.\";\ncommand endsWith( s:str, suffix:str ) :bit\naddress STRSuffix\ncomment \"Suffix check.\";\n\ncommand toLower( s:str ) :str\naddress STRLower\ncomment \"Convert a string to lower case.\";\ncommand toUpper( s:str ) :str\naddress STRUpper\ncomment \"Convert a string to upper case.\";\n\ncommand search( s:str, c:str ) :int\naddress STRstrSearch\ncomment \"Search for a substring. Returns\n\t position, -1 if not found.\";\ncommand r_search( s:str, c:str ) :int\naddress STRReverseStrSearch\ncomment \"Reverse search for a substring. Returns\n\t position, -1 if not found.\";\n\ncommand splitpart( s:str, needle:str, field:int ) :str\naddress STRsplitpart\ncomment \"Split string on delimiter. Returns\n\t given field (counting from one.)\";\n\ncommand trim( s:str ) :str\naddress STRStrip\ncomment \"Strip whitespaces around a string.\";\ncommand ltrim( s:str ) :str\naddress STRLtrim\ncomment \"Strip whitespaces from start of a string.\";\ncommand rtrim( s:str ) :str\naddress STRRtrim\ncomment \"Strip whitespaces from end of a string.\";\n\ncommand trim( s:str, s2:str ) :str\naddress STRStrip2\ncomment \"Remove the longest string containing only characters from the second string around the first string.\";\ncommand ltrim( s:str, s2:str ) :str\naddress STRLtrim2\ncomment \"Remove the longest string containing only characters from the second string from the start of the first string.\";\ncommand rtrim( s:str, s2:str ) :str\naddress STRRtrim2\ncomment \"Remove the longest string containing only characters from the second string from the end of the first string.\";\n\ncommand lpad( s:str, len:int ) :str\naddress STRLpad\ncomment \"Fill up a string to the given length prepending the whitespace character.\";\ncommand rpad( s:str, len:int ) :str\naddress STRRpad\ncomment \"Fill up a string to the given length appending the whitespace character.\";\n\ncommand lpad( s:str, len:int, s2:str ) :str\naddress STRLpad2\ncomment \"Fill up the first string to the given length prepending characters of the second string.\";\ncommand rpad( s:str, len:int, s2:str ) :str\naddress STRRpad2\ncomment \"Fill up the first string to the given length appending characters of the second string.\";\n\ncommand substitute(s:str,src:str,dst:str,rep:bit) :str\naddress STRSubstitute\ncomment \"Substitute first occurrence of 'src' by\n\t'dst'.  Iff repeated = true this is\n\trepeated while 'src' can be found in the\n\tresult string. In order to prevent\n\trecursion and result strings of unlimited\n\tsize, repeating is only done iff src is\n\tnot a substring of dst.\";\n\ncommand like(s:str,pat:str):bit\naddress STRlikewrap2\ncomment \"SQL pattern match function\";\ncommand like(s:str,pat:str,esc:str):bit\naddress STRlikewrap\ncomment \"SQL pattern match function\";\n\ncommand ascii(s:str):int\naddress STRascii\ncomment \"Return unicode of head of string\";\n\ncommand substring(s:str, start:int):str\naddress STRsubstringTail\ncomment \"Extract the tail of a string\";\n\ncommand substring(s:str, start:int, len:int):str\naddress STRsubstring\ncomment \"Extract a substring from str starting at start, for length len\";\n\ncommand prefix(s:str,l:int):str\naddress STRprefix\ncomment \"Extract the prefix of a given length\";\ncommand suffix(s:str,l:int):str\naddress STRsuffix\ncomment \"Extract the suffix of a given length\";\n\ncommand stringleft(s:str,l:int):str\naddress STRprefix;\ncommand stringright(s:str,l:int):str\naddress STRsuffix;\n\ncommand locate(s1:str,s2:str):int\naddress STRlocate\ncomment \"Locate the start position of a string\";\n\ncommand locate(s1:str,s2:str,start:int):int\naddress STRlocate2\ncomment \"Locate the start position of a string\";\n\ncommand insert(s:str,start:int,l:int,s2:str):str\naddress STRinsert\ncomment \"Insert a string into another\";\n\ncommand replace(s:str,pat:str,s2:str):str\naddress STRreplace\ncomment \"Insert a string into another\";\n\ncommand repeat(s2:str,c:int):str\naddress STRrepeat;\n\ncommand space(l:int):str\naddress STRspace;\n\ncommand STRprelude() :void\naddress strPrelude;\n\ncommand STRepilogue() :void\naddress strEpilogue;\n\nstr.STRprelude();\t" }, 
