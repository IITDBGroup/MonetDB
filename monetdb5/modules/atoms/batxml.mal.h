/*
* This Source Code Form is subject to the terms of the Mozilla Public
* License, v. 2.0.  If a copy of the MPL was not distributed with this
* file, You can obtain one at http://mozilla.org/MPL/2.0/.
*
* Copyright 1997 - July 2008 CWI, August 2008 - 2019 MonetDB B.V.
*/

// This file was generated automatically with mal2h.py. Do not edit this file directly.
{ "batxml", "\nmodule batxml;\n\ncommand batxml.xml(src:bat[:str]):bat[:xml]\naddress BATXMLstr2xml\ncomment \"Cast the string to an xml compliant string.\";\n\ncommand batxml.str(src:bat[:xml]):bat[:str]\naddress BATXMLxml2str\ncomment \"Cast the xml to a string.\";\n\ncommand batxml.document(src:bat[:str]):bat[:xml]\naddress BATXMLdocument\ncomment \"Parse the string as an XML document.\";\n\ncommand batxml.content(src:bat[:str]):bat[:xml]\naddress BATXMLcontent\ncomment \"Parse the string as XML element content.\";\n\ncommand batxml.comment(val:bat[:str]):bat[:xml]\naddress BATXMLcomment\ncomment \"Create an XML comment element.\";\n\ncommand batxml.parse(doccont:str,val:bat[:str],option:str):bat[:xml]\naddress BATXMLparse\ncomment \"Parse the XML document or element string values.\";\n\ncommand batxml.serialize(val:bat[:xml]):bat[:str]\naddress BATXMLxml2str\ncomment \"Serialize the XML object to a string.\";\n\ncommand batxml.text(val:bat[:xml]):bat[:str]\naddress BATXMLxmltext\ncomment \"Serialize the XML object to a string.\";\n\ncommand batxml.xquery(val:bat[:str],expr:str):bat[:xml]\naddress BATXMLxquery\ncomment \"Execute the XQuery against the elements.\";\n\n\ncommand batxml.pi(target:str, val:bat[:xml]):bat[:xml]\naddress BATXMLpi\ncomment \"Construct a processing instruction.\";\n\ncommand batxml.attribute(name:str, val:bat[:str]):bat[:xml]\naddress BATXMLattribute\ncomment \"Construct an attribute value pair.\";\n\ncommand batxml.element(name:str, s:bat[:xml]) :bat[:xml]\naddress BATXMLelementSmall\ncomment \"The basic building block for XML elements are namespaces, attributes and a sequence of XML elements. The name space and the attributes may be left unspecified.\"; \n\ncommand batxml.options(tag:str, option:str,left:bat[:xml]):bat[:xml]\naddress BATXMLoptions\ncomment \"Create the components including NULL conversions.\";\n\ncommand batxml.element(name:str, ns:xml, attr:xml, s:bat[:xml]):bat[:xml]\naddress BATXMLelement\ncomment \"The basic building block for XML elements are namespaces, attributes and a sequence of XML elements. The name space and the attributes may be left unspecified(=nil).\";\n\ncommand batxml.concat(left:bat[:xml],right:bat[:xml] ):bat[:xml]\naddress BATXMLconcat\ncomment \"Concatenate the XML values.\";\n\npattern batxml.forest(val:bat[:xml]...):bat[:xml]\naddress BATXMLforest\ncomment \"Construct an element list.\";\n\ncommand batxml.root(val:bat[:xml], version:str, standalone:str):bat[:xml]\naddress BATXMLroot\ncomment \"Contruct the root nodes.\";\n\ncommand batxml.isdocument(val:bat[:str]):bat[:bit]\naddress BATXMLisdocument\ncomment \"Validate the string as a XML document.\";\n\ncommand xml.aggr(val:bat[:xml]):xml\naddress BATXMLgroup\ncomment \"Aggregate the XML values.\";\n\ncommand xml.subaggr(val:bat[:xml],g:bat[:oid],e:bat[:any_1], skip_nils:bit) :bat[:xml]\naddress AGGRsubxml\ncomment \"Grouped aggregation of XML values.\";\n\ncommand xml.subaggr(val:bat[:xml],g:bat[:oid],e:bat[:any_1],s:bat[:oid], skip_nils:bit) :bat[:xml]\naddress AGGRsubxmlcand\ncomment \"Grouped aggregation of XML values with candidates list.\";\n\nmodule batcalc;\ncommand xml(src:bat[:str]):bat[:xml] address BATXMLstr2xml;" }, 
