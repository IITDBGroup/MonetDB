{ "batxml",
"# This Source Code Form is subject to the terms of the Mozilla Public \n"
"# License, v. 2.0.  If a copy of the MPL was not distributed with this \n"
"# file, You can obtain one at http://mozilla.org/MPL/2.0/. \n"
"# \n"
"# Copyright 1997 - July 2008 CWI, August 2008 - 2019 MonetDB B.V. \n"
"module batxml; \n"
"command batxml.xml(src:bat[:str]):bat[:xml] \n"
"address BATXMLstr2xml \n"
"comment \"Cast the string to an xml compliant string.\"; \n"
"command batxml.str(src:bat[:xml]):bat[:str] \n"
"address BATXMLxml2str \n"
"comment \"Cast the xml to a string.\"; \n"
"command batxml.document(src:bat[:str]):bat[:xml] \n"
"address BATXMLdocument \n"
"comment \"Parse the string as an XML document.\"; \n"
"command batxml.content(src:bat[:str]):bat[:xml] \n"
"address BATXMLcontent \n"
"comment \"Parse the string as XML element content.\"; \n"
"command batxml.comment(val:bat[:str]):bat[:xml] \n"
"address BATXMLcomment \n"
"comment \"Create an XML comment element.\"; \n"
"command batxml.parse(doccont:str,val:bat[:str],option:str):bat[:xml] \n"
"address BATXMLparse \n"
"comment \"Parse the XML document or element string values.\"; \n"
"command batxml.serialize(val:bat[:xml]):bat[:str] \n"
"address BATXMLxml2str \n"
"comment \"Serialize the XML object to a string.\"; \n"
"command batxml.text(val:bat[:xml]):bat[:str] \n"
"address BATXMLxmltext \n"
"comment \"Serialize the XML object to a string.\"; \n"
"command batxml.xquery(val:bat[:str],expr:str):bat[:xml] \n"
"address BATXMLxquery \n"
"comment \"Execute the XQuery against the elements.\"; \n"
"# todo \n"
"# command batxml.table(val:bat[:str],expr:str):bat[:xml] \n"
"# address BATXMLquery \n"
"# comment \"Execute the XQuery against the elements\"; \n"
"command batxml.pi(target:str, val:bat[:xml]):bat[:xml] \n"
"address BATXMLpi \n"
"comment \"Construct a processing instruction.\"; \n"
"command batxml.attribute(name:str, val:bat[:str]):bat[:xml] \n"
"address BATXMLattribute \n"
"comment \"Construct an attribute value pair.\"; \n"
"command batxml.element(name:str, s:bat[:xml]) :bat[:xml] \n"
"address BATXMLelementSmall \n"
"comment \"The basic building block for XML elements are namespaces, attributes and a sequence of XML elements. The name space and the attributes may be left unspecified.\";  \n"
"command batxml.options(tag:str, option:str,left:bat[:xml]):bat[:xml] \n"
"address BATXMLoptions \n"
"comment \"Create the components including NULL conversions.\"; \n"
"command batxml.element(name:str, ns:xml, attr:xml, s:bat[:xml]):bat[:xml] \n"
"address BATXMLelement \n"
"comment \"The basic building block for XML elements are namespaces, attributes and a sequence of XML elements. The name space and the attributes may be left unspecified(=nil).\"; \n"
"command batxml.concat(left:bat[:xml],right:bat[:xml] ):bat[:xml] \n"
"address BATXMLconcat \n"
"comment \"Concatenate the XML values.\"; \n"
"pattern batxml.forest(val:bat[:xml]...):bat[:xml] \n"
"address BATXMLforest \n"
"comment \"Construct an element list.\"; \n"
"command batxml.root(val:bat[:xml], version:str, standalone:str):bat[:xml] \n"
"address BATXMLroot \n"
"comment \"Contruct the root nodes.\"; \n"
"command batxml.isdocument(val:bat[:str]):bat[:bit] \n"
"address BATXMLisdocument \n"
"comment \"Validate the string as a XML document.\"; \n"
"command xml.aggr(val:bat[:xml]):xml \n"
"address BATXMLgroup \n"
"comment \"Aggregate the XML values.\"; \n"
"command xml.subaggr(val:bat[:xml],g:bat[:oid],e:bat[:any_1], skip_nils:bit) :bat[:xml] \n"
"address AGGRsubxml \n"
"comment \"Grouped aggregation of XML values.\"; \n"
"command xml.subaggr(val:bat[:xml],g:bat[:oid],e:bat[:any_1],s:bat[:oid], skip_nils:bit) :bat[:xml] \n"
"address AGGRsubxmlcand \n"
"comment \"Grouped aggregation of XML values with candidates list.\"; \n"
"module batcalc; \n"
"command xml(src:bat[:str]):bat[:xml] address BATXMLstr2xml; \n"
},
