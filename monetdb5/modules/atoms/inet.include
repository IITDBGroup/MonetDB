{ "inet",
"# This Source Code Form is subject to the terms of the Mozilla Public \n"
"# License, v. 2.0.  If a copy of the MPL was not distributed with this \n"
"# file, You can obtain one at http://mozilla.org/MPL/2.0/. \n"
"# \n"
"# Copyright 1997 - July 2008 CWI, August 2008 - 2019 MonetDB B.V. \n"
"atom inet:lng; \n"
"command null() \n"
"address INETnull; \n"
"command cmp() \n"
"address INETcompare; \n"
"command fromstr() \n"
"address INETfromString \n"
"comment \"Convert a string to an inet\"; \n"
"command tostr() \n"
"address INETtoString \n"
"comment \"Convert inet to string equivalent\"; \n"
"command new(s:str):inet \n"
"address INETnew \n"
"comment \"Create an inet from a string literal\"; \n"
"command isnil(v:inet):bit \n"
"address INET_isnil \n"
"comment \"Nil test for inet value\"; \n"
"command =(v:inet,w:inet):bit \n"
"address INET_comp_EQ \n"
"comment \"Equality of two inets\"; \n"
"command !=(v:inet,w:inet):bit \n"
"address INET_comp_NEQ \n"
"comment \"Inequality of two inets\"; \n"
"command <(v:inet,w:inet):bit \n"
"address INET_comp_LT \n"
"comment \"Whether v is less than w\"; \n"
"command >(v:inet,w:inet):bit \n"
"address INET_comp_GT \n"
"comment \"Whether v is greater than w\"; \n"
"command <=(v:inet,w:inet):bit \n"
"address INET_comp_LE \n"
"comment \"Whether v is less than or equal to w\"; \n"
"command >=(v:inet,w:inet):bit \n"
"address INET_comp_GE \n"
"comment \"Whether v is equal to or greater than w\"; \n"
"command <<(v:inet,w:inet):bit \n"
"address INET_comp_CW \n"
"comment \"Whether v is contained within w\"; \n"
"command <<=(v:inet,w:inet):bit \n"
"address INET_comp_CWE \n"
"comment \"Whether v is contained within or is equal to w\"; \n"
"command >>(v:inet,w:inet):bit \n"
"address INET_comp_CS \n"
"comment \"Whether v contains w\"; \n"
"command >>=(v:inet,w:inet):bit \n"
"address INET_comp_CSE \n"
"comment \"Whether v contains or is equal to w\"; \n"
"command broadcast(:inet):inet \n"
"address INETbroadcast \n"
"comment \"Returns the broadcast address for network\"; \n"
"command host(:inet):str \n"
"address INEThost \n"
"comment \"Extract IP address as text\"; \n"
"command masklen(:inet):int \n"
"address INETmasklen \n"
"comment \"Extract netmask length\"; \n"
"command setmasklen(:inet,:int):inet \n"
"address INETsetmasklen \n"
"comment \"Set netmask length for inet value\"; \n"
"command netmask(:inet):inet \n"
"address INETnetmask \n"
"comment \"Construct netmask for network\"; \n"
"command hostmask(:inet):inet \n"
"address INEThostmask \n"
"comment \"Construct host mask for network\"; \n"
"command network(:inet):inet \n"
"address INETnetwork \n"
"comment \"Extract network part of address\"; \n"
"command text(:inet):str \n"
"address INETtext \n"
"comment \"Extract IP address and netmask length as text\"; \n"
"command abbrev(:inet):str \n"
"address INETabbrev \n"
"comment \"Abbreviated display format as text\"; \n"
"module calc; \n"
"command inet(s:inet):inet \n"
"address INET_inet \n"
"comment \"Convert a inet to an inet\"; \n"
"command inet(s:str):inet \n"
"address INET_fromstr \n"
"comment \"Convert a string to an inet\"; \n"
"command ==(v:inet,w:inet):bit \n"
"address INET_comp_EQ \n"
"comment \"Equality of two inets\"; \n"
"command !=(v:inet,w:inet):bit \n"
"address INET_comp_NEQ \n"
"comment \"Inequality of two inets\"; \n"
"command <(v:inet,w:inet):bit \n"
"address INET_comp_LT \n"
"comment \"Whether v is less than w\"; \n"
"command >(v:inet,w:inet):bit \n"
"address INET_comp_GT \n"
"comment \"Whether v is greater than w\"; \n"
"command <=(v:inet,w:inet):bit \n"
"address INET_comp_LE \n"
"comment \"Whether v is less than or equal to w\"; \n"
"command >=(v:inet,w:inet):bit \n"
"address INET_comp_GE \n"
"comment \"Whether v is equal to or greater than w\"; \n"
},
