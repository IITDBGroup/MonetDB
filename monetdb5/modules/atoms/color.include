{ "color",
"# This Source Code Form is subject to the terms of the Mozilla Public \n"
"# License, v. 2.0.  If a copy of the MPL was not distributed with this \n"
"# file, You can obtain one at http://mozilla.org/MPL/2.0/. \n"
"# \n"
"# Copyright 1997 - July 2008 CWI, August 2008 - 2019 MonetDB B.V. \n"
"module color; \n"
"atom color:int; \n"
"command tostr() address color_tostr; \n"
"command fromstr() address color_fromstr; \n"
"command str(s:color):str \n"
"address CLRstr \n"
"comment \"Converts color to string \"; \n"
"command color(s:str):color \n"
"address CLRcolor \n"
"comment \"Converts string to color\"; \n"
"command rgb(r:int, g:int, b:int):color \n"
"address CLRrgb \n"
"comment	\"Converts an RGB triplets to a color atom\"; \n"
"command red  (c:color) :int \n"
"address CLRred \n"
"comment	\"Extracts red component from a color atom\"; \n"
"command green(c:color) :int \n"
"address CLRgreen \n"
"comment	\"Extracts green component from a color atom\"; \n"
"command blue (c:color) :int \n"
"address CLRblue \n"
"comment	\"Extracts blue component from a color atom\"; \n"
"command hue(c:color) :int \n"
"address CLRhueInt \n"
"comment	\"Extracts hue component from a color atom\"; \n"
"command saturation(c:color) :int \n"
"address CLRsaturationInt \n"
"comment	\"Extracts saturation component from a color atom\"; \n"
"command value(c:color) :int \n"
"address CLRvalueInt \n"
"comment	\"Extracts value component from a color atom\"; \n"
"command hsv(h:flt,s:flt, v:flt) :color \n"
"address CLRhsv \n"
"comment	\"Converts an HSV triplets to a color atom\"; \n"
"command hue(c:color) :flt \n"
"address CLRhue \n"
"comment	\"Extracts hue component from a color atom\"; \n"
"command saturation(c:color) :flt \n"
"address CLRsaturation \n"
"comment	\"Extracts saturation component from a color atom\"; \n"
"command value(c:color) :flt \n"
"address CLRvalue \n"
"comment	\"Extracts value component from a color atom\"; \n"
"command ycc(y:int,cr:int,cb:int) :color \n"
"address CLRycc \n"
"comment	\"Converts an YCC triplets to a color atom\"; \n"
"command luminance (c:color) :int \n"
"address CLRluminance \n"
"comment	\"Extracts Y(luminance) component from a color atom\"; \n"
"command cr(c:color) :int \n"
"address CLRcr \n"
"comment	\"Extracts Cr(red color) component from a color atom\"; \n"
"command cb(c:color) :int \n"
"address CLRcb \n"
"comment	\"Extracts Cb(blue color) component from a color atom\"; \n"
},
