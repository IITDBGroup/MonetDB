# handle the duplicates in this code block
function user.s4_1():void;
barrier X_213:bit := language.dataflow();
 X_122:bat[:str] := bat.new(nil:str);
 X_128:bat[:int] := bat.new(nil:int);
 X_126:bat[:int] := bat.new(nil:int);
 X_125:bat[:str] := bat.new(nil:str);
 X_124:bat[:str] := bat.new(nil:str);
 X_111:bat[:lng] := bat.new(nil:lng);
 (X_115:bat[:lng], X_116:bat[:oid], X_117:bat[:oid]) := algebra.sort(X_111, false:bit, false:bit, false:bit);
 X_42:bat[:lng] := bat.new(nil:lng);
 X_41:bat[:timestamp] := bat.new(nil:timestamp);
 X_46:bat[:bit] := batcalc.>=(X_41, "2018-11-04 09:00:00.000":timestamp);
 X_51:bat[:bit] := batcalc.<(X_41, "2019-03-10 10:00:00.000":timestamp);
 X_53:bat[:bit] := batcalc.and(X_46, X_51);
 X_55:bat[:bit] := batcalc.isnil(X_53);
 X_66:bat[:bit] := batcalc.ifthenelse(X_55, false:bit, X_53);
 X_69:bat[:timestamp] := mal.manifold("mtime":str, "timestamp_add_msec_interval":str, X_41, -28800000:lng);
 X_74:bat[:bit] := batcalc.>=(X_41, "2019-03-10 10:00:00.000":timestamp);
 X_77:bat[:bit] := batcalc.<(X_41, "2019-11-03 09:00:00.000":timestamp);
 X_78:bat[:bit] := batcalc.and(X_74, X_77);
 X_79:bat[:bit] := batcalc.isnil(X_78);
 X_93:bat[:bit] := batcalc.ifthenelse(X_79, false:bit, X_78);
 X_95:bat[:timestamp] := mal.manifold("mtime":str, "timestamp_add_msec_interval":str, X_41, -25200000:lng);
 X_98:bat[:timestamp] := batcalc.ifthenelse(X_93, X_95, X_69);
 X_99:bat[:timestamp] := batcalc.ifthenelse(X_66, X_69, X_98);
 X_102:bat[:str] := mal.manifold("mtime":str, "timestamp_to_str":str, X_99, "%W":str);
 (X_105:bat[:oid], C_106:bat[:oid], X_107:bat[:lng]) := group.group(X_102);
 (X_108:bat[:oid], C_109:bat[:oid], X_110:bat[:lng]) := group.subgroupdone(X_42, X_105);
 X_113:bat[:lng] := aggr.subcount(X_108, X_108, C_109, false:bit);
 X_120:bat[:str] := algebra.projectionpath(X_116, C_109, X_102);
 X_119:bat[:lng] := algebra.projection(X_116, X_113);
 X_118:bat[:lng] := bat.new(nil:lng);
 X_129:bat[:str] := bat.append(X_122, "sys.L2":str);
 X_131:bat[:str] := bat.append(X_124, "priority":str);
 X_133:bat[:str] := bat.append(X_125, "bigint":str);
 X_135:bat[:int] := bat.append(X_126, 64:int);
 X_137:bat[:int] := bat.append(X_128, 0:int);
 X_139:bat[:str] := bat.append(X_129, "sys.L5":str);
 X_141:bat[:str] := bat.append(X_131, "count_of_1165461084":str);
 X_143:bat[:str] := bat.append(X_133, "bigint":str);
 X_144:bat[:int] := bat.append(X_135, 64:int);
 X_145:bat[:int] := bat.append(X_137, 0:int);
 X_146:bat[:str] := bat.append(X_139, "sys.L7":str);
 X_148:bat[:str] := bat.append(X_141, "timeref":str);
 X_150:bat[:str] := bat.append(X_143, "clob":str);
 X_152:bat[:int] := bat.append(X_144, 0:int);
 X_153:bat[:int] := bat.append(X_145, 0:int);
 language.pass(X_53);
 language.pass(X_78);
 language.pass(X_41);
 language.pass(X_69);
 language.pass(X_108);
 language.pass(C_109);
 language.pass(X_102);
 language.pass(X_116);
exit X_213:bit;
end user.s4_1;

optimizer.commonTerms("optimizer","commonTerms");
