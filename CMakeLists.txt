cmake_minimum_required(VERSION 3.4 FATAL_ERROR)

project(MonetDB C)

# TODO check for AM_CONDITIONAL

set(C_STANDARD_REQUIRED ON)
set(CMAKE_C_STANDARD 99)

find_package(PkgConfig REQUIRED)
find_package(BISON)

set(CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake")
include(GNUInstallDirs REQUIRED)
include(CheckCSourceCompiles REQUIRED)
include(CheckCSourceRuns REQUIRED)
include(CheckIncludeFile REQUIRED)
include(CheckIncludeFiles REQUIRED)
include(CheckSymbolExists REQUIRED)
include(CheckTypeSize REQUIRED)
include(FindIconv REQUIRED)
include(TestLargeFiles REQUIRED)

function(defineCmacro OPTION VALUE)
	set(${OPTION} "#define ${VALUE}" PARENT_SCOPE)
endfunction()

function(undefineCmacro OPTION) # TODO check this
	set(${OPTION} "#undef ${OPTION}" PARENT_SCOPE)
endfunction()

# set prefix with -DCMAKE_INSTALL_PREFIX=...

# set host data
string(TOLOWER "${CMAKE_SYSTEM_NAME}" CMAKE_SYSTEM_NAME_LOWER)
string(TOLOWER "${CMAKE_C_COMPILER_ID}" CMAKE_C_COMPILER_ID_LOWER)
defineCmacro("HOST" "HOST \"${CMAKE_SYSTEM_PROCESSOR}-pc-${CMAKE_SYSTEM_NAME_LOWER}-${CMAKE_C_COMPILER_ID_LOWER}\"")

# Read libversions file
file(STRINGS "${CMAKE_CURRENT_SOURCE_DIR}/libversions" LIB_VERSIONS)

string(REGEX MATCH "GDK_VERSION=[^\ \t\r\n]+" GDK_VERSION ${LIB_VERSIONS})
string(LENGTH ${GDK_VERSION} GDK_VERSION_LENGTH)
string(SUBSTRING ${GDK_VERSION} 12 GDK_VERSION_LENGTH GDK_VERSION)

string(REGEX MATCH "MAPI_VERSION=[^\ \t\r\n]+" MAPI_VERSION ${LIB_VERSIONS})
string(LENGTH ${MAPI_VERSION} MAPI_VERSION_LENGTH)
string(SUBSTRING ${MAPI_VERSION} 13 MAPI_VERSION_LENGTH MAPI_VERSION)

string(REGEX MATCH "MONETDB5_VERSION=[^\ \t\r\n]+" MONETDB5_VERSION ${LIB_VERSIONS})
string(LENGTH ${MONETDB5_VERSION} MONETDB5_VERSION_LENGTH)
string(SUBSTRING ${MONETDB5_VERSION} 17 MONETDB5_VERSION_LENGTH MONETDB5_VERSION)

string(REGEX MATCH "STREAM_VERSION=[^\ \t\r\n]+" STREAM_VERSION ${LIB_VERSIONS})
string(LENGTH ${STREAM_VERSION} STREAM_VERSION_LENGTH)
string(SUBSTRING ${STREAM_VERSION} 15 STREAM_VERSION_LENGTH STREAM_VERSION)

# Intel compiler hack
if("${CMAKE_C_COMPILER_ID}" STREQUAL "Intel")
	set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -no-gcc")
endif()

# Set default build options
if(EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/vertoo.data")
	set(DFT_STRICT "YES")
	set(DFT_ASSERT "YES")
	set(DFT_DEBUG "YES")
	set(DFT_OPTIMIZE "NO")
	set(DFT_DEVELOPER "YES")
else()
	set(DFT_STRICT "NO")
	set(DFT_ASSERT "NO")
	set(DFT_DEBUG "NO")
	set(DFT_OPTIMIZE "NO")
	set(DFT_DEVELOPER "NO")
endif()

set(ENABLE_DEVELOPER "${DFT_DEVELOPER}" CACHE STRING "Build and install programs that are only useful for MonetDB development (default=yes for development sources)")
set(ENABLE_TESTING "AUTO" CACHE STRING "Enable support for testing (default=auto)")

# modules to use
set(ENABLE_MAPI "YES" CACHE STRING "Enable MAPI (default=yes)")
if(NOT ${ENABLE_MAPI} STREQUAL "NO")
	defineCmacro(HAVE_MAPI "HAVE_MAPI 1")
endif()

set(ENABLE_ODBC "AUTO" CACHE STRING "Compile the MonetDB ODBC driver (default=auto)")

set(ENABLE_GDK "YES" CACHE STRING "Enable support for GDK (default=yes)")

set(ENABLE_MONETDB5 "YES" CACHE STRING "Enable support for MonetDB5 (default=yes)")
if(${ENABLE_GDK} STREQUAL "NO")
	if(${ENABLE_MONETDB5} STREQUAL "YES")
		message(FATAL_ERROR "MonetDB5 requires GDK.")
	elseif(${ENABLE_MONETDB5} STREQUAL "AUTO")
		set(ENABLE_MONETDB5 "NO")
	endif()
endif()

set(ENABLE_SQL "YES" CACHE STRING "Enable support for MonetDB/SQL (default=yes)")
if(${ENABLE_MONETDB5} STREQUAL "NO")
	if(${ENABLE_SQL} STREQUAL "YES")
		message(FATAL_ERROR "MonetDB/SQL requires MonetDB5.")
	elseif(${ENABLE_SQL} STREQUAL "AUTO")
		set(ENABLE_SQL "NO")
	endif()
endif()

set(ENABLE_GEOM "AUTO" CACHE STRING "Enable support for geom module (default=auto)")
if(${ENABLE_MONETDB5} STREQUAL "NO")
	if(${ENABLE_GEOM} STREQUAL "YES")
		message(FATAL_ERROR "Geom module requires MonetDB5.")
	elseif(${ENABLE_GEOM} STREQUAL "AUTO")
		set(ENABLE_GEOM "NO")
	endif()
endif()

set(ENABLE_FITS "AUTO" CACHE STRING "Enable support for FITS (default=auto)")
set(ENABLE_NETCDF "AUTO" CACHE STRING "Enable support for netcdf (default=auto)")
set(ENABLE_LIDAR "AUTO" CACHE STRING "Enable support for LiDAR data (default=auto)")
set(ENABLE_SHP "AUTO" CACHE STRING "Enable support for ESRI Shapefiles (default=auto)")
if(${ENABLE_GEOM} STREQUAL "NO")
	if(${ENABLE_SHP} STREQUAL "YES")
		message(FATAL_ERROR "ESRI Shapefile vault requires the geom module.")
	elseif(${ENABLE_SHP} STREQUAL "AUTO")
		set(ENABLE_SHP "NO")
	endif()
endif()

set(ENABLE_EMBEDDED "NO" CACHE STRING "Enable support for running MonetDB as a library (default=no)")
if(NOT ${ENABLE_EMBEDDED} STREQUAL "NO")
	defineCmacro("HAVE_EMBEDDED" "HAVE_EMBEDDED 1")
endif()

set(ENABLE_RINTEGRATION "AUTO" CACHE STRING "Enable support for R integration into MonetDB (default=auto)")
set(ENABLE_PY2INTEGRATION "AUTO" CACHE STRING "enable support for Python 2 integration into MonetDB (default=auto)")
set(ENABLE_PY3INTEGRATION "AUTO" CACHE STRING "enable support for Python 3 integration into MonetDB (default=auto)")

set(ENABLE_CONSOLE "YES" CACHE STRING "Enables direct console on the server (involves security risks) (default=yes)")
if(NOT ${ENABLE_CONSOLE} STREQUAL "NO")
	defineCmacro("HAVE_CONSOLE" "HAVE_CONSOLE 1")
endif()

set(ENABLE_INT128 "AUTO" CACHE STRING "Enable support for 128-bit integers (default=auto)")
set(ENABLE_DEBUG "${DFT_DEBUG}" CACHE STRING "Enable full debugging (default=yes for development sources)")
set(ENABLE_ASSERT "${DFT_ASSERT}" CACHE STRING "Enable assertions in the code (default=yes for development sources)")
set(ENABLE_OPTIMIZE "${DFT_OPTIMIZE}" CACHE STRING "Enable extra optimization (default=no)")
set(ENABLE_STRICT "${DFT_STRICT}" CACHE STRING "Enable strict compiler flags (default=yes for development sources)")
set(ENABLE_SANITIZER "NO" CACHE STRING "Enable support for the GCC address sanitizer (default=no)")
set(ENABLE_STATIC_ANALYSIS "NO" CACHE STRING "Configure for static code analysis (use only if you know what you are doing)")
if(NOT ${ENABLE_STATIC_ANALYSIS} STREQUAL "NO")
	defineCmacro("STATIC_CODE_ANALYSIS" "STATIC_CODE_ANALYSIS 1")
endif()

# password hash algorithm
set(PASSWORD_BACKEND "SHA512" CACHE STRING "Password hash algorithm, one of MD5, SHA1, RIPEMD160, SHA224, SHA256, SHA384, SHA512, defaults to SHA512")
if(${PASSWORD_BACKEND} MATCHES "^MD5|SHA1|RIPEMD160|SHA224|SHA256|SHA384|SHA512$")
	defineCmacro("MONETDB5_PASSWDHASH" "MONETDB5_PASSWDHASH ${PASSWORD_BACKEND}")
	defineCmacro("MONETDB5_PASSWDHASH_TOKEN" "MONETDB5_PASSWDHASH_TOKEN \"${PASSWORD_BACKEND}\"")
else()
	message(FATAL_ERROR "PASSWORD_BACKEND invalid, choose one of MD5, SHA1, RIPEMD160, SHA224, SHA256, SHA384, SHA512")
endif()

# instalation directories
set(LOGDIR "${CMAKE_INSTALL_FULL_LOCALSTATEDIR}/log/monetdb" CACHE STRING "Where to put log files (LOCALSTATEDIR/log/monetdb/)")
set(RUNDIR "${CMAKE_INSTALL_FULL_LOCALSTATEDIR}/run/monetdb" CACHE STRING "Where to put pid files (LOCALSTATEDIR/run/monetdb/)")

OPJ_TEST_LARGE_FILES(_LARGE_FILES)
if(_LARGE_FILES)
	defineCmacro("_LARGE_FILES" "HAVE _LARGE_FILES 1")
endif()
OPJ_TEST_LARGE_FILES(_LARGEFILE_SOURCE)
if(_LARGEFILE_SOURCE)
	defineCmacro("_LARGEFILE_SOURCE" "HAVE _LARGEFILE_SOURCE 1")
endif()
OPJ_TEST_LARGE_FILES(_FILE_OFFSET_BITS)
if(_FILE_OFFSET_BITS)
	defineCmacro("_FILE_OFFSET_BITS" "HAVE _FILE_OFFSET_BITS 64")
endif()

if(NOT "${CMAKE_C_COMPILER_ID}" MATCHES "^GNU|Intel|Clang|MSVC|AppleClang|SunPro$")
	message(WARNING "Compiler potentially not (correctly) recognized")
endif()

# Check for compiler flags
set(X_CFLAGS "${CMAKE_C_FLAGS}")

function(checkCompilerFlag Flag)
	set(CMAKE_REQUIRED_FLAGS "${CMAKE_REQUIRED_FLAGS} ${Flag}")
	check_c_source_compiles("
		#include <stdio.h>
		#include <stdlib.h>
		#include <string.h>

		int main(int argc, char **av) {
			char buf[24];
			double d = atof(\"4.2\");
			if (argc == 0 || strchr(av[0], av[0][0]) != NULL)
				snprintf(buf, sizeof(buf), \"%f\", d);
			return 0;
		}
	" COMPILE_SUCCEEDED)
	set(CMAKE_REQUIRED_FLAGS "${PREV_CMAKE_REQUIRED_FLAGS}")
	if(COMPILE_SUCCEEDED)
		message(STATUS "Test for ${Flag} succeeded")
		set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${Flag}" PARENT_SCOPE)
		set(X_CFLAGS "${X_CFLAGS} ${Flag}" PARENT_SCOPE)
	else()
		message(STATUS "Test for ${Flag} failed")
	endif()
endfunction()

if(${ENABLE_STRICT} STREQUAL "YES")
	if("${CMAKE_C_COMPILER_ID}" STREQUAL "GNU")
		checkCompilerFlag("-Werror")
		checkCompilerFlag("-Wall")
		checkCompilerFlag("-Wextra")
		checkCompilerFlag("-W")
		checkCompilerFlag("-Werror-implicit-function-declaration")
		checkCompilerFlag("-Wpointer-arith")
		checkCompilerFlag("-Wundef")
		checkCompilerFlag("-Wformat=2")
		checkCompilerFlag("-Wformat-overflow=1")
		checkCompilerFlag("-Wno-format-truncation")
		checkCompilerFlag("-Wno-format-nonliteral")
		if(${CMAKE_SYSTEM_NAME} STREQUAL "CYGWIN")
			checkCompilerFlag("-Wno-error=suggest-attribute=format")
			checkCompilerFlag("-Wno-cast-function-type")
		endif()
		checkCompilerFlag("-Winit-self")
		checkCompilerFlag("-Winvalid-pch")
		checkCompilerFlag("-Wmissing-declarations")
		checkCompilerFlag("-Wmissing-format-attribute")
		checkCompilerFlag("-Wmissing-prototypes")
		checkCompilerFlag("-Wno-missing-field-initializers")
		checkCompilerFlag("-Wold-style-definition")
		checkCompilerFlag("-Wpacked")
		checkCompilerFlag("-Wunknown-pragmas")
		checkCompilerFlag("-Wvariadic-macros")
		checkCompilerFlag("-fstack-protector-all")
		checkCompilerFlag("-Wstack-protector")
		checkCompilerFlag("-Wpacked-bitfield-compat")
		checkCompilerFlag("-Wsync-nand")
		checkCompilerFlag("-Wjump-misses-init")
		checkCompilerFlag("-Wmissing-include-dirs")
		checkCompilerFlag("-Wlogical-op")
		checkCompilerFlag("-Wduplicated-cond")
		checkCompilerFlag("-Wduplicated-branches")
		checkCompilerFlag("-Wrestrict")
		checkCompilerFlag("-Wnested-externs")
		checkCompilerFlag("-Wno-char-subscripts")
		if("${CMAKE_C_COMPILER_ID}" STREQUAL "Clang")
			checkCompilerFlag("-Wunreachable-code")
		endif()
	elseif(${CMAKE_SYSTEM_NAME} STREQUAL "Intel")
		if(CMAKE_C_COMPILER_VERSION VERSION_LESS 10)
			link_libraries("-i_dynamic")
		else()
			link_libraries("-shared-intel")
		endif()
		if(CMAKE_C_COMPILER_VERSION VERSION_GREATER_EQUAL 8.1 AND CMAKE_C_COMPILER_VERSION VERSION_LESS_EQUAL 11)
			link_libraries("-wd1418")
		endif()
		set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -we140 -we147")
		if(CMAKE_C_COMPILER_VERSION VERSION_LESS 8 OR CMAKE_C_COMPILER_VERSION VERSION_GREATER 17)
			set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -ansi")
		endif()

		set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall -w2 -Wcheck")
		set(X_CFLAGS "${X_CFLAGS} -we266,181,810,271,593")
		set(X_CFLAGS "${X_CFLAGS} -Werror -Werror-all")
		set(X_CFLAGS "${X_CFLAGS} -wd1418,1419,981,193,1357")

		if(CMAKE_C_COMPILER_VERSION VERSION_EQUAL 11 OR CMAKE_C_COMPILER_VERSION VERSION_EQUAL 15 OR CMAKE_C_COMPILER_VERSION VERSION_EQUAL 17)
			set(X_CFLAGS "${X_CFLAGS},2259")
		endif()
		if(CMAKE_C_COMPILER_VERSION VERSION_GREATER_EQUAL 8.1 OR CMAKE_C_COMPILER_VERSION VERSION_LESS_EQUAL 8.9)
			set(X_CFLAGS "${X_CFLAGS},1572")
		elseif(CMAKE_C_COMPILER_VERSION VERSION_GREATER_EQUAL 9.1 OR CMAKE_C_COMPILER_VERSION VERSION_LESS_EQUAL 9.9 OR (CMAKE_C_COMPILER_VERSION VERSION_GREATER_EQUAL 10 AND CMAKE_C_COMPILER_VERSION VERSION_EQUAL 11))
			set(X_CFLAGS "${X_CFLAGS},1572,1599")
		endif()
	endif()
endif()

if(NOT ${ENABLE_SANITIZER} STREQUAL "NO")
	if("${CMAKE_C_COMPILER_ID}" STREQUAL "GNU")
		if(${ENABLE_SANITIZER} STREQUAL "YES")
			checkCompilerFlag("-fsanitize=address")
			checkCompilerFlag("-fsanitize=${ENABLE_SANITIZER}")
			if(NOT ${X_CFLAGS} MATCHES "*-fsanitize=*")
				message(FATAL_ERROR " Sanitizer not supported by this compiler")
			endif()
			checkCompilerFlag("-fno-omit-frame-pointer")
		endif()
	else()
		message(FATAL_ERROR " Sanitizer only supported with GCC")
	endif()
endif()

if(${CMAKE_SYSTEM_NAME} STREQUAL "Intel") # see https://software.intel.com/en-us/forums/intel-c-compiler/topic/760979
	if(EXISTS "${ROOT}/usr/include/math.h")
		file(READ "${ROOT}/usr/include/math.h" TMPTXT)
		string(FIND "${TMPTXT}" "_LIB_VERSION_TYPE" FOUND_VERSION)
		if(FOUND_VERSION)
			defineCmacro("INTEL_MATH_H_HACK" "INTEL_MATH_H_HACK 1")
		endif()
	endif()
endif()

set(CMAKE_REQUIRED_LINK_OPTIONS "${CMAKE_REQUIRED_LINK_OPTIONS} -Wl,-Bsymbolic-functions")
check_c_source_compiles("
	#include <stdio.h>
	#include <stdlib.h>
	#include <string.h>

	int main(int argc, char **av) {
		char buf[24];
		double d = atof(\"4.2\");
		if (argc == 0 || strchr(av[0], av[0][0]) != NULL)
			snprintf(buf, sizeof(buf), \"%f\", d);
		return 0;
	}
" COMPILE_SUCCEEDED)
set(CMAKE_REQUIRED_LINK_OPTIONS "${PREV_CMAKE_REQUIRED_LINK_OPTIONS}")
if(COMPILE_SUCCEEDED)
	message(STATUS "Test for -Bsymbolic-functions option succeeded")
	set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${Flag}")
	set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} ${Flag}")
	set(CMAKE_STATIC_LINKER_FLAGS "${CMAKE_STATIC_LINKER_FLAGS} ${Flag}")
else()
	message(STATUS "Test for -Bsymbolic-functions option failed")
endif()

if(${CMAKE_SYSTEM_NAME} STREQUAL "CYGWIN")
	set(NO_UNDEFINED "-no-undefined")
endif()

if(${ENABLE_DEBUG} STREQUAL "YES" AND ${ENABLE_OPTIMIZE} STREQUAL "YES")
	message(FATAL_ERROR " Combining optimize and debug is not possible")
endif()

if(${ENABLE_DEBUG} STREQUAL "YES")
	# Removing flags
	string(REGEX MATCHALL "-O[0-9]+" FOUND_FLAGS "${CMAKE_C_FLAGS}")
	list(LENGTH FOUND_FLAGS FOUND_FLAGS_LENGTH)
	if(FOUND_FLAGS_LENGTH GREATER 0)
		string(REPLACE "-O[0-9]+" "" CMAKE_C_FLAGS "${CMAKE_C_FLAGS}") # Remove -Ox
		message(STATUS "Removed${FOUND_FLAGS} flag(s) for debug build")
	endif()

	# Adding flags
	set(NEW_CMAKE_C_FLAGS "")
	if("${CMAKE_C_COMPILER_ID}" STREQUAL "GNU")
		set(NEW_CMAKE_C_FLAGS "${NEW_CMAKE_C_FLAGS} -g3")
	else()
		set(NEW_CMAKE_C_FLAGS "${NEW_CMAKE_C_FLAGS} -g")
	endif()

	string(LENGTH NEW_CMAKE_C_FLAGS NEW_CMAKE_FLAGS_LENGTH)
	if(NEW_CMAKE_FLAGS_LENGTH GREATER 0)
		message(STATUS "Added${NEW_CMAKE_C_FLAGS} flag(s) for debug build")
		set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${NEW_CMAKE_C_FLAGS}")
	endif()
endif()

if(${ENABLE_ASSERT} STREQUAL "NO")
	defineCmacro("NDEBUG" "NDEBUG 1")
endif()

if(${ENABLE_OPTIMIZE} STREQUAL "YES")
	# Removing flags
	string(REGEX MATCHALL "-O[0-9]+" FOUND_FLAGS "${CMAKE_C_FLAGS}")
	list(LENGTH FOUND_FLAGS FOUND_FLAGS_LENGTH)
	if(FOUND_FLAGS_LENGTH GREATER 0)
		string(REPLACE "-O[0-9]+" "" CMAKE_C_FLAGS "${CMAKE_C_FLAGS}") # Remove -Ox
		message(STATUS "Removed${FOUND_FLAGS} flag(s) for optimize build")
	endif()

	if(${ENABLE_ASSERT} STREQUAL "YES")
		string(REGEX MATCHALL "-fomit-frame-pointer" FOUND_FLAGS "${CMAKE_C_FLAGS}")
		list(LENGTH FOUND_FLAGS FOUND_FLAGS_LENGTH)
		if(FOUND_FLAGS_LENGTH GREATER 0)
			string(REPLACE "-O[0-9]+" "" CMAKE_C_FLAGS "${CMAKE_C_FLAGS}") # Remove -fomit-frame-pointer
			message(STATUS "Removed${FOUND_FLAGS} flag(s) for optimize build")
		endif()
	endif()

	# Adding flags
	set(NEW_CMAKE_C_FLAGS "")
	if(${CMAKE_SYSTEM_NAME} STREQUAL "Clang")
		set(NEW_CMAKE_C_FLAGS "${NEW_CMAKE_C_FLAGS} -O3")
		if(${ENABLE_ASSERT} STREQUAL "NO")
			set(NEW_CMAKE_C_FLAGS "${NEW_CMAKE_C_FLAGS} -fomit-frame-pointer")
		endif()
	elseif(${CMAKE_SYSTEM_NAME} STREQUAL "GNU")
		set(NEW_CMAKE_C_FLAGS "${NEW_CMAKE_C_FLAGS} -O3")
		if(${ENABLE_ASSERT} STREQUAL "NO")
			set(NEW_CMAKE_C_FLAGS "${NEW_CMAKE_C_FLAGS} -fomit-frame-pointer")
		endif()
		set(NEW_CMAKE_C_FLAGS "${NEW_CMAKE_C_FLAGS} -pipe")
	elseif(${CMAKE_SYSTEM_NAME} STREQUAL "Intel")
		set(NEW_CMAKE_C_FLAGS "${NEW_CMAKE_C_FLAGS} -O2")
	endif()

	string(LENGTH NEW_CMAKE_C_FLAGS NEW_CMAKE_FLAGS_LENGTH)
	if(NEW_CMAKE_FLAGS_LENGTH GREATER 0)
		message(STATUS "Added${NEW_CMAKE_C_FLAGS} flag(s) for optimize build")
		set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${NEW_CMAKE_C_FLAGS}")
	endif()

	checkCompilerFlag("-D_FORTIFY_SOURCE=2")
endif()

set(HAVE_PYTHON2 NO)
set(HAVE_PYTHON3 NO)
set(PYTHON2 "AUTO" CACHE STRING "python2 is installed as FILE")
set(PYTHON3 "AUTO" CACHE STRING "python3 is installed as FILE")
set(PYTHON2CONFIG "AUTO" CACHE STRING "python2-config is installed as FILE")
set(PYTHON3CONFIG "AUTO" CACHE STRING "python3-config is installed as FILE")

message(STATUS "Checking major version of Python interpreter")
exec_program("python" ARGS "-V" OUTPUT_VARIABLE PY_OUPUT_RES RETURN_VALUE PY_RETURN_CODE)
if(PY_RETURN_CODE EQUAL 0 AND PY_OUPUT_RES)
	string(FIND "${PY_OUPUT_RES}" "Python 2" MAJOR_IS_PYTHON2)
	string(FIND "${PY_OUPUT_RES}" "Python 3" MAJOR_IS_PYTHON3)
	if(NOT MAJOR_IS_PYTHON2 EQUAL -1)
		set(MAJOR_PYTHON "2")
		set(HAVE_PYTHON2 YES)
		set(PY2_OUPUT_RES "${PY_OUPUT_RES}")
	elseif(NOT MAJOR_IS_PYTHON3 EQUAL -1)
		set(MAJOR_PYTHON "3")
		set(HAVE_PYTHON3 YES)
		set(PY3_OUPUT_RES "${PY_OUPUT_RES}")
	else()
		message(FATAL_ERROR " Only python versions 2 and 3 are supported by MonetDB")
	endif()
	if(MAJOR_IS_PYTHON2 OR MAJOR_IS_PYTHON3)
		message(STATUS "Major Python interpreter: ${MAJOR_PYTHON}")
	endif()
endif()

if(NOT ${PYTHON2} STREQUAL "NO")
	if(${PYTHON2} STREQUAL "AUTO")
		set(SEARCH_PYTHON2 "python2")
	else()
		set(SEARCH_PYTHON2 "${PYTHON2}")
	endif()

	if(NOT CMAKE_CROSSCOMPILING)
		exec_program("${SEARCH_PYTHON2}" ARGS "-V" OUTPUT_VARIABLE PY2_CUSTOM_OUPUT_RES RETURN_VALUE PY2_RETURN_CODE)
		if(PY2_RETURN_CODE EQUAL 0 AND PY2_CUSTOM_OUPUT_RES)
			string(FIND "${PY2_CUSTOM_OUPUT_RES}" "Python 2" HAS_PYTHON2)
			if(HAS_PYTHON2 EQUAL -1)
				message(FATAL_ERROR " Custom python 2 executable not found")
			else()
				set(HAVE_PYTHON2 YES)
				set(PY2_OUPUT_RES ${PY2_CUSTOM_OUPUT_RES})
			endif()
		endif()
		if(NOT HAVE_PYTHON2)
			message(FATAL_ERROR " Python 2 executable not found")
		endif()
	endif()

	string(LENGTH PY2_OUPUT_RES PY2_OUPUT_LENGTH)
	string(SUBSTRING ${PY2_OUPUT_RES} 9 PY2_OUPUT_LENGTH PY2_VERSION)
	if(PY2_VERSION LESS 6)
		set(HAVE_PYTHON2 NO)
		message(FATAL_ERROR " Python 2 executable is too old (<2.6)")
	endif()

	set(PYTHON2_LIBDIR "AUTO" CACHE STRING "Path for Python 2 library directory (where Python 2 modules should be installed)")
	if(${PYTHON2_LIBDIR} STREQUAL "YES" OR ${PYTHON2_LIBDIR} STREQUAL "AUTO")
		if(CMAKE_CROSSCOMPILING)
			message(FATAL_ERROR " Must specify PYTHON2_LIBDIR when cross compiling")
		endif()
		if(${CMAKE_SYSTEM_NAME} STREQUAL "Darwin" AND CMAKE_SYSTEM_VERSION VERSION_EQUAL 9 AND PY2_VERSION VERSION_EQUAL 2.5)
			exec_program("${SEARCH_PYTHON2}" ARGS "-c 'import distutils.sysconfig; print distutils.sysconfig.get_python_lib(0,1,\"${CMAKE_INSTALL_PREFIX}\")' 2>/dev/null" OUTPUT_VARIABLE PYTHON2_LIBDIR RETURN_VALUE PYTHON2_LIBDIR_CODE) # TODO Escape this
			if(PYTHON2_LIBDIR)
				set(PYTHON2_LIBDIR "${PYTHON2_LIBDIR}/site-packages") # Runs on a POSIX platform, so it's safe to do
			endif()
		else()
			exec_program("${SEARCH_PYTHON2}" ARGS "-c 'import distutils.sysconfig; print distutils.sysconfig.get_python_lib(0,0,\"${CMAKE_INSTALL_PREFIX}\")' 2>/dev/null" OUTPUT_VARIABLE PYTHON2_LIBDIR RETURN_VALUE PYTHON2_LIBDIR_CODE) # TODO Escape this
		endif()

		if(PYTHON2_LIBDIR AND PYTHON2_LIBDIR_CODE EQUAL 0)
			string(LENGTH CMAKE_INSTALL_PREFIX CMAKE_INSTALL_PREFIX_LENGTH)
			math(EXPR CMAKE_INSTALL_PREFIX_LENGTH "${CMAKE_INSTALL_PREFIX_LENGTH}+1") # add the / separator
			string(LENGTH PYTHON2_LIBDIR PYTHON2_LIBDIR_PREFIX_LENGTH)
			string(SUBSTRING ${PYTHON2_LIBDIR} ${CMAKE_INSTALL_PREFIX_LENGTH} PYTHON2_LIBDIR_PREFIX_LENGTH PYTHON2_LIBDIR) # remove the prefix
		else()
			message(FATAL_ERROR " Could not find PYTHON2_LIBDIR")
		endif()
	endif()
else()
	set(HAVE_PYTHON2 NO)
endif()

if(NOT ${PYTHON3} STREQUAL "NO")
	if(${PYTHON3} STREQUAL "AUTO")
		set(SEARCH_PYTHON3 "python3")
	else()
		set(SEARCH_PYTHON3 "${PYTHON3}")
	endif()

	if(NOT CMAKE_CROSSCOMPILING)
		exec_program("${SEARCH_PYTHON3}" ARGS "-V" OUTPUT_VARIABLE PY3_CUSTOM_OUPUT_RES RETURN_VALUE PY3_RETURN_CODE)
		if(PY3_RETURN_CODE EQUAL 0 AND PY3_CUSTOM_OUPUT_RES)
			string(FIND "${PY3_CUSTOM_OUPUT_RES}" "Python 3" HAS_PYTHON3)
			if(HAS_PYTHON3 EQUAL -1)
				message(FATAL_ERROR " Custom python 3 executable not found")
			else()
				set(HAVE_PYTHON3 YES)
				set(PY3_OUPUT_RES ${PY3_CUSTOM_OUPUT_RES})
			endif()
		endif()
		if(NOT HAVE_PYTHON3)
			message(FATAL_ERROR " Python 3 executable not found")
		endif()
	endif()

	set(PYTHON3_LIBDIR "AUTO" CACHE STRING "Path for Python 3 library directory (where Python 3 modules should be installed)")
	if(${PYTHON3_LIBDIR} STREQUAL "YES" OR ${PYTHON3_LIBDIR} STREQUAL "AUTO")
		if(CMAKE_CROSSCOMPILING)
			message(FATAL_ERROR " Must specify PYTHON3_LIBDIR when cross compiling")
		endif()
		exec_program("${SEARCH_PYTHON3}" ARGS "-c 'import distutils.sysconfig; print(distutils.sysconfig.get_python_lib(0,0,\"${CMAKE_INSTALL_PREFIX}\"))' 2>/dev/null" OUTPUT_VARIABLE PYTHON3_LIBDIR RETURN_VALUE PYTHON3_LIBDIR_CODE)

		if(PYTHON3_LIBDIR AND PYTHON3_LIBDIR_CODE EQUAL 0)
			string(LENGTH CMAKE_INSTALL_PREFIX CMAKE_INSTALL_PREFIX_LENGTH)
			math(EXPR CMAKE_INSTALL_PREFIX_LENGTH "${CMAKE_INSTALL_PREFIX_LENGTH}+1") # add the / separator
			string(LENGTH PYTHON3_LIBDIR PYTHON3_LIBDIR_PREFIX_LENGTH)
			string(SUBSTRING ${PYTHON3_LIBDIR} ${CMAKE_INSTALL_PREFIX_LENGTH} PYTHON3_LIBDIR_PREFIX_LENGTH PYTHON3_LIBDIR) # remove the prefix
		else()
			message(FATAL_ERROR " Could not find PYTHON3_LIBDIR")
		endif()
	endif()
else()
	set(HAVE_PYTHON3 NO)
endif()

if(HAVE_PYTHON2)
	set(PYTHON_LIBDIR ${PYTHON2_LIBDIR})
elseif(HAVE_PYTHON3)
	set(PYTHON_LIBDIR ${PYTHON3_LIBDIR})
endif()

if(NOT ENABLE_TESTING STREQUAL "NO" AND NOT HAVE_PYTHON2 AND NOT HAVE_PYTHON3)
	set(ENABLE_TESTING "NO")
endif()

if(ENABLE_EMBEDDED STREQUAL "NO") # TODO is this check needed anymore???
	if(${ENABLE_SQL} STREQUAL "YES" AND NOT BISON_FOUND)
		message(FATAL_ERROR "MonetDB/SQL requires bison")
	endif()
	if(BISON_FOUND AND BISON_VERSION VERSION_LESS_EQUAL 2.4.3)
		string(FIND "${CMAKE_C_FLAGS}" "-Wundef" FOUND_WDEF)
		if(NOT FOUND_WDEF EQUAL -1)
			string(REPLACE "-Wundef" "" CMAKE_C_FLAGS "${CMAKE_C_FLAGS}")
			message(STATUS "Removed -Wundef flag for bison")
		endif()
	endif()
else()
	message(WARN " Ignoring missing bison in embedded configuration")
endif()

set(OS_SOPREF "lib")
if(${CMAKE_SYSTEM_NAME} STREQUAL "CYGWIN")
	set(OS_DIRSEP  "/")
	set(OS_QDIRSEP "/")
	set(OS_PATHSEP ":")
	set(OS_SOEXT   "-0.dll")
	set(OS_SOPREF  "cyg")
elseif(${CMAKE_SYSTEM_NAME} STREQUAL "Darwin")
	set(OS_DIRSEP  "/")
	set(OS_QDIRSEP "/")
	set(OS_PATHSEP ":")
	set(OS_SOEXT   ".dylib")
elseif(${CMAKE_SYSTEM_NAME} STREQUAL "Windows")
	set(OS_DIRSEP  "\\\\")
	set(OS_QDIRSEP "\\\\")
	set(OS_PATHSEP ";")
	set(OS_SOEXT   ".dll")
elseif(UNIX)
	set(OS_DIRSEP  "/")
	set(OS_QDIRSEP "/")
	set(OS_PATHSEP ":")
	set(OS_SOEXT   ".so")
else()
	message(FATAL_ERROR "Unknown target operating system")
endif()

defineCmacro("DIR_SEP"      "DIR_SEP ${OS_DIRSEP}")
defineCmacro("DIR_SEP_STR"  "DIR_SEP_STR \"${OS_DIRSEP}\"")
defineCmacro("PATH_SEP"     "PATH_SEP ${OS_PATHSEP}")
defineCmacro("PATH_SEP_STR" "PATH_SEP_STR \"${OS_PATHSEP}\"")
defineCmacro("SO_EXT"       "SO_EXT \"${OS_SOEXT}\"")
defineCmacro("SO_PREFIX"    "SO_PREFIX \"${OS_SOPREF}\"")

# checks for libraries
set(PREV_CMAKE_REQUIRED_LIBRARIES "${CMAKE_REQUIRED_LIBRARIES}")
set(PREV_CMAKE_REQUIRED_INCLUDES "${CMAKE_REQUIRED_INCLUDES}")
set(PREV_CMAKE_REQUIRED_LINK_OPTIONS "${CMAKE_REQUIRED_LINK_OPTIONS}")
set(PREV_CMAKE_REQUIRED_FLAGS "${CMAKE_REQUIRED_FLAGS}")

set(WITH_BZ2 "AUTO" CACHE STRING "Include bz2 support (default=auto)")
if(NOT ${WITH_BZ2} STREQUAL "NO")
	pkg_search_module(BZIP2 NO_CMAKE_PATH NO_CMAKE_ENVIRONMENT_PATH bzip2)

	if(BZIP2_FOUND)
		check_include_file("bzlib.h" HAVE_BZLIB)
		if(HAVE_BZLIB)
			set(CMAKE_REQUIRED_LIBRARIES "${CMAKE_REQUIRED_LIBRARIES};bz2")
			check_symbol_exists("BZ2_bzopen" "bzlib.h" HAVE_BZLIB)
			set(CMAKE_REQUIRED_LIBRARIES "${PREV_CMAKE_REQUIRED_LIBRARIES}")
		endif()
	endif()
	if(HAVE_BZLIB)
		message(STATUS "bz2 library found")
	elseif(${WITH_BZ2} STREQUAL "YES")
		message(FATAL_ERROR "bz2 library not found")
	else()
		message(ERROR " bz2 library not found")
	endif()
endif()
if(HAVE_BZLIB)
	defineCmacro("HAVE_LIBBZ2" "HAVE_LIBBZ2 1")
endif()

set(WITH_SNAPPY "AUTO" CACHE STRING "Include snappy support (default=auto)")
if(NOT ${WITH_SNAPPY} STREQUAL "NO")
	pkg_search_module(SNAPPY NO_CMAKE_PATH NO_CMAKE_ENVIRONMENT_PATH snappy)

	if(SNAPPY_FOUND)
		message(STATUS "snappy library found")
		defineCmacro("HAVE_LIBSNAPPY" "HAVE_LIBSNAPPY 1")
	else()
		if(${WITH_SNAPPY} STREQUAL "YES")
			message(FATAL_ERROR "snappy library not found")
		else()
			message(ERROR " snappy library not found")
		endif()
	endif()
endif()

set(WITH_LZ4 "AUTO" CACHE STRING "Include lz4 library support (default=auto)")
if(NOT ${WITH_LZ4} STREQUAL "NO")
	pkg_search_module(LZ4 NO_CMAKE_PATH NO_CMAKE_ENVIRONMENT_PATH liblz4>=1.8.0)

	if(LZ4_FOUND)
		message(STATUS "lz4 library found")
		defineCmacro("HAVE_LIBLZ4" "HAVE_LIBLZ4 1")
	else()
		if(${WITH_LZ4} STREQUAL "YES")
			message(FATAL_ERROR "lz4 library not found")
		else()
			message(ERROR " lz4 library not found")
		endif()
	endif()
endif()

# use CMAKE_DL_LIBS for dl
# for math library, just a check will do

# Malloc libs
set(CMAKE_REQUIRED_LIBRARIES "${CMAKE_REQUIRED_LIBRARIES};umem")
check_symbol_exists("malloc" "umem.h" HAVE_UMEM)
set(CMAKE_REQUIRED_LIBRARIES "${PREV_CMAKE_REQUIRED_LIBRARIES}")
if(HAVE_UMEM)
	set(MALLOC_LIBS "umem")
else()
	set(CMAKE_REQUIRED_LIBRARIES "${CMAKE_REQUIRED_LIBRARIES};mtmalloc")
	check_symbol_exists("malloc" "mtmalloc.h" HAVE_MT)
	set(CMAKE_REQUIRED_LIBRARIES "${PREV_CMAKE_REQUIRED_LIBRARIES}")
	if(HAVE_MT)
		set(MALLOC_LIBS "mtmalloc")
	else()
		set(CMAKE_REQUIRED_LIBRARIES "${CMAKE_REQUIRED_LIBRARIES};malloc")
		check_symbol_exists("malloc" "malloc.h" HAVE_MALLOC)
		set(CMAKE_REQUIRED_LIBRARIES "${PREV_CMAKE_REQUIRED_LIBRARIES}")
		if(HAVE_MALLOC)
			set(MALLOC_LIBS "malloc")
		endif()
	endif()
endif()

# Pthread libs
set(HAS_PTHREAD_LIBS OFF)
set(CUSTOM_PTHREAD_INCS "")
set(CUSTOM_PTHREAD_LIBS "")

set(WITH_PTHREAD "AUTO" CACHE STRING "Pthread library is installed in DIR")
if(NOT ${WITH_PTHREAD} STREQUAL "NO")
	if(NOT ${WITH_PTHREAD} MATCHES "^AUTO|YES$")
		set(CUSTOM_PTHREAD_INCS "${WITH_PTHREAD}/include")
		set(CUSTOM_PTHREAD_LIBS "${WITH_PTHREAD}/lib")
		set(CMAKE_REQUIRED_INCLUDES "${CMAKE_REQUIRED_INCLUDES};${CUSTOM_PTHREAD_INCS}") # Set back again in the end!
		set(CMAKE_REQUIRED_LINK_OPTIONS "${CMAKE_REQUIRED_LINK_OPTIONS};${CUSTOM_PTHREAD_LIBS}") # Set back again in the end!
	endif()

	check_include_file("pthread.h" HAVE_PTHREAD_H)
	if(HAVE_PTHREAD_H)
		defineCmacro("HAVE_PTHREAD_H" "HAVE_PTHREAD_H 1")
	endif()
	check_include_file("semaphore.h" HAVE_SEMAPHORE_H)
	if(HAVE_SEMAPHORE_H)
		defineCmacro("HAVE_SEMAPHORE_H" "HAVE_SEMAPHORE_H 1")
	endif()
	check_include_file("sched.h" HAVE_SCHED_H)
	if(HAVE_SCHED_H)
		defineCmacro("HAVE_SCHED_H" "HAVE_SCHED_H 1")
	endif()

	if(${WITH_PTHREAD} MATCHES "^AUTO|YES$")
		if("${CMAKE_C_COMPILER_ID}" MATCHES "^Clang|AppleClang|GNU$")
			if(NOT ${CMAKE_SYSTEM_NAME} STREQUAL "Darwin")
				set(HAS_PTHREAD_LIBS ON)
			endif()
		elseif(${WITH_PTHREAD} STREQUAL "YES")
			message(FATAL_ERROR "pthread library not supported by the platform")
		endif()
	endif()

	set(CMAKE_REQUIRED_LIBRARIES "${CMAKE_REQUIRED_LIBRARIES};pthread")
	check_symbol_exists("pthread_kill" "signal.h" HAVE_PTHREAD_KILL)
	if(HAVE_PTHREAD_KILL)
		defineCmacro("HAVE_PTHREAD_KILL" "HAVE_PTHREAD_KILL 1")
	endif()

	check_symbol_exists("pthread_sigmask" "signal.h" HAVE_PTHREAD_SIGMASK)
	if(HAVE_PTHREAD_SIGMASK)
		defineCmacro("HAVE_PTHREAD_SIGMASK" "HAVE_PTHREAD_SIGMASK 1")
	endif()

	set(CMAKE_REQUIRED_INCLUDES "${PREV_CMAKE_REQUIRED_INCLUDES}")
	set(CMAKE_REQUIRED_LIBRARIES "${PREV_CMAKE_REQUIRED_LIBRARIES}")
	set(CMAKE_REQUIRED_LINK_OPTIONS "${PREV_CMAKE_REQUIRED_LINK_OPTIONS}")
endif()
if(HAVE_PTHREAD_H)
	defineCmacro("HAVE_LIBPTHREAD" "HAVE_LIBPTHREAD 1")
else()
	message(FATAL_ERROR "MonetDB requires libpthread (try -DWITH_PTHREAD")
endif()

# Readline libs
set(READLINE_LIBS "")
set(CUSTOM_READLINE_INCS "")
set(CUSTOM_READLINE_LIBS "")

set(WITH_READLINE "AUTO" CACHE STRING "Readline library is installed in DIR")
if(NOT ${WITH_READLINE} STREQUAL "NO")
	if(NOT ${WITH_READLINE} MATCHES "^AUTO|YES$")
		set(CUSTOM_READLINE_INCS "${WITH_READLINE}/include")
		set(CUSTOM_READLINE_LIBS "${WITH_READLINE}/lib")
		set(CMAKE_REQUIRED_INCLUDES "${CMAKE_REQUIRED_INCLUDES};${CUSTOM_READLINE_INCS}") # Set back again in the end!
		set(CMAKE_REQUIRED_LINK_OPTIONS "${CMAKE_REQUIRED_LINK_OPTIONS};${CUSTOM_READLINE_LIBS}") # Set back again in the end!
	endif()

	check_include_files("stdio.h;readline/readline.h" HAVE_READLINE_LIB LANGUAGE C)
	if(HAVE_READLINE_LIB)
		set(CMAKE_REQUIRED_LIBRARIES "${CMAKE_REQUIRED_LIBRARIES};readline")
		check_symbol_exists("readline" "stdio.h;readline/readline.h;readline/history.h" HAVE_READLINE_LIB)
		if(HAVE_READLINE_LIB)
			set(READLINE_LIBS "${READLINE_LIBS} readline")
		else()
			set(CMAKE_REQUIRED_LIBRARIES "${CMAKE_REQUIRED_LIBRARIES};termcap")
			check_symbol_exists("rl_history_search_forward" "stdio.h;readline/readline.h;readline/history.h" HAVE_READLINE_LIB)
			if(HAVE_READLINE_LIB)
				set(READLINE_LIBS "${READLINE_LIBS} readline termcap")
			else()
				set(CMAKE_REQUIRED_LIBRARIES "${PREV_CMAKE_REQUIRED_LIBRARIES};readline;ncurses")
				check_symbol_exists("rl_reverse_search_history" "stdio.h;readline/readline.h;readline/history.h" HAVE_READLINE_LIB)
				if(HAVE_READLINE_LIB)
					set(READLINE_LIBS "${READLINE_LIBS} readline ncurses")
				elseif(${WITH_READLINE} STREQUAL "YES")
					message(FATAL_ERROR "Readline library not found")
				else()
					message(WARN " Readline library not found")
				endif()
			endif()
		endif()
	elseif(${WITH_READLINE} STREQUAL "YES")
		message(FATAL_ERROR "Readline library not found")
	else()
		message(WARN " Readline library not found")
	endif()

	if(HAVE_READLINE_LIB)
		check_symbol_exists("rl_completion_matches" "stdio.h;readline/readline.h" HAVE_READLINE_LIB)
		if(HAVE_READLINE_LIB)
			message(STATUS "Checking whether rl_completion_func_t exists")
			check_c_source_compiles("
				#include <stdio.h>
				#include <readline/readline.h>

				int main(int argc, char **argv) {
					rl_completion_func_t *func = NULL;
					(void) argc;
					(void) argv;
					(void) func;
					return 0;
				}
			" HAVE_READLINE_LIB)
			if(NOT HAVE_READLINE_LIB)
				if(${WITH_READLINE} STREQUAL "YES")
					message(FATAL_ERROR "readline/readline.h does not contain rl_completion_func_t, is it GNU readline?")
				else()
					message(WARN " readline/readline.h does not contain rl_completion_func_t, is it GNU readline?")
				endif()
			endif()
		elseif(${WITH_READLINE} STREQUAL "YES")
			message(FATAL_ERROR "Readline library does not contain rl_completion_matches")
		else()
			message(WARN " Readline library does not contain rl_completion_matches")
		endif()
	endif()

	set(CMAKE_REQUIRED_INCLUDES "${PREV_CMAKE_REQUIRED_INCLUDES}")
	set(CMAKE_REQUIRED_LIBRARIES "${PREV_CMAKE_REQUIRED_LIBRARIES}")
	set(CMAKE_REQUIRED_LINK_OPTIONS "${PREV_CMAKE_REQUIRED_LINK_OPTIONS}")
endif()
if(HAVE_READLINE_LIB)
	defineCmacro("HAVE_LIBREADLINE" "HAVE_LIBREADLINE 1")
endif()

# Iconv
set(ICONV_LIBS "")
if(Iconv_FOUND)
	defineCmacro("HAVE_ICONV" "HAVE_ICONV 1")
	defineCmacro("HAVE_ICONV_H" "HAVE_ICONV_H 1")
	if(NOT Iconv_IS_BUILT_IN)
		set(ICONV_LIBS "${Iconv_LIBRARIES}")
	endif()
endif()

# UUID
set(WITH_UUID "YES" CACHE STRING "Include UUID support (default=yes)")
if(NOT ${WITH_UUID} STREQUAL "NO")
	set(CMAKE_REQUIRED_LIBRARIES "${CMAKE_REQUIRED_LIBRARIES};uuid")
	check_symbol_exists("uuid_generate" "uuid/uuid.h" HAVE_UUID_LIB)
	if(HAVE_UUID_LIB)
		defineCmacro("HAVE_UUID" "HAVE_UUID 1")
		defineCmacro("HAVE_UUID_UUID_H" "HAVE_UUID_UUID_H 1")
	endif()
	set(CMAKE_REQUIRED_LIBRARIES "${PREV_CMAKE_REQUIRED_LIBRARIES}")
endif()

# OpenSSL or CommonCrypto library
if(${CMAKE_SYSTEM_NAME} STREQUAL "Darwin")
	defineCmacro("HAVE_COMMONCRYPTO" "HAVE_COMMONCRYPTO 1")
	set(CMAKE_REQUIRED_LIBRARIES "${CMAKE_REQUIRED_LIBRARIES};crypto") # TODO test this

	check_symbol_exists("CC_MD5_Update" "CommonCrypto/CommonDigest.h" HAVE_CC_MD5_Update_FUNC)
	if(HAVE_CC_MD5_Update_FUNC)
		defineCmacro("HAVE_MD5_UPDATE" "HAVE_MD5_UPDATE 1")
	endif()
	check_symbol_exists("CC_RIPEMD160_Update" "CommonCrypto/CommonDigest.h" HAVE_CC_RIPEMD160_Update_FUNC)
	if(HAVE_CC_RIPEMD160_Update_FUNC)
		defineCmacro("HAVE_RIPEMD160_UPDATE" "HAVE_RIPEMD160_UPDATE 1")
	endif()
	check_symbol_exists("CC_SHA1_Update" "CommonCrypto/CommonDigest.h" HAVE_CC_SHA1_Update_FUNC)
	if(HAVE_CC_SHA1_Update_FUNC)
		defineCmacro("HAVE_SHA1_UPDATE" "HAVE_SHA1_UPDATE 1")
	endif()
	check_symbol_exists("CC_SHA224_Update" "CommonCrypto/CommonDigest.h" HAVE_CC_SHA224_Update_FUNC)
	if(HAVE_CC_SHA224_Update_FUNC)
		defineCmacro("HAVE_SHA224_UPDATE" "HAVE_SHA224_UPDATE 1")
	endif()
	check_symbol_exists("CC_SHA256_Update" "CommonCrypto/CommonDigest.h" HAVE_CC_SHA256_Update_FUNC)
	if(HAVE_CC_SHA256_Update_FUNC)
		defineCmacro("HAVE_SHA256_UPDATE" "HAVE_SHA256_UPDATE 1")
	endif()
	check_symbol_exists("CC_SHA384_Update" "CommonCrypto/CommonDigest.h" HAVE_CC_SHA384_Update_FUNC)
	if(HAVE_CC_SHA384_Update_FUNC)
		defineCmacro("HAVE_SHA384_UPDATE" "HAVE_SHA384_UPDATE 1")
	endif()
	check_symbol_exists("CC_SHA512_Update" "CommonCrypto/CommonDigest.h" HAVE_CC_SHA512_Update_FUNC)
	if(HAVE_CC_SHA512_Update_FUNC)
		defineCmacro("CC_SHA512_Update" "CC_SHA512_Update 1")
	endif()
else()
	set(WITH_OPENSSL "YES" CACHE STRING "Include OpenSSL support (default=yes)")
	if(NOT ${WITH_OPENSSL} STREQUAL "NO")
		pkg_search_module(OPENSSL NO_CMAKE_PATH NO_CMAKE_ENVIRONMENT_PATH openssl)

		if(OPENSSL_FOUND)
			message(STATUS "openssl library found")
			set(CMAKE_REQUIRED_LIBRARIES "${CMAKE_REQUIRED_LIBRARIES};ssl;crypto")

			check_symbol_exists("MD5_Update" "openssl/md5.h" HAVE_MD5_Update_FUNC)
			if(HAVE_MD5_Update_FUNC)
				defineCmacro("HAVE_MD5_UPDATE" "HAVE_MD5_UPDATE 1")
			endif()
			check_symbol_exists("RIPEMD160_Update" "openssl/ripemd.h" HAVE_RIPEMD160_Update_FUNC)
			if(HAVE_RIPEMD160_Update_FUNC)
				defineCmacro("HAVE_RIPEMD160_UPDATE" "HAVE_RIPEMD160_UPDATE 1")
			endif()
			check_symbol_exists("SHA1_Update" "openssl/sha.h" HAVE_SHA1_Update_FUNC)
			if(HAVE_SHA1_Update_FUNC)
				defineCmacro("HAVE_SHA1_UPDATE" "HAVE_SHA1_UPDATE 1")
			endif()
			check_symbol_exists("SHA224_Update" "openssl/sha.h" HAVE_SHA224_Update_FUNC)
			if(HAVE_SHA224_Update_FUNC)
				defineCmacro("HAVE_SHA224_UPDATE" "HAVE_SHA224_UPDATE 1")
			endif()
			check_symbol_exists("SHA256_Update" "openssl/sha.h" HAVE_SHA256_Update_FUNC)
			if(HAVE_SHA256_Update_FUNC)
				defineCmacro("HAVE_SHA256_UPDATE" "HAVE_SHA256_UPDATE 1")
			endif()
			check_symbol_exists("SHA384_Update" "openssl/sha.h" HAVE_SHA384_Update_FUNC)
			if(HAVE_SHA384_Update_FUNC)
				defineCmacro("HAVE_SHA384_UPDATE" "HAVE_SHA384_UPDATE 1")
			endif()
			check_symbol_exists("SHA512_Update" "openssl/sha.h" HAVE_SHA512_Update_FUNC)
			if(HAVE_SHA512_Update_FUNC)
				defineCmacro("SHA512_Update" "SHA512_Update 1")
			endif()

			if(NOT HAVE_${PASSWORD_BACKEND}_Update_FUNC)
				if(${ENABLE_MONETDB5} STREQUAL "YES")
					message(FATAL_ERROR "OpenSSL library found but checksum algorithm required for MonetDB5 not found")
				else()
					set(ENABLE_MONETDB5 "NO")
					message(WARN " OpenSSL library found but required checksum algorithm not found, so disabling")
				endif()
			else()
				defineCmacro("HAVE_OPENSSL" "HAVE_OPENSSL 1")
			endif()
		else()
			if(${ENABLE_MONETDB5} STREQUAL "YES")
				message(FATAL_ERROR "OpenSSL library not found but required for MonetDB5")
			else()
				set(ENABLE_MONETDB5 "NO")
				message(WARN " OpenSSL library not found but required for MonetDB5")
			endif()
		endif()
	endif()
endif()
set(CMAKE_REQUIRED_LIBRARIES "${PREV_CMAKE_REQUIRED_LIBRARIES}")

# Regex library
set(WITH_REGEX "PCRE" CACHE STRING "Use either PCRE or POSIX regular expressions (default=PCRE if available)")
if(NOT ${WITH_REGEX} MATCHES "^AUTO|PCRE|POSIX$")
	message(FATAL_ERROR "WITH_REGEX argument must be either AUTO, PCRE or POSIX")
endif()

if(NOT ${WITH_REGEX} STREQUAL "POSIX")
	set(PCRE_REQUIRED_VERSION "4.5")
	pkg_search_module(PCRE NO_CMAKE_PATH NO_CMAKE_ENVIRONMENT_PATH libpcre>=${PCRE_REQUIRED_VERSION})

	if(PCRE_FOUND)
		message(STATUS "PCRE library found")
		message(STATUS "Checking for UTF-8 support on PCRE library")
		set(CMAKE_REQUIRED_LIBRARIES "${CMAKE_REQUIRED_LIBRARIES};pcre")
		check_c_source_runs("
			#include <pcre.h>

			int main(int argc, char **argv) {
				int rc;
				(void) argc;
				(void) argv;
				if (pcre_config(PCRE_CONFIG_UTF8, &rc) != 0)
					return 1;
				exit(!rc);
				return 0;
			}
		" PCRE_HAS_UTF8)
		set(CMAKE_REQUIRED_LIBRARIES "${PREV_CMAKE_REQUIRED_LIBRARIES}")
		if(PCRE_HAS_UTF8)
			defineCmacro("HAVE_LIBPCRE" "HAVE_LIBPCRE 1")
		elseif(${WITH_REGEX} STREQUAL "PCRE")
			message(FATAL_ERROR "PCRE library found but no UTF-8 support")
		else()
			message(ERROR " PCRE library found but no UTF-8 support")
		endif()
	else()
		if(PCRE_FOUND AND PCRE_VERSION VERSION_LESS_EQUAL ${PCRE_REQUIRED_VERSION})
			set(PCRE_ERROR_MESSAGE " PCRE library found, but the version is too old ${PCRE_VERSION} < ${PCRE_REQUIRED_VERSION}")
		else()
			set(PCRE_ERROR_MESSAGE " PCRE library not found or not usable")
		endif()

		if(${WITH_REGEX} STREQUAL "PCRE")
			message(FATAL_ERROR "${PCRE_ERROR_MESSAGE}")
		else()
			message(WARN "${PCRE_ERROR_MESSAGE}")
		endif()
	endif()
endif()

if(NOT PCRE_HAS_UTF8)
	message(STATUS "Checking for GNU regex library")
	check_c_source_runs("
		#include <regex.h>

		int main(int argc, char **argv) {
			regex_t re;
			(void) argc;
			(void) argv;
			return regcomp(&re, \"hello\", REG_EXTENDED|REG_NOSUB) ? 1 : 0;
		}
	" HAS_POSIX_REGEX)
endif()

if(NOT PCRE_HAS_UTF8 AND NOT HAS_POSIX_REGEX)
	if(${ENABLE_MONETDB5} STREQUAL "YES")
		message(FATAL_ERROR "PCRE library or GNU regex library not found but required for MonetDB5")
	else()
		set(ENABLE_MONETDB5 "NO")
		message(WARN " PCRE library or GNU regex library not found but required for MonetDB5")
	endif()
endif()

set(WITH_LIBXML2 "AUTO" CACHE STRING "Include libxml2 support (default=auto)")
if(NOT ${WITH_LIBXML2} STREQUAL "NO")
	pkg_search_module(LIBXML2 NO_CMAKE_PATH NO_CMAKE_ENVIRONMENT_PATH libxml-2.0)

	if(LIBXML2_FOUND)
		message(STATUS "libxml2 library found")
		defineCmacro("HAVE_LIBXML" "HAVE_LIBXML 1")
	else()
		if(${WITH_LIBXML2} STREQUAL "YES")
			message(FATAL_ERROR "libxml2 library not found")
		else()
			message(ERROR " libxml2 library not found")
		endif()
	endif()
endif()

set(WITH_CURL "AUTO" CACHE STRING "Include cURL support (default=auto)")
if(NOT ${WITH_CURL} STREQUAL "NO")
	pkg_search_module(CURL NO_CMAKE_PATH NO_CMAKE_ENVIRONMENT_PATH libcurl)

	if(CURL_FOUND)
		message(STATUS "libcurl library found")
		defineCmacro("HAVE_CURL" "HAVE_CURL 1")
	else()
		if(${WITH_CURL} STREQUAL "YES")
			message(FATAL_ERROR "libcurl library not found")
		else()
			message(ERROR " libcurl library not found")
		endif()
	endif()
endif()

set(WITH_ZLIB "AUTO" CACHE STRING "Include zlib support (default=auto)")
if(NOT ${WITH_ZLIB} STREQUAL "NO")
	pkg_search_module(ZLIB NO_CMAKE_PATH NO_CMAKE_ENVIRONMENT_PATH zlib)

	if(ZLIB_FOUND)
		message(STATUS "zlib library found")
		defineCmacro("HAVE_LIBZ" "HAVE_LIBZ 1")
	else()
		if(${WITH_CURL} STREQUAL "YES")
			message(FATAL_ERROR "zlib library not found")
		else()
			message(ERROR " zlib library not found")
		endif()
	endif()
endif()

set(WITH_LIBLZMA "AUTO" CACHE STRING "Include liblzma support (default=auto)")
if(NOT ${WITH_LIBLZMA} STREQUAL "NO")
	pkg_search_module(LIBLZMA NO_CMAKE_PATH NO_CMAKE_ENVIRONMENT_PATH liblzma)

	if(LIBLZMA_FOUND)
		message(STATUS "liblzma library found")
		defineCmacro("HAVE_LIBLZMA" "HAVE_LIBLZMA 1")
	else()
		if(${WITH_LIBLZMA} STREQUAL "YES")
			message(FATAL_ERROR "liblzma library not found")
		else()
			message(ERROR " liblzma library not found")
		endif()
	endif()
endif()

set(WITH_VALGRIND "NO" CACHE STRING "Include valgrind support (default=no)")
if(NOT ${WITH_VALGRIND} STREQUAL "NO")
	pkg_search_module(VALGRIND NO_CMAKE_PATH NO_CMAKE_ENVIRONMENT_PATH valgrind)

	if(VALGRIND_FOUND)
		message(STATUS "valgrind library found")
		defineCmacro("HAVE_VALGRIND" "HAVE_VALGRIND 1")
	else()
		if(${WITH_VALGRIND} STREQUAL "YES")
			message(FATAL_ERROR "valgrind library not found")
		else()
			message(ERROR " valgrind library not found")
		endif()
	endif()
endif()

CHECK_TYPE_SIZE(int SIZEOF_INT BUILTIN_TYPES_ONLY LANGUAGE C)
CHECK_TYPE_SIZE(short SIZEOF_SHORT BUILTIN_TYPES_ONLY LANGUAGE C)
CHECK_TYPE_SIZE(char SIZEOF_CHAR BUILTIN_TYPES_ONLY LANGUAGE C)
CHECK_TYPE_SIZE(long SIZEOF_LONG BUILTIN_TYPES_ONLY LANGUAGE C)

# leave for last
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -D_REENTRANT")
configure_file(${CMAKE_SOURCE_DIR}/cmake/monetdb_config.h.in ${CMAKE_SOURCE_DIR}/debugme.h)
