#[[
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0.  If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright 1997 - July 2008 CWI, August 2008 - 2019 MonetDB B.V.
#]]

cmake_minimum_required(VERSION 3.12 FATAL_ERROR)

project(MonetDB C)

set(C_STANDARD_REQUIRED ON)
set(CMAKE_C_STANDARD 99)
set(PACKAGE "MonetDB" CACHE STRING "MonetDB, SQL queries at light speed")

set(CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake" CACHE INTERNAL "Location of custom CMake modules.")
include(CheckCSourceCompiles REQUIRED)
include(CheckIncludeFile REQUIRED)
include(CheckIncludeFiles REQUIRED)
include(CMakePushCheckState REQUIRED)
include(CheckStructHasMember REQUIRED)
include(CheckSymbolExists REQUIRED)
include(CheckTypeSize REQUIRED)
include(TestBigEndian REQUIRED)
include(TestLargeFiles REQUIRED)

cmake_policy(SET CMP0075 NEW) # Include file check macros honor CMAKE_REQUIRED_LIBRARIES

# Set host information
string(TOLOWER "${CMAKE_SYSTEM_PROCESSOR}" CMAKE_SYSTEM_PROCESSOR_LOWER)
string(TOLOWER "${CMAKE_SYSTEM_NAME}" CMAKE_SYSTEM_NAME_LOWER)
string(TOLOWER "${CMAKE_C_COMPILER_ID}" CMAKE_C_COMPILER_ID_LOWER)
set("HOST" "${CMAKE_SYSTEM_PROCESSOR_LOWER}-pc-${CMAKE_SYSTEM_NAME_LOWER}-${CMAKE_C_COMPILER_ID_LOWER}")

# Change these variables between releases
set(MONETDB_VERSION_MAJOR "11")
set(MONETDB_VERSION "${MONETDB_VERSION_MAJOR}.34.0")
set(VERSION "${MONETDB_VERSION}")

set(GDK_VERSION_MAJOR "18")
set(GDK_VERSION "${GDK_VERSION_MAJOR}.0.0")

set(MAPI_VERSION_MAJOR "12")
set(MAPI_VERSION "${MAPI_VERSION_MAJOR}.0.0")

set(MONETDB5_VERSION_MAJOR "27")
set(MONETDB5_VERSION "${MONETDB5_VERSION_MAJOR}.0.0")

set(STREAM_VERSION_MAJOR "13")
set(STREAM_VERSION "${STREAM_VERSION_MAJOR}.0.0")

# Packaging information
set(PACKAGE "MonetDB")
set(PACKAGE_NAME "MonetDB")
set(PACKAGE_TARNAME "MonetDB")
set(PACKAGE_STRING "MonetDB ${MONETDB_VERSION}")
set(PACKAGE_URL "https://www.monetdb.org/")
set(PACKAGE_BUGREPORT "https://bugs.monetdb.org/")
set(PACKAGE_VERSION "${MONETDB_VERSION}")

# Check current version control revision
if(EXISTS "${CMAKE_SOURCE_DIR}/.hg")
	exec_program("hg" "${CMAKE_SOURCE_DIR}" ARGS "id -i" OUTPUT_VARIABLE HG_OUPUT_RES RETURN_VALUE HG_RETURN_CODE)
	if(HG_RETURN_CODE EQUAL 0 AND HG_OUPUT_RES)
		set(MERCURIAL_ID "${HG_OUPUT_RES}")
	endif()
elseif(EXISTS "${CMAKE_SOURCE_DIR}/.git")
	exec_program("git" "${CMAKE_SOURCE_DIR}" ARGS "rev-parse HEAD" OUTPUT_VARIABLE GIT_OUPUT_RES RETURN_VALUE GIT_RETURN_CODE)
	if(GIT_RETURN_CODE EQUAL 0 AND GIT_OUPUT_RES)
		set(MERCURIAL_ID "${GIT_OUPUT_RES}+")
	endif()
endif()

if(NOT "${CMAKE_C_COMPILER_ID}" MATCHES "^GNU|Intel|Clang|MSVC|AppleClang$")
	message(WARNING "Compiler potentially not (correctly) recognized")
endif()

# Set default build options
if(NOT CMAKE_BUILD_TYPE)
	message(STATUS "Setting build type to Debug as none was selected")
	set(CMAKE_BUILD_TYPE Debug CACHE STRING "The type of build" FORCE)
endif()
if(MERCURIAL_ID) # Developers compiling from Mercurial
	set(DFT_STRICT "YES")
	set(DFT_ASSERT "YES")
	set(DFT_DEVELOPER "YES")
else() # Users compiling from source tarball(s):
	set(DFT_STRICT "NO")
	set(DFT_ASSERT "NO")
	set(DFT_DEVELOPER "NO")
endif()

# modules to use
set(ENABLE_MAPI "YES" CACHE STRING "Enable MAPI (default=YES)")
if(NOT ${ENABLE_MAPI} STREQUAL "NO")
	set(HAVE_MAPI ON)
endif()

set(ENABLE_GDK "YES" CACHE STRING "Enable support for GDK (default=YES)")

set(ENABLE_MONETDB5 "YES" CACHE STRING "Enable support for MonetDB5 (default=YES)")
if(${ENABLE_GDK} STREQUAL "NO")
	if(${ENABLE_MONETDB5} STREQUAL "YES")
		message(FATAL_ERROR "MonetDB5 requires GDK")
	elseif(${ENABLE_MONETDB5} STREQUAL "AUTO")
		set(ENABLE_MONETDB5 "NO")
	endif()
else()
	set(HAVE_GDK ON)
endif()

set(ENABLE_SQL "YES" CACHE STRING "Enable support for MonetDB/SQL (default=YES)")
if(${ENABLE_MONETDB5} STREQUAL "NO")
	if(${ENABLE_SQL} STREQUAL "YES")
		message(FATAL_ERROR "MonetDB/SQL requires MonetDB5")
	elseif(${ENABLE_SQL} STREQUAL "AUTO")
		set(ENABLE_SQL "NO")
	endif()
endif()

set(ENABLE_EMBEDDED "NO" CACHE STRING "Enable support for running MonetDB as a library (default=NO)") # TODO check this
if(NOT ${ENABLE_EMBEDDED} STREQUAL "NO")
	set(HAVE_EMBEDDED ON)
endif()

set(ENABLE_CONSOLE "YES" CACHE STRING "Enables direct console on the server (involves security risks) (default=YES)")
if(NOT ${ENABLE_CONSOLE} STREQUAL "NO")
	set(HAVE_CONSOLE ON)
endif()

set(ENABLE_ASSERT "${DFT_ASSERT}" CACHE STRING "Enable assertions in the code (default=YES for development sources, NO for tarball instalation)")
set(ENABLE_STRICT "${DFT_STRICT}" CACHE STRING "Enable strict compiler flags (default=YES for development sources, NO for tarball instalation)")
set(ENABLE_SANITIZER "NO" CACHE STRING "Enable support for the GCC address sanitizer (default=NO)")
set(ENABLE_DEVELOPER "${DFT_DEVELOPER}" CACHE STRING "Enable full debugging (default=YES for development sources, NO for tarball instalation)")
if(NOT ${ENABLE_DEVELOPER} STREQUAL "NO")
	set(HAVE_DEVELOPER ON)
endif()
set(ENABLE_STATIC_ANALYSIS "NO" CACHE STRING "Configure for static code analysis (use only if you know what you are doing)")
if(NOT ${ENABLE_STATIC_ANALYSIS} STREQUAL "NO")
	set(STATIC_CODE_ANALYSIS ON)
endif()

set(SOURCE "${CMAKE_SOURCE_DIR}")
if(WIN32)
	string(REPLACE "/" "\\\\" TRIMMED_INSTALL_PREFIX "${CMAKE_INSTALL_PREFIX}") # Fix cmake conversions
	set(BINDIR "${CMAKE_INSTALL_PREFIX}/bin")
	set(BIN_DIR "${TRIMMED_INSTALL_PREFIX}\\\\bin")
	set(DATADIR "${CMAKE_INSTALL_PREFIX}/share")
	set(DATA_DIR "${TRIMMED_INSTALL_PREFIX}\\\\share")
	set(INCLUDEDIR "${CMAKE_INSTALL_PREFIX}/include")
	set(LIBDIR "${CMAKE_INSTALL_PREFIX}/lib")
	set(LIB_DIR "${TRIMMED_INSTALL_PREFIX}\\\\lib")
	set(LOCALSTATEDIR "${CMAKE_INSTALL_PREFIX}/var")
	set(LOCALSTATE_DIR "${TRIMMED_INSTALL_PREFIX}\\\\var")
else()
	include(GNUInstallDirs REQUIRED)
	set(BINDIR "${CMAKE_INSTALL_FULL_BINDIR}")
	set(BIN_DIR "${CMAKE_INSTALL_FULL_BINDIR}")
	set(DATADIR "${CMAKE_INSTALL_FULL_DATADIR}")
	set(DATA_DIR "${CMAKE_INSTALL_FULL_DATADIR}")
	set(DATAROOTDIR "${CMAKE_INSTALL_FULL_DATAROOTDIR}")
	set(INCLUDEDIR "${CMAKE_INSTALL_FULL_INCLUDEDIR}")
	set(INFODIR "${CMAKE_INSTALL_FULL_INFODIR}")
	set(LIBDIR "${CMAKE_INSTALL_FULL_LIBDIR}")
	set(LIB_DIR "${CMAKE_INSTALL_FULL_LIBDIR}")
	set(LIBEXECDIR "${CMAKE_INSTALL_FULL_LIBEXECDIR}")
	set(LOCALSTATEDIR "${CMAKE_INSTALL_FULL_LOCALSTATEDIR}")
	set(LOCALSTATE_DIR "${CMAKE_INSTALL_FULL_LOCALSTATEDIR}")
	set(LOGDIR "${CMAKE_INSTALL_FULL_LOCALSTATEDIR}/log/monetdb" CACHE PATH "Where to put log files (LOCALSTATEDIR/log/monetdb)")
	set(MANDIR "${CMAKE_INSTALL_FULL_MANDIR}")
	set(RUNDIR "${CMAKE_INSTALL_FULL_LOCALSTATEDIR}/run/monetdb" CACHE PATH "Where to put pid files (LOCALSTATEDIR/run/monetdb)")
	set(SYSCONFDIR "${CMAKE_INSTALL_FULL_SYSCONFDIR}")
	set(CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_FULL_LIBDIR}")
	set(PKGCONFIGDIR "${LIBDIR}/pkgconfig")
endif()

set(PROGRAM_PERMISSIONS_DEFAULT OWNER_WRITE OWNER_READ OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)

# password hash algorithm
set(PASSWORD_BACKEND "SHA512" CACHE STRING "Password hash algorithm, one of MD5, SHA1, RIPEMD160, SHA224, SHA256, SHA384, SHA512, defaults to SHA512")
if(${PASSWORD_BACKEND} MATCHES "^MD5|SHA1|RIPEMD160|SHA224|SHA256|SHA384|SHA512$")
	set(MONETDB5_PASSWDHASH ${PASSWORD_BACKEND})
	set(MONETDB5_PASSWDHASH_TOKEN ${PASSWORD_BACKEND})
else()
	message(FATAL_ERROR "PASSWORD_BACKEND invalid, choose one of MD5, SHA1, RIPEMD160, SHA224, SHA256, SHA384, SHA512")
endif()

if(${CMAKE_C_COMPILER_ID} STREQUAL "Intel")
	add_compile_options(-no-gcc) # Intel compiler hack
elseif(${CMAKE_C_COMPILER_ID} STREQUAL "GNU")
	add_compile_definitions(_GNU_SOURCE _XOPEN_SOURCE)
	set(CMAKE_REQUIRED_DEFINITIONS "${CMAKE_REQUIRED_DEFINITIONS} -D_GNU_SOURCE -D_XOPEN_SOURCE") # required for tests
elseif(MSVC)
	set(_Noreturn "__declspec(noreturn)")
	set(__attribute__(a) ON)
	set(restrict "__restrict")
	add_compile_definitions(_CRT_SECURE_NO_WARNINGS _CRT_SECURE_NO_DEPRECATE _WINSOCK_DEPRECATED_NO_WARNINGS)
	if(CMAKE_SIZEOF_VOID_P EQUAL 8)  # Windows 64 bit
		set(HAVE__MUL128 ON)
	endif()
endif()

# Tests for large files support
opj_test_large_files(_LARGE_FILES)
opj_test_large_files(_LARGEFILE_SOURCE)
opj_test_large_files(_FILE_OFFSET_BITS)
#Test if struct tm has tm_zone field
check_struct_has_member("struct tm" tm_zone "time.h" HAVE_STRUCT_TM_TM_ZONE LANGUAGE C)
#Test CPU endianness
test_big_endian(WORDS_BIGENDIAN)

#Test for __builtin_add_overflow
check_c_source_compiles("
	#include <stdio.h>
	#include <stdlib.h>

	int main(int argc, char **argv) {
		__int128 a=(__int128)atoll(getenv(\"a\"))<<64, b=(__int128)atoll(getenv(\"b\"))<<64, c;
		(void) argc;(void) argv;
		if (!__builtin_mul_overflow(a, b, &c))
			printf(\"%lld %lld\",(long long)(c>>64), (long long)c);
		return 0;
	}" HAVE___BUILTIN_ADD_OVERFLOW)

if(NOT MSVC)
	#Test if _Noreturn keyword is supported
	check_c_source_compiles("
		#include <stdlib.h>

		_Noreturn void foo(const char *a, ...);
		void foo(const char *a, ...) { (void)a; exit(0); }

		int main(int argc, char **argv) {
			(void) argc; (void) argv;
			foo (\"%s\", \"\");
			return 0;
		}" HAVE_NORETURN)
	if(NOT HAVE_NORETURN)
		set(_Noreturn "__attribute__((__noreturn__))")
	endif()
endif()

#Test if compiler can use NAN as an initializer
check_c_source_compiles("
	#include <math.h>

	extern const float f;
	extern const double d;
	const float f = NAN;
	const double d = NAN;

	int main(int argc, char **argv) {
		(void) argc; (void) argv;
		return 0;
	}" NAN_CAN_BE_USED_AS_INITIALIZER)
if(NOT NAN_CAN_BE_USED_AS_INITIALIZER)
	set(NAN_CANNOT_BE_USED_AS_INITIALIZER ON)
endif()

if(${CMAKE_C_COMPILER_ID} STREQUAL "Intel" AND EXISTS "${ROOT}/usr/include/math.h") # see https://software.intel.com/en-us/forums/intel-c-compiler/topic/760979
	file(READ "${ROOT}/usr/include/math.h" TMPTXT)
	string(FIND "${TMPTXT}" "_LIB_VERSION_TYPE" FOUND_VERSION)
	if(FOUND_VERSION)
		set(INTEL_MATH_H_HACK ON)
	endif()
endif()

include(FindPython3)
find_package(Python3 COMPONENTS Interpreter Development)
set(PY3_INCLUDE_DIR "")
set(PY3_LIBRARIES "")
set(ENABLE_PY3INTEGRATION "AUTO" CACHE STRING "enable support for Python 3 integration into MonetDB (default=AUTO)") # Check with HAVE_PYTHON3 and HAVE_LIBPY3 for integration
if(Python3_FOUND)
	set(PYTHON3_REQUIRED_VERSION "3.5")
	if("${Python3_VERSION_MAJOR}.${Python3_VERSION_MINOR}" VERSION_LESS ${PYTHON3_REQUIRED_VERSION})
		if("${ENABLE_PY3INTEGRATION}" STREQUAL "YES")
			message(FATAL_ERROR "The Python 3 executable is too old ${Python3_VERSION_MAJOR}.${Python3_VERSION_MINOR} < ${PYTHON3_REQUIRED_VERSION}")
		else()
			message(WARNING "The Python 3 executable is too old ${Python3_VERSION_MAJOR}.${Python3_VERSION_MINOR} < ${PYTHON3_REQUIRED_VERSION})")
		endif()
	else()
		set(HAVE_PYTHON3 YES)
		set(PY3_INCLUDE_DIR "${Python3_INCLUDE_DIRS}")
		set(PY3_LIBRARIES "${Python3_LIBRARIES}")
		exec_program("${Python3_EXECUTABLE}" ARGS "-c \"import distutils.sysconfig; print(distutils.sysconfig.get_python_lib(1,0,'${LIBDIR}'))\"" OUTPUT_VARIABLE PYTHON3_LIBDIR RETURN_VALUE PYTHON3_LIBDIR_CODE)
		if(PYTHON3_LIBDIR AND PYTHON3_LIBDIR_CODE EQUAL 0)
			string(LENGTH "${LIBDIR}" LIBDIR_LENGTH)
			string(LENGTH "${PYTHON3_LIBDIR}" PYTHON3_LIBDIR_PREFIX_LENGTH)
			math(EXPR LEN1 "${LIBDIR_LENGTH}+1") # add the / separator
			string(SUBSTRING "${PYTHON3_LIBDIR}" ${LEN1} -1 PYTHON_LIBDIR) # remove the prefix
		else()
			message(FATAL_ERROR "Could not find Python 3 library directory")
		endif()

		message(STATUS "Checking for numpy version")
		exec_program("${Python3_EXECUTABLE}" ARGS "-c \"import numpy; print(int(numpy.__version__.split('.').__getitem__(1)) >= 7)\"" OUTPUT_VARIABLE NUMPY_OUTPUT RETURN_VALUE NUMPY_RETURN_CODE)
		exec_program("${Python3_EXECUTABLE}" ARGS "-c \"import numpy; print(numpy.get_include())\"" OUTPUT_VARIABLE NUMPY_CPP_FLAGS RETURN_VALUE NUMPY_CPP_RC)
		if(NUMPY_RETURN_CODE EQUAL 0 AND NUMPY_CPP_RC EQUAL 0 AND "${NUMPY_OUTPUT}" STREQUAL "True")
			set(HAVE_LIBPY3 YES)
			set(NUMPY3_INCLUDE_DIR ${NUMPY_CPP_FLAGS})
			message(STATUS "numpy version >= 1.7.0 for Python 3 found")
		elseif("${ENABLE_PY3INTEGRATION}" STREQUAL "YES")
			message(FATAL_ERROR "numpy version >= 1.7.0 required for Python 3 integration support")
		else()
			message(STATUS "numpy version >= 1.7.0 required for Python 3 integration support")
		endif()
	endif()
elseif("${ENABLE_PY3INTEGRATION}" STREQUAL "YES")
	message(FATAL_ERROR "A valid Python 3 interpreter is required for Python 3 integration support")
endif()

set(ENABLE_TESTING "AUTO" CACHE STRING "Enable support for testing (default=AUTO)")
if(NOT "${ENABLE_TESTING}" STREQUAL "NO" AND NOT HAVE_PYTHON3)
	set(ENABLE_TESTING "NO")
endif()
if(NOT "${ENABLE_TESTING}" STREQUAL "NO")
	set(HAVE_TESTING ON)
endif()

if(WIN32)
	set(OS_DIRSEP  "\\\\")
	set(OS_PATHSEP ";")
	set(SO_PREFIX  "lib")
	# We don't use the library naming convention on Windows :(
	set(CMAKE_IMPORT_LIBRARY_PREFIX "${SO_PREFIX}" CACHE STRING "Import library name prefix" FORCE)
	set(CMAKE_SHARED_LIBRARY_PREFIX "${SO_PREFIX}" CACHE STRING "Shared library name prefix" FORCE)
	set(CMAKE_SHARED_MODULE_PREFIX "${SO_PREFIX}" CACHE STRING "Library module name prefix" FORCE)
	set(CMAKE_STATIC_LIBRARY_PREFIX "${SO_PREFIX}" CACHE STRING "Static Library name prefix" FORCE)
	set(COMPILER_OPTION "/") # Used for Intel compiler available on Windows and Linux
elseif(UNIX)
	set(OS_DIRSEP  "/")
	set(OS_PATHSEP ":")
	set(SO_PREFIX  "${CMAKE_SHARED_LIBRARY_PREFIX}")
	set(COMPILER_OPTION "-") # Used for Intel compiler available on Windows and Linux
else()
	message(FATAL_ERROR "Unknown target operating system")
endif()

set(DIR_SEP      "'${OS_DIRSEP}'")
set(DIR_SEP_STR  ${OS_DIRSEP})
set(PATH_SEP     "'${OS_PATHSEP}'")
set(SO_EXT       "${CMAKE_SHARED_LIBRARY_SUFFIX}")

# Bison
find_package(BISON)
if(NOT BISON_FOUND)
	if(${ENABLE_SQL} STREQUAL "YES")
		message(FATAL_ERROR "MonetDB/SQL requires bison")
	else()
		set(ENABLE_SQL "NO")
	endif()
endif()

# Iconv
set(ICONV_INCLUDE_DIR "")
set(ICONV_LIBRARIES "")
include(FindIconv)
if(Iconv_FOUND)
	set(HAVE_ICONV ON)
	if(NOT Iconv_IS_BUILT_IN)
		set(ICONV_INCLUDE_DIR "${Iconv_INCLUDE_DIR}")
		set(ICONV_LIBRARIES "${Iconv_LIBRARY}")
	endif()
endif()

set(WITH_BZ2 "AUTO" CACHE STRING "Include bz2 support (default=AUTO)") # Check with BZip2_FOUND
if(NOT ${WITH_BZ2} STREQUAL "NO")
	include(FindBZip2)

	if(BZip2_FOUND)
		set(HAVE_LIBBZ2 ON)
	elseif(${WITH_BZ2} STREQUAL "YES")
		message(FATAL_ERROR "bz2 library not found")
	endif()
endif()
if(NOT BZip2_FOUND)
	set(BZIP2_INCLUDE_DIR "")
	set(BZIP2_LIBRARIES "")
endif()

set(WITH_SNAPPY "AUTO" CACHE STRING "Include snappy support (default=AUTO)") # Check with HAVE_LIBSNAPPY
if(NOT ${WITH_SNAPPY} STREQUAL "NO")
	include(FindSnappy)

	if(SNAPPY_FOUND)
		set(HAVE_LIBSNAPPY ON)
	elseif(${WITH_SNAPPY} STREQUAL "YES")
		message(FATAL_ERROR "snappy library not found")
	endif()
endif()
if(NOT SNAPPY_FOUND)
	set(SNAPPY_INCLUDE_DIR "")
	set(SNAPPY_LIBRARIES "")
endif()

set(WITH_LZ4 "AUTO" CACHE STRING "Include lz4 library support (default=AUTO)") # Check with HAVE_LIBLZ4
if(NOT ${WITH_LZ4} STREQUAL "NO")
	include(FindLZ4)

	if(LZ4_FOUND)
		set(LZ4_MINIMUM_VERSION "1.8.0")
		if(LZ4_VERSION VERSION_LESS "${LZ4_MINIMUM_VERSION}")
			if(${WITH_LZ4} STREQUAL "YES")
				message(FATAL_ERROR "lz4 library found but version is too old: ${LZ4_VERSION} < ${LZ4_MINIMUM_VERSION}")
			else()
				message(STATUS "lz4 library found but version is too old: ${LZ4_VERSION} < ${LZ4_MINIMUM_VERSION}")
			endif()
		else()
			set(HAVE_LIBLZ4 ON)
		endif()
	elseif(${WITH_LZ4} STREQUAL "YES")
		message(FATAL_ERROR "lz4 library not found")
	endif()
endif()
if(NOT HAVE_LIBLZ4)
	set(LZ4_INCLUDE_DIR "")
	set(LZ4_LIBRARIES "")
endif()

# Extra libraries
set(DL_LIBRARIES "")
set(KVM_LIBRARIES "")
set(MATH_LIBRARIES "")
set(SOCKET_LIBRARIES )
set(PSAPI_LIBRARIES "")
if(${CMAKE_SYSTEM_NAME} STREQUAL "Linux")
	set(DL_LIBRARIES "${CMAKE_DL_LIBS}")
endif()
if(${CMAKE_SYSTEM_NAME} MATCHES "^FreeBSD|DragonFly|NetBSD$")
	set(KVM_LIBRARIES "kvm")
endif()
if(${CMAKE_SYSTEM_NAME} MATCHES "^Linux|FreeBSD|NetBSD$")
	set(MATH_LIBRARIES "m")
endif()
if(WIN32)
	find_library(PSAPI_LIBRARY NAMES Psapi psapi DOC "psapi library to link on Windows")
	if(NOT PSAPI_LIBRARY)
		message(FATAL_ERROR "Psapi library is required to compile MonetDB on Windows")
	endif()
	set(PSAPI_LIBRARIES "${PSAPI_LIBRARY}")

	find_library(WSOCK32_LIBRARY NAMES Wsock32 wsock32)
	if(WSOCK32_LIBRARY)
		list(APPEND SOCKET_LIBRARIES "${WSOCK32_LIBRARY}")
	else()
		message(FATAL_ERROR "Wsock32 library is missing and required to compile MonetDB on Windows")
	endif()
	find_library(WS2_32_LIBRARY NAMES Ws2_32 ws2_32)
	if(WS2_32_LIBRARY)
		list(APPEND SOCKET_LIBRARIES "${WS2_32_LIBRARY}")
	else()
		message(FATAL_ERROR "ws2_32 library is missing and required to compile MonetDB on Windows")
	endif()
endif()

# Thread libraries
set(THREADS_PREFER_PTHREAD_FLAG ON) # We do prefer pthreads
find_package(Threads REQUIRED)
set(THREAD_LIBRARIES "${CMAKE_THREAD_LIBS_INIT}")

# Readline libraries
set(READLINE_LIBRARIES "")
set(WITH_READLINE "AUTO" CACHE PATH "Include readline support (default=AUTO)") # Check with HAVE_LIBREADLINE
if(NOT ${WITH_READLINE} STREQUAL "NO")
	cmake_push_check_state()
	set(CMAKE_REQUIRED_LIBRARIES "${CMAKE_REQUIRED_LIBRARIES};readline")
	check_symbol_exists("readline" "stdio.h;readline/readline.h;readline/history.h" HAVE_READLINE)
	if(HAVE_READLINE)
		list(APPEND READLINE_LIBRARIES readline)
	else()
		set(CMAKE_REQUIRED_LIBRARIES "${CMAKE_REQUIRED_LIBRARIES};termcap")
		check_symbol_exists("rl_history_search_forward" "stdio.h;readline/readline.h;readline/history.h" HAVE_RL_HISTORY_SEARCH_FORWARD)
		if(HAVE_RL_HISTORY_SEARCH_FORWARD)
			list(APPEND READLINE_LIBRARIES termcap)
		else()
			cmake_pop_check_state()
			cmake_push_check_state()
			set(CMAKE_REQUIRED_LIBRARIES "${CMAKE_REQUIRED_LIBRARIES};readline;ncurses")
			check_symbol_exists("rl_reverse_search_history" "stdio.h;readline/readline.h;readline/history.h" HAVE_RL_REVERSE_SEARCH_HISTORY)
			if(HAVE_RL_REVERSE_SEARCH_HISTORY)
				list(APPEND READLINE_LIBRARIES ncurses)
			elseif(${WITH_READLINE} STREQUAL "YES")
				message(FATAL_ERROR "Readline library not found")
			else()
				message(STATUS "Readline library not found")
			endif()
		endif()
	endif()
	if(HAVE_READLINE OR HAVE_RL_HISTORY_SEARCH_FORWARD OR HAVE_RL_REVERSE_SEARCH_HISTORY)
		check_symbol_exists("rl_completion_matches" "stdio.h;readline/readline.h" HAVE_RL_COMPLETION_MATCHES)
		if(HAVE_RL_COMPLETION_MATCHES)
			check_c_source_compiles("
				#include <stdio.h>
				#include <readline/readline.h>

				int main(int argc, char **argv) {
					rl_completion_func_t *func = NULL;
					(void) argc;(void) argv;
					return 0;
				}" HAVE_RL_COMPLETION_FUNC_T)
			if(HAVE_RL_COMPLETION_FUNC_T)
				set(HAVE_LIBREADLINE ON)
			elseif(${WITH_READLINE} STREQUAL "YES")
				message(FATAL_ERROR "readline/readline.h does not contain rl_completion_func_t, is it GNU readline?")
			else()
				message(WARNING "readline/readline.h does not contain rl_completion_func_t, is it GNU readline?")
			endif()
		elseif(${WITH_READLINE} STREQUAL "YES")
			message(FATAL_ERROR "Readline library does not contain rl_completion_matches")
		else()
			message(WARNING "Readline library does not contain rl_completion_matches")
		endif()
	endif()
	cmake_pop_check_state()
endif()

# UUID
set(WITH_UUID "AUTO" CACHE STRING "Include UUID support (default=AUTO)") # Check with HAVE_UUID
if(NOT ${WITH_UUID} STREQUAL "NO")
	include(FindUUID)

	if(UUID_FOUND)
		set(HAVE_UUID ON)
	elseif(${WITH_UUID} STREQUAL "YES")
		message(FATAL_ERROR "uuid library not found")
	else()
		message(STATUS "uuid library not found")
	endif()
endif()
if(NOT UUID_FOUND)
	set(UUID_INCLUDE_DIR "")
	set(UUID_LIBRARIES "")
endif()

# OpenSSL or CommonCrypto library
cmake_push_check_state()
if(${CMAKE_SYSTEM_NAME} STREQUAL "Darwin")
	set(CRYPTO_LIBRARY_NAME "CommonCrypto")
	include(FindCommonCrypto)

	if(COMMONCRYPTO_FOUND)
		set(HAVE_COMMONCRYPTO ON)
		set(CRYPTO_INCLUDE_DIR "${COMMONCRYPTO_INCLUDE_DIR}")
		set(CRYPTO_LIBRARIES "${COMMONCRYPTO_LIBRARIES}")
		set(CMAKE_REQUIRED_INCLUDES "${CMAKE_REQUIRED_INCLUDES};${CRYPTO_INCLUDE_DIR}")
		set(CMAKE_REQUIRED_LIBRARIES "${CMAKE_REQUIRED_LIBRARIES};${CRYPTO_LIBRARIES}")
		check_symbol_exists("CC_MD5_Update" "CommonCrypto/CommonDigest.h" HAVE_MD5_UPDATE)
		check_symbol_exists("CC_SHA1_Update" "CommonCrypto/CommonDigest.h" HAVE_SHA1_UPDATE)
		check_symbol_exists("CC_SHA224_Update" "CommonCrypto/CommonDigest.h" HAVE_SHA224_UPDATE)
		check_symbol_exists("CC_SHA256_Update" "CommonCrypto/CommonDigest.h" HAVE_SHA256_UPDATE)
		check_symbol_exists("CC_SHA384_Update" "CommonCrypto/CommonDigest.h" HAVE_SHA384_UPDATE)
		check_symbol_exists("CC_SHA512_Update" "CommonCrypto/CommonDigest.h" HAVE_SHA512_UPDATE)
	endif()
endif()
if(NOT COMMONCRYPTO_FOUND)
	set(CRYPTO_LIBRARY_NAME "OpenSSL")
	find_package(OpenSSL)

	if(OPENSSL_FOUND)
		set(HAVE_OPENSSL ON)
		set(CRYPTO_INCLUDE_DIR "${OPENSSL_INCLUDE_DIR}")
		set(CRYPTO_LIBRARIES "${OPENSSL_CRYPTO_LIBRARY}")
		if(MSVC)
			set(HAVE_MD5_UPDATE ON)
			set(HAVE_RIPEMD160_UPDATE ON)
			set(HAVE_SHA1_UPDATE ON)
			set(HAVE_SHA224_UPDATE ON)
			set(HAVE_SHA256_UPDATE ON)
			set(HAVE_SHA384_UPDATE ON)
			set(HAVE_SHA512_UPDATE ON)
		else()
			set(CMAKE_REQUIRED_INCLUDES "${CMAKE_REQUIRED_INCLUDES};${CRYPTO_INCLUDE_DIR}")
			set(CMAKE_REQUIRED_LIBRARIES "${CMAKE_REQUIRED_LIBRARIES};${CRYPTO_LIBRARIES}")
			check_symbol_exists("MD5_Update" "openssl/md5.h" HAVE_MD5_UPDATE)
			check_symbol_exists("RIPEMD160_Update" "openssl/ripemd.h" HAVE_RIPEMD160_UPDATE)
			check_symbol_exists("SHA1_Update" "openssl/sha.h" HAVE_SHA1_UPDATE)
			check_symbol_exists("SHA224_Update" "openssl/sha.h" HAVE_SHA224_UPDATE)
			check_symbol_exists("SHA256_Update" "openssl/sha.h" HAVE_SHA256_UPDATE)
			check_symbol_exists("SHA384_Update" "openssl/sha.h" HAVE_SHA384_UPDATE)
			check_symbol_exists("SHA512_Update" "openssl/sha.h" HAVE_SHA512_UPDATE)
		endif()
	endif()
endif()
cmake_pop_check_state()

if(NOT COMMONCRYPTO_FOUND AND NOT OPENSSL_FOUND)
	if(${ENABLE_MONETDB5} STREQUAL "YES")
		message(FATAL_ERROR "Neither OpenSSL or CommonCrypto library found, but required for MonetDB5")
	else()
		set(ENABLE_MONETDB5 "NO")
		set(WHY_NOT_MONETDB5 "Neither OpenSSL or CommonCrypto library found, but required for MonetDB5")
		message(WARNING "${WHY_NOT_MONETDB5}")
	endif()
endif()
if(NOT HAVE_${PASSWORD_BACKEND}_UPDATE)
	if(${ENABLE_MONETDB5} STREQUAL "YES")
		message(FATAL_ERROR "${CRYPTO_LIBRARY_NAME} library found, but checksum algorithm required for MonetDB5 not found")
	else()
		set(HAVE_COMMONCRYPTO NO)
		set(OPENSSL_FOUND NO)
		set(ENABLE_MONETDB5 "NO")
		set(WHY_NOT_MONETDB5 "${CRYPTO_LIBRARY_NAME} library found, but required checksum algorithm not found, so disabling")
		message(WARNING "${WHY_NOT_MONETDB5}")
	endif()
endif()

# Regex library
set(WITH_REGEX "PCRE" CACHE STRING "Use either PCRE or POSIX regular expressions (default=PCRE if available)") # Check with HAVE_LIBPCRE and HAVE_POSIX_REGEX
if(NOT ${WITH_REGEX} MATCHES "^AUTO|PCRE|POSIX$")
	message(FATAL_ERROR "WITH_REGEX argument must be either AUTO, PCRE or POSIX")
endif()

if(NOT ${WITH_REGEX} STREQUAL "POSIX")
	set(PCRE_REQUIRED_VERSION "4.5")
	include(FindPCRE)

	if(PCRE_FOUND)
		cmake_push_check_state()
		set(CMAKE_REQUIRED_INCLUDES "${CMAKE_REQUIRED_INCLUDES};${PCRE_INCLUDE_DIR}")
		check_symbol_exists("PCRE_CONFIG_UTF8" "pcre.h" HAVE_LIBPCRE) #Test for UTF-8 support on PCRE library (PCRE_CONFIG_UTF8 is a macro)
		cmake_pop_check_state()
		if(NOT HAVE_LIBPCRE)
			if(${WITH_REGEX} STREQUAL "PCRE")
				message(FATAL_ERROR "PCRE library found but no UTF-8 support")
			else()
				message(STATUS "PCRE library found but no UTF-8 support")
			endif()
		endif()
	else()
		if(PCRE_FOUND AND PCRE_VERSION VERSION_LESS_EQUAL ${PCRE_REQUIRED_VERSION})
			set(PCRE_ERROR_MESSAGE "PCRE library found, but the version is too old ${PCRE_VERSION} < ${PCRE_REQUIRED_VERSION}")
		else()
			set(PCRE_ERROR_MESSAGE "PCRE library not found or not usable")
		endif()

		if(${WITH_REGEX} STREQUAL "PCRE")
			message(FATAL_ERROR "${PCRE_ERROR_MESSAGE}")
		else()
			message(WARNING "${PCRE_ERROR_MESSAGE}")
		endif()
	endif()
endif()
if(NOT HAVE_LIBPCRE)
	set(PCRE_INCLUDE_DIR "")
	set(PCRE_LIBRARIES "")
	check_symbol_exists("regcomp" "regex.h" HAVE_POSIX_REGEX)
endif()
if(NOT HAVE_LIBPCRE AND NOT HAVE_POSIX_REGEX)
	if(${ENABLE_MONETDB5} STREQUAL "YES")
		message(FATAL_ERROR "PCRE library or GNU regex library not found but required for MonetDB5")
	else()
		set(ENABLE_MONETDB5 "NO")
		set(WHY_NOT_MONETDB5 "PCRE library or GNU regex library not found but required for MonetDB5")
		message(WARNING "${WHY_NOT_MONETDB5}")
	endif()
endif()

set(WITH_LIBXML2 "AUTO" CACHE STRING "Include libxml2 support (default=AUTO)") # Check with HAVE_LIBXML
if(NOT ${WITH_LIBXML2} STREQUAL "NO")
	include(FindLibXml2)

	if(LIBXML2_FOUND)
		set(HAVE_LIBXML ON)
	elseif(${WITH_LIBXML2} STREQUAL "YES")
		message(FATAL_ERROR "libxml2 library not found")
	endif()
endif()
if(NOT LIBXML2_FOUND)
	set(LIBXML2_INCLUDE_DIR "")
	set(LIBXML2_LIBRARIES "")
endif()

set(WITH_CURL "AUTO" CACHE STRING "Include cURL support (default=AUTO)") # Check with HAVE_CURL
if(NOT ${WITH_CURL} STREQUAL "NO")
	include(FindCURL)

	if(CURL_FOUND)
		set(HAVE_CURL ON)
	elseif(${WITH_CURL} STREQUAL "YES")
		message(FATAL_ERROR "libcurl library not found")
	endif()
endif()
if(NOT CURL_FOUND)
	set(CURL_INCLUDE_DIR "")
	set(CURL_LIBRARIES "")
endif()

set(WITH_ZLIB "AUTO" CACHE STRING "Include zlib support (default=AUTO)") # Check with HAVE_LIBZ
if(NOT ${WITH_ZLIB} STREQUAL "NO")
	include(FindZLIB)

	if(ZLIB_FOUND)
		set(HAVE_LIBZ ON)
	elseif(${WITH_ZLIB} STREQUAL "YES")
		message(FATAL_ERROR "zlib library not found")
	endif()
endif()
if(NOT ZLIB_FOUND)
	set(ZLIB_INCLUDE_DIR "")
	set(ZLIB_LIBRARIES "")
endif()

set(WITH_LIBLZMA "AUTO" CACHE STRING "Include liblzma support (default=AUTO)") # Check with HAVE_LIBLZMA
if(NOT ${WITH_LIBLZMA} STREQUAL "NO")
	include(FindLibLZMA)

	if(LIBLZMA_FOUND)
		set(HAVE_LIBLZMA ON)
	elseif(${WITH_LIBLZMA} STREQUAL "YES")
		message(FATAL_ERROR "liblzma library not found")
	endif()
endif()
if(NOT LIBLZMA_FOUND)
	set(LIBLZMA_INCLUDE_DIR "")
	set(LIBLZMA_LIBRARIES "")
endif()

set(WITH_VALGRIND "NO" CACHE STRING "Include valgrind support (default=NO)") # Check with HAVE_VALGRIND
if(NOT ${WITH_VALGRIND} STREQUAL "NO")
	include(FindValgrind)

	if(VALGRIND_FOUND)
		set(HAVE_VALGRIND ON)
	elseif(${WITH_VALGRIND} STREQUAL "YES")
		message(FATAL_ERROR "valgrind library not found")
	endif()
endif()
if(NOT VALGRIND_FOUND)
	set(VALGRIND_INCLUDE_DIR "")
	set(VALGRIND_LIBRARIES "")
endif()

set(R_HOME "") # No R_HOME on Windows
set(R_INCLUDE_DIR "")
set(R_LIBRARIES "")
set(ENABLE_RINTEGRATION "AUTO" CACHE STRING "Enable support for R integration into MonetDB (default=AUTO)") # Check with HAVE_LIBR
if(NOT ${ENABLE_RINTEGRATION} STREQUAL "NO")
	message(STATUS "Checking for R interpreter instalation")
	if(WIN32)
		find_path(R_INCLUDE R.h)
		find_library(R_LIBRARY R)
		if(R_INCLUDE AND R_LIBRARY)
			set(R_INCLUDE_DIR "${R_INCLUDE}")
			set(R_LIBRARIES "${R_LIBRARY}")
			set(HAVE_LIBR ON)
		elseif(${ENABLE_RINTEGRATION} STREQUAL "YES")
			message(FATAL_ERROR "R.h and R.lib required for R integration support")
		else()
			message(STATUS "R.h and R.lib required for R integration support")
		endif()
	else()
		exec_program("R" ARGS "RHOME" OUTPUT_VARIABLE R_HOME_OUTPUT RETURN_VALUE R_HOME_RC)
		exec_program("R" ARGS "CMD config --cppflags" OUTPUT_VARIABLE R_CPP_OUTPUT RETURN_VALUE R_CPP_RC)
		exec_program("R" ARGS "CMD config --ldflags" OUTPUT_VARIABLE R_LD_OUTPUT RETURN_VALUE R_LD_RC)
		if(R_HOME_RC EQUAL 0 AND R_CPP_RC EQUAL 0 AND R_LD_RC EQUAL 0)
			string(REPLACE "-I" "" R_INCLUDE_DIR ${R_CPP_OUTPUT}) # cmake will get confused
			string(REPLACE "-fopenmp" "" R_LIBRARIES ${R_LD_OUTPUT}) # We don't want to link to OpenMP
			string(REPLACE "-fopenmp=libgomp" "" R_LIBRARIES ${R_LIBRARIES})
			set(HAVE_LIBR ON)
			set(RHOME ${R_HOME_OUTPUT})
			message(STATUS "R executable, library and include files found")
		elseif(${ENABLE_RINTEGRATION} STREQUAL "YES")
			message(FATAL_ERROR "R executable required for R integration support")
		else()
			message(STATUS "R executable not found")
		endif()
	endif()
endif()

set(ODBCINST_LIBRARIES "")
set(ODBC_LIBRARIES "")
set(ODBC_INCLUDE_DIR "")
set(ENABLE_ODBC "AUTO" CACHE STRING "Compile the MonetDB ODBC driver (default=AUTO)") # Check with HAVE_ODBC
if(NOT ${ENABLE_ODBC} STREQUAL "NO")
	find_path(ODBCINST_INCLUDE odbcinst.h)
	if(ODBCINST_INCLUDE)
		set(HAVE_ODBCINST_H ON)
		set(ODBC_INCLUDE_DIR "${ODBCINST_INCLUDE}")
		if(MSVC)
			set(HAVE_SQLGETPRIVATEPROFILESTRING ON)
			if(CMAKE_SIZEOF_VOID_P EQUAL 8) # Windows 64 bit
				set(LENP_OR_POINTER_T "SQLLEN *")
			else()
				set(LENP_OR_POINTER_T "SQLPOINTER")
			endif()

			find_library(ODBCCP32_LIBRARY odbccp32)
			if(ODBCCP32_LIBRARY)
				set(ODBCINST_LIBRARIES "${ODBCINST_LIBRARIES};odbccp32")
			endif()
			find_library(USER32_LIBRARY NAMES user32 User32)
			if(USER32_LIBRARY)
				set(ODBCINST_LIBRARIES "${ODBCINST_LIBRARIES};${USER32_LIBRARY}")
			endif()
			find_library(LEGACY_STDIO_LIBRARY legacy_stdio_definitions)
			if(LEGACY_STDIO_LIBRARY)
				set(ODBCINST_LIBRARIES "${ODBCINST_LIBRARIES};legacy_stdio_definitions")
			endif()
			find_library(ODBC32_LIBRARY odbc32)
			if(ODBC32_LIBRARY)
				set(ODBC_LIBRARIES odbc32)
			endif()

			if(ODBCCP32_LIBRARY AND USER32_LIBRARY AND LEGACY_STDIO_LIBRARY AND ODBC32_LIBRARY)
				set(HAVE_ODBC YES)
			elseif(${ENABLE_ODBC} STREQUAL "YES")
				message(FATAL_ERROR "ODBC libraries missing")
			else()
				message(STATUS "ODBC libraries missing")
			endif()
		else()
			cmake_push_check_state()
			set(CMAKE_REQUIRED_INCLUDES "${CMAKE_REQUIRED_INCLUDES};${ODBC_INCLUDE_DIR}")

			find_library(ODBCINST_LIBRARY odbcinst)
			if(ODBCINST_LIBRARY)
				cmake_push_check_state()
				set(CMAKE_REQUIRED_LIBRARIES "${CMAKE_REQUIRED_LIBRARIES};odbcinst")
				check_symbol_exists("SQLGetPrivateProfileString" "odbcinst.h" HAVE_SQLGETPRIVATEPROFILESTRING)
				cmake_pop_check_state()
				if(HAVE_SQLGETPRIVATEPROFILESTRING)
					set(ODBCINST_LIBRARIES "${ODBCINST_LIBRARY}")
					set(HAVE_SQLGETPRIVATEPROFILESTRING ON)
				elseif(${ENABLE_ODBC} STREQUAL "YES")
					message(FATAL_ERROR "odbcinst library not found")
				else()
					message(STATUS "odbcinst library not found")
				endif()
			endif()

			find_library(ODBC_LIBRARY odbc)
			if(ODBC_LIBRARY)
				cmake_push_check_state()
				set(CMAKE_REQUIRED_LIBRARIES "${CMAKE_REQUIRED_LIBRARIES};odbc")
				check_symbol_exists("SQLGetDiagRec" "odbcinst.h" HAVE_SQLGETDIAGREC)
				cmake_pop_check_state()
				if(HAVE_SQLGETDIAGREC)
					set(ODBC_LIBRARIES "${ODBC_LIBRARY}")
				elseif(${ENABLE_ODBC} STREQUAL "YES")
					message(FATAL_ERROR "odbc library not found")
				else()
					message(STATUS "odbc library not found")
				endif()
			endif()

			message(STATUS "Checking SQLColAttribute uses SQLLEN * or SQLPOINTER")
			check_c_source_compiles("
				#include <sql.h>

				SQLRETURN SQL_API
				SQLColAttribute(SQLHSTMT hStmt, SQLUSMALLINT nCol, SQLUSMALLINT nFieldIdentifier, SQLPOINTER pszValue, SQLSMALLINT nValueLengthMax, SQLSMALLINT *pnValueLength, SQLLEN *pnValue) {
					(void) hStmt; (void) nCol; (void) nFieldIdentifier; (void) pszValue; (void) nValueLengthMax; (void) pnValueLength; (void) pnValue;
					return SQL_SUCCESS;
				}
				int main(int argc, char **argv) {
					(void) argc; (void) argv;
					return SQLColAttribute(0,0,0,0,0,0,0);
				}
			" SQL_COL_TEST)
			if(SQL_COL_TEST)
				message(STATUS "Using 'SQLLEN *' as SQLColAttribute")
				set(LENP_OR_POINTER_T "SQLLEN *")
			else()
				message(STATUS "Using 'SQLPOINTER' as SQLColAttribute")
				set(LENP_OR_POINTER_T "SQLPOINTER")
			endif()

			set(CMAKE_EXTRA_INCLUDE_FILES "${CMAKE_EXTRA_INCLUDE_FILES};sqltypes.h")
			check_type_size(SQLWCHAR SIZEOF_SQLWCHAR LANGUAGE C)
			cmake_pop_check_state()

			if(ODBCINST_LIBRARY AND ODBC_LIBRARY)
				set(HAVE_ODBC YES)
			elseif(${ENABLE_ODBC} STREQUAL "YES")
				message(FATAL_ERROR "There are unixODBC libraries missing")
			else()
				message(STATUS "There are unixODBC libraries missing")
			endif()
		endif()
	elseif(${ENABLE_ODBC} STREQUAL "YES")
		message(FATAL_ERROR "odbcinst.h not found")
	else()
		message(STATUS "odbcinst.h not found")
	endif()
endif()

set(WITH_PROJ "AUTO" CACHE STRING "Include proj support (default=AUTO)") # Check with HAVE_PROJ
if(NOT ${WITH_PROJ} STREQUAL "NO")
	include(FindProj)

	if(PROJ_FOUND)
		set(HAVE_PROJ ON)
	elseif(${WITH_PROJ} STREQUAL "YES")
		message(FATAL_ERROR "proj library not found")
	endif()
endif()
if(NOT PROJ_FOUND)
	set(PROJ_INCLUDE_DIR "")
	set(PROJ_LIBRARIES "")
endif()

set(SAMTOOLS_LIBRARIES "")
set(ENABLE_SAMTOOLS "AUTO" CACHE PATH "Include Samtools support (default=AUTO)") # Check with HAVE_SAMTOOLS
if(NOT ${ENABLE_SAMTOOLS} STREQUAL "NO")
	cmake_push_check_state()
	set(CMAKE_REQUIRED_LIBRARIES "${CMAKE_REQUIRED_LIBRARIES};${MATH_LIBRARIES};${THREAD_LIBRARIES};${ZLIB_LIBRARIES};bam")
	check_include_file("samtools/bam.h" HAVE_SAMTOOLS_BAM_H)
	check_include_file("bam/bam.h" HAVE_BAM_BAM_H)
	check_include_file("samtools/sam.h" HAVE_SAMTOOLS_SAM_H)
	check_include_file("bam/sam.h" HAVE_BAM_SAM_H)
	check_include_file("samtools/bgzf.h" HAVE_SAMTOOLS_BGZF_H)
	check_include_file("bam/bgzf.h" HAVE_BAM_BGZF_H)
	check_include_file("samtools/kstring.h" HAVE_SAMTOOLS_KSTRING_H)
	check_include_file("bam/kstring.h" HAVE_BAM_KSTRING_H)
	check_symbol_exists("bam_header_read" "samtools/bam.h" HAVE_SAMTOOLS)
	if(HAVE_SAMTOOLS)
		set(SAMTOOLS_LIBRARIES "bam")
	elseif(${ENABLE_SAMTOOLS} STREQUAL "YES")
		message(FATAL_ERROR "bam_header_read symbol not found")
	else()
		message(STATUS "bam_header_read symbol not found")
	endif()
	cmake_pop_check_state()
endif()

set(ENABLE_GEOM "AUTO" CACHE STRING "Enable support for geom module (default=AUTO)") # Check with HAVE_GEOM
if(NOT ${ENABLE_GEOM} STREQUAL "NO")
	if(${ENABLE_MONETDB5} STREQUAL "NO" AND ${ENABLE_GEOM} STREQUAL "YES")
		message(FATAL_ERROR "Geom module requires MonetDB5")
	else()
		include(FindGeos)

		if(GEOS_FOUND)
			set(GEOS_MINIMUM_VERSION "3.4.0")
			if(GEOS_VERSION VERSION_LESS "${GEOS_MINIMUM_VERSION}")
				if(${ENABLE_GEOM} STREQUAL "YES")
					message(FATAL_ERROR "geos library found but version is too old: ${GEOS_VERSION} < ${GEOS_MINIMUM_VERSION}")
				else()
					message(STATUS "geos library found but version is too old: ${GEOS_VERSION} < ${GEOS_MINIMUM_VERSION}")
				endif()
			else()
				set(HAVE_GEOM ON)
			endif()
		elseif(${ENABLE_GEOM} STREQUAL "YES")
			message(FATAL_ERROR "geos library required for geom module")
		endif()
	endif()
endif()
if(NOT HAVE_GEOM)
	set(GEOS_INCLUDE_DIR "")
	set(GEOS_LIBRARIES "")
endif()

set(ENABLE_SHP "AUTO" CACHE STRING "Enable support for ESRI Shapefiles (default=AUTO)") # Check with HAVE_SHP
if(NOT ${ENABLE_SHP} STREQUAL "NO")
	if(NOT HAVE_GEOM AND ${ENABLE_SHP} STREQUAL "YES")
		message(FATAL_ERROR "geom module required for ESRI Shapefile vault")
	else()
		include(FindGDAL)

		if(GDAL_FOUND)
			set(HAVE_SHP YES)
		elseif(${ENABLE_SHP} STREQUAL "YES")
			message(FATAL_ERROR "gdal library required for ESRI Shapefile vault")
		endif()
	endif()
endif()
if(NOT HAVE_SHP)
	set(GDAL_INCLUDE_DIR "")
	set(GDAL_LIBRARIES "")
endif()

set(ENABLE_FITS "AUTO" CACHE STRING "Enable support for FITS (default=AUTO)")
if(NOT ${ENABLE_FITS} STREQUAL "NO") # Check with CFITSIO_FOUND
	include(FindCfitsio)

	if(CFITSIO_FOUND)
		set(HAVE_FITS ON)
	elseif(${ENABLE_FITS} STREQUAL "YES")
		message(FATAL_ERROR "cfitsio library required for FITS support")
	endif()
endif()
if(NOT HAVE_FITS)
	set(CFITSIO_INCLUDE_DIR "")
	set(CFITSIO_LIBRARIES "")
endif()

set(ENABLE_NETCDF "AUTO" CACHE STRING "Enable support for netcdf (default=AUTO)")
if(NOT ${ENABLE_NETCDF} STREQUAL "NO") # Check with NETCDF_FOUND
	include(FindNetCDF)

	if(NETCDF_FOUND)
		set(NETCDF_MINIMUM_VERSION "4.2")
		if(NETCDF_VERSION VERSION_LESS "${NETCDF_MINIMUM_VERSION}")
			if(${WITH_NETCDF} STREQUAL "YES")
				message(FATAL_ERROR "netcdf library found but version is too old: ${NETCDF_VERSION} < ${NETCDF_MINIMUM_VERSION}")
			else()
				message(STATUS "netcdf library found but version is too old: ${NETCDF_VERSION} < ${NETCDF_MINIMUM_VERSION}")
			endif()
		else()
			set(HAVE_NETCDF ON)
		endif()
	elseif(${ENABLE_NETCDF} STREQUAL "YES")
		message(FATAL_ERROR "netcdf library required for NetCDF support")
	endif()
endif()
if(NOT HAVE_NETCDF)
	set(NETCDF_INCLUDE_DIR "")
	set(NETCDF_LIBRARIES "")
endif()

set(ENABLE_LIDAR "AUTO" CACHE STRING "Enable support for LiDAR data (default=AUTO)") # Check with HAVE_LIDAR
if(NOT ${ENABLE_LIDAR} STREQUAL "NO")
	include(FindLiblas)

	if(LIBLAS_FOUND)
		set(LIBLAS_VERSION_REQUIRED_MIN "1.8.0")
		if(LIBLAS_VERSION VERSION_LESS "${LIBLAS_MINIMUM_VERSION}")
			if(${WITH_LIBLAS} STREQUAL "YES")
				message(FATAL_ERROR "liblas library found but version is too old: ${LIBLAS_VERSION} < ${LIBLAS_MINIMUM_VERSION}")
			else()
				message(STATUS "liblas library found but version is too old: ${LIBLAS_VERSION} < ${LIBLAS_MINIMUM_VERSION}")
			endif()
		else()
			set(HAVE_LIDAR ON)
		endif()
	elseif(${ENABLE_LIDAR} STREQUAL "YES")
		message(FATAL_ERROR "liblas library required for lidar module")
	endif()
endif()
if(NOT HAVE_LIDAR)
	set(LIBLAS_INCLUDE_DIR "")
	set(LIBLAS_LIBRARIES "")
endif()

# Header files
check_include_file("dirent.h" HAVE_DIRENT_H)
check_include_file("dlfcn.h" HAVE_DLFCN_H)
check_include_file("fcntl.h" HAVE_FCNTL_H)
check_include_file("getopt.h" HAVE_GETOPT_H)
check_include_file("io.h" HAVE_IO_H)
check_include_file("kvm.h" HAVE_KVM_H)
check_include_file("libintl.h" HAVE_LIBINTL_H)
check_include_file("netdb.h" HAVE_NETDB_H)
check_include_file("pthread.h" HAVE_PTHREAD_H)
check_include_file("semaphore.h" HAVE_SEMAPHORE_H)
check_include_file("stdatomic.h" HAVE_STDATOMIC_H)
check_include_file("strings.h" HAVE_STRINGS_H)
check_include_file("sys/ioctl.h" HAVE_SYS_IOCTL_H)
check_include_file("sys/mman.h" HAVE_SYS_MMAN_H)
check_include_file("sys/param.h" HAVE_SYS_PARAM_H)
check_include_file("sys/resource.h" HAVE_SYS_RESOURCE_H)
check_include_file("sys/socket.h" HAVE_SYS_SOCKET_H)
check_include_file("sys/stat.h" HAVE_SYS_STAT_H)
check_include_files("sys/param.h;sys/sysctl.h" HAVE_SYS_SYSCTL_H) # on OpenBSD, sys/sysctl.h requires sys/param.h to be included beforehand
check_include_file("sys/time.h" HAVE_SYS_TIME_H)
check_include_file("sys/types.h" HAVE_SYS_TYPES_H)
check_include_file("sys/uio.h" HAVE_SYS_UIO_H)
check_include_file("sys/un.h" HAVE_SYS_UN_H)
check_include_file("termios.h" HAVE_TERMIOS_H)
check_include_file("unistd.h" HAVE_UNISTD_H)
check_include_file("winsock.h" HAVE_WINSOCK_H)

cmake_push_check_state()
if(MSVC)
	set(CMAKE_EXTRA_INCLUDE_FILES "${CMAKE_EXTRA_INCLUDE_FILES};sys/types.h;winsock.h;crtdefs.h")
else()
	set(CMAKE_EXTRA_INCLUDE_FILES "${CMAKE_EXTRA_INCLUDE_FILES};sys/types.h;sys/socket.h")
endif()
check_type_size(SOCKET _SOCKET LANGUAGE C)
if(NOT HAVE__SOCKET)
	set(SOCKET int)
endif()
check_type_size(size_t SIZEOF_SIZE_T LANGUAGE C) #On C99, but we have to calculate the size
check_type_size(ssize_t SIZEOF_SSIZE_T LANGUAGE C)
if(NOT HAVE_SIZEOF_SSIZE_T AND MSVC AND CMAKE_SIZEOF_VOID_P EQUAL 8) # Windows 64 bit
	set(ssize_t "int64_t")
	set(SIZEOF_SSIZE_T 8)
elseif(MSVC)
	set(ssize_t "int")
	set(SIZEOF_SSIZE_T 4)
endif()
check_type_size(char SIZEOF_CHAR LANGUAGE C)
check_type_size(short SIZEOF_SHORT LANGUAGE C)
check_type_size(int SIZEOF_INT LANGUAGE C)
check_type_size(long SIZEOF_LONG LANGUAGE C)
set(SIZEOF_VOID_P ${CMAKE_SIZEOF_VOID_P})
check_type_size(wchar_t SIZEOF_WCHAR_T LANGUAGE C)

set(ENABLE_INT128 "AUTO" CACHE STRING "Enable support for 128-bit integers (default=AUTO)")
if(NOT ${ENABLE_INT128} STREQUAL "NO")
	check_type_size(__int128 SIZEOF___INT128 LANGUAGE C)
	check_type_size(__int128_t SIZEOF___INT128_T LANGUAGE C)
	check_type_size(__uint128_t SIZEOF___UINT128_T LANGUAGE C)
	if(HAVE_SIZEOF___INT128 OR HAVE_SIZEOF___INT128_T OR HAVE_SIZEOF___UINT128_T)
		set(HAVE_HGE ON)
	elseif(${ENABLE_INT128} STREQUAL "YES")
		message(FATAL_ERROR "128-bit integers not supported by this compiler")
	else()
		message(STATUS "128-bit integers not supported by this compiler")
	endif()
endif()
cmake_pop_check_state()

check_symbol_exists("accept4" "sys/types.h;sys/socket.h" HAVE_ACCEPT4)
check_symbol_exists("asctime_r" "time.h" HAVE_ASCTIME_R)
check_symbol_exists("asctime_s" "time.h" HAVE_ASCTIME_S)
check_symbol_exists("backtrace" "execinfo.h" HAVE_BACKTRACE)
check_symbol_exists("clock_gettime" "time.h" HAVE_CLOCK_GETTIME)
check_symbol_exists("ctime_r" "time.h" HAVE_CTIME_R)
check_symbol_exists("ctime_s" "time.h" HAVE_CTIME_S)
check_symbol_exists("fallocate" "fcntl.h" HAVE_FALLOCATE)
check_symbol_exists("fcntl" "unistd.h;fcntl.h" HAVE_FCNTL)
check_symbol_exists("fdatasync" "unistd.h" HAVE_FDATASYNC)
check_symbol_exists("fork" "sys/types.h;unistd.h" HAVE_FORK)
check_symbol_exists("fseeko" "stdio.h" HAVE_FSEEKO)
check_symbol_exists("fsync" "unistd.h" HAVE_FSYNC)
check_symbol_exists("ftime" "sys/timeb.h" HAVE_FTIME)
check_symbol_exists("getopt" "unistd.h" HAVE_GETOPT)
check_symbol_exists("getopt_long" "unistd.h;getopt.h" HAVE_GETOPT_LONG)
check_symbol_exists("gettimeofday" "sys/time.h" HAVE_GETTIMEOFDAY)
check_symbol_exists("localtime_r" "time.h" HAVE_LOCALTIME_R)
check_symbol_exists("localtime_s" "time.h" HAVE_LOCALTIME_S)
check_symbol_exists("madvise" "sys/mman.h" HAVE_MADVISE)
check_symbol_exists("mremap" "sys/mman.h" HAVE_MREMAP)
check_symbol_exists("nl_langinfo" "langinfo.h" HAVE_NL_LANGINFO)
check_symbol_exists("pipe2" "fcntl.h;unistd.h" HAVE_PIPE2)
check_symbol_exists("popen" "stdio.h" HAVE_POPEN)
check_symbol_exists("posix_fallocate" "fcntl.h" HAVE_POSIX_FALLOCATE)
check_symbol_exists("posix_madvise" "sys/mman.h" HAVE_POSIX_MADVISE)
check_symbol_exists("semtimedop" "sys/types.h;sys/ipc.h;sys/sem.h" HAVE_SEMTIMEDOP)
check_symbol_exists("stpcpy" "string.h" HAVE_STPCPY)
check_symbol_exists("strptime" "time.h" HAVE_STRPTIME)
check_symbol_exists("strtok_r" "string.h" HAVE_STRTOK_R)
check_symbol_exists("strtok_s" "string.h" HAVE_STRTOK_S)
check_symbol_exists("sysconf" "unistd.h" HAVE_SYSCONF)
check_symbol_exists("times" "sys/times.h" HAVE_TIMES)
check_symbol_exists("_wfopen_s" "wchar.h" HAVE__WFOPEN) # Check for _wfopen_s to avoid warnings

#Test for diff program existance
find_program(DIFF NAMES gdiff diff DOC "Diff program")

if(NOT ${ENABLE_MONETDB5} STREQUAL "NO")
	set(HAVE_MONETDB5 YES)
endif()
if(${ENABLE_SQL} STREQUAL "YES" AND ${ENABLE_MONETDB5} STREQUAL "NO")
	message(FATAL_ERROR "MonetDB/SQL requires MonetDB5: ${WHY_NOT_MONETDB5}")
endif()
if(NOT ${ENABLE_SQL} STREQUAL "NO") # The SQL module requires the monetdb5 module, so monetdb5 should compile first
	set(HAVE_SQL YES)
endif()

# Very Important, check for compiler flags after all libraries checks, otherwise extra compiler flags might break the
# library tests
if(NOT "${LINK_OPTIONS}" MATCHES "-Wl,-Bsymbolic-functions")
	set(PREV_LINK_OPTIONS "${LINK_OPTIONS}")
	set(LINK_OPTIONS "${LINK_OPTIONS} -Wl,-Bsymbolic-functions")
	check_c_source_compiles("int main(int argc,char** argv){(void)argc;(void)argv;return 0;}" HAVE_WL_BSYMBOLIC_FUNCTIONS)
	if(NOT HAVE_WL_BSYMBOLIC_FUNCTIONS)
		set(LINK_OPTIONS "${PREV_LINK_OPTIONS}")
	endif()
endif()

# Check for compiler flags
function(MT_removeCompilerFlag REGEX_EXPRESSION FLAG_TO_REMOVE OLD_FLAGS BUILD NEW_FLAGS)
	if(${OLD_FLAGS} MATCHES "${REGEX_EXPRESSION}")
		string(REGEX REPLACE "${REGEX_EXPRESSION}" "" NEW_VAR "${OLD_FLAGS}")
		set(${NEW_FLAGS} "${NEW_VAR}" PARENT_SCOPE)
		message(STATUS "Removed ${FLAG_TO_REMOVE} flag for ${BUILD} build(s)")
	endif()
endfunction()
function(MT_addCompilerFlag REGEX_EXPRESSION FLAG_TO_ADD OLD_FLAGS BUILD NEW_FLAGS)
	if(NOT ${OLD_FLAGS} MATCHES "${REGEX_EXPRESSION}")
		set(${NEW_FLAGS} "${OLD_FLAGS} ${FLAG_TO_ADD}" PARENT_SCOPE)
		message(STATUS "Added ${FLAG_TO_ADD} flag for ${BUILD} build(s)")
	endif()
endfunction()

set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS}") # Initialize variable
if(MSVC)
	MT_addCompilerFlag("/GF" "/GF" "${CMAKE_C_FLAGS}" "all" CMAKE_C_FLAGS)
	MT_addCompilerFlag("/W3" "/W3" "${CMAKE_C_FLAGS}" "all" CMAKE_C_FLAGS)
	MT_addCompilerFlag("/nologo" "/nologo" "${CMAKE_C_FLAGS}" "all" CMAKE_C_FLAGS)
	MT_addCompilerFlag("/Zi" "/Zi" "${CMAKE_C_FLAGS}" "all" CMAKE_C_FLAGS)
	MT_addCompilerFlag("/Oi" "/Oi" "${CMAKE_C_FLAGS}" "all" CMAKE_C_FLAGS)

	# Remove all /Ox but /Oi on all, /Od on Debug and /Ox on others
	MT_removeCompilerFlag("/O[0-9a-ce-hj-zA-CE-HJ-Z]+[ ]?" "/Ox" "${CMAKE_C_FLAGS_DEBUG}" "Debug" CMAKE_C_FLAGS_DEBUG)
	MT_removeCompilerFlag("/O[0-9a-hj-wyzA-HJ-WYZ]+[ ]?" "/Ox" "${CMAKE_C_FLAGS_RELEASE}" "Release" CMAKE_C_FLAGS_RELEASE)
	MT_removeCompilerFlag("/O[0-9a-hj-wyzA-HJ-WYZ]+[ ]?" "/Ox" "${CMAKE_C_FLAGS_RELWITHDEBINFO}" "RelWithDebugInfo" CMAKE_C_FLAGS_RELWITHDEBINFO)
	MT_removeCompilerFlag("/O[0-9a-hj-wyzA-HJ-WYZ]+[ ]?" "/Ox" "${CMAKE_C_FLAGS_MINSIZEREL}" "MinSizeRel" CMAKE_C_FLAGS_MINSIZEREL)
	MT_addCompilerFlag("/Od" "/Od" "${CMAKE_C_FLAGS_DEBUG}" "Debug" CMAKE_C_FLAGS_DEBUG)
	MT_addCompilerFlag("/Ox" "/Ox" "${CMAKE_C_FLAGS_RELEASE}" "Release" CMAKE_C_FLAGS_RELEASE)
	MT_addCompilerFlag("/Ox" "/Ox" "${CMAKE_C_FLAGS_RELWITHDEBINFO}" "RelWithDebugInfo" CMAKE_C_FLAGS_RELWITHDEBINFO)
	MT_addCompilerFlag("/Ox" "/Ox" "${CMAKE_C_FLAGS_MINSIZEREL}" "MinSizeRel" CMAKE_C_FLAGS_MINSIZEREL)

	MT_addCompilerFlag("/RTC1" "/RTC1" "${CMAKE_C_FLAGS_DEBUG}" "Debug" CMAKE_C_FLAGS_DEBUG)
	MT_addCompilerFlag("/D_DEBUG" "/D_DEBUG" "${CMAKE_C_FLAGS_DEBUG}" "Debug" CMAKE_C_FLAGS_DEBUG)

	MT_addCompilerFlag("/MDd" "/MDd" "${CMAKE_C_FLAGS_DEBUG}" "Debug" CMAKE_C_FLAGS_DEBUG)
	MT_addCompilerFlag("/MD" "/MD" "${CMAKE_C_FLAGS_RELEASE}" "Release" CMAKE_C_FLAGS_RELEASE)
	MT_addCompilerFlag("/MD" "/MD" "${CMAKE_C_FLAGS_RELWITHDEBINFO}" "RelWithDebugInfo" CMAKE_C_FLAGS_RELWITHDEBINFO)
	MT_addCompilerFlag("/MD" "/MD" "${CMAKE_C_FLAGS_MINSIZEREL}" "MinSizeRel" CMAKE_C_FLAGS_MINSIZEREL)
elseif(${CMAKE_C_COMPILER_ID} STREQUAL "Intel")
	MT_removeCompilerFlag("${COMPILER_OPTION}O[0-9]+[ ]?" "${COMPILER_OPTION}Ox" "${CMAKE_C_FLAGS_DEBUG}" "Debug" CMAKE_C_FLAGS_DEBUG)
	MT_removeCompilerFlag("${COMPILER_OPTION}O[013-9]+[ ]?" "${COMPILER_OPTION}Ox" "${CMAKE_C_FLAGS_RELEASE}" "Release" CMAKE_C_FLAGS_RELEASE)
	MT_removeCompilerFlag("${COMPILER_OPTION}O[013-9]+[ ]?" "${COMPILER_OPTION}Ox" "${CMAKE_C_FLAGS_RELWITHDEBINFO}" "RelWithDebugInfo" CMAKE_C_FLAGS_RELWITHDEBINFO)
	MT_removeCompilerFlag("${COMPILER_OPTION}O[013-9]+[ ]?" "${COMPILER_OPTION}Ox" "${CMAKE_C_FLAGS_MINSIZEREL}" "MinSizeRel" CMAKE_C_FLAGS_MINSIZEREL)
	MT_addCompilerFlag("${COMPILER_OPTION}Od" "${COMPILER_OPTION}Od" "${CMAKE_C_FLAGS_DEBUG}" "Debug" CMAKE_C_FLAGS_DEBUG)
	MT_addCompilerFlag("${COMPILER_OPTION}O3" "${COMPILER_OPTION}O3" "${CMAKE_C_FLAGS_RELEASE}" "Release" CMAKE_C_FLAGS_RELEASE)
	MT_addCompilerFlag("${COMPILER_OPTION}O3" "${COMPILER_OPTION}O3" "${CMAKE_C_FLAGS_RELWITHDEBINFO}" "RelWithDebugInfo" CMAKE_C_FLAGS_RELWITHDEBINFO)
	MT_addCompilerFlag("${COMPILER_OPTION}O3" "${COMPILER_OPTION}O3" "${CMAKE_C_FLAGS_MINSIZEREL}" "MinSizeRel" CMAKE_C_FLAGS_MINSIZEREL)
else() #GCC, clang and Apple clang
	# Remove existing -Ox flags
	MT_removeCompilerFlag("-O[1-2sS]+[ ]?" "-Ox" "${CMAKE_C_FLAGS_DEBUG}" "Debug" CMAKE_C_FLAGS_DEBUG)
	MT_removeCompilerFlag("-O[0-2sS]+[ ]?" "-Ox" "${CMAKE_C_FLAGS_RELEASE}" "Release" CMAKE_C_FLAGS_RELEASE)
	MT_removeCompilerFlag("-O[0-2sS]+[ ]?" "-Ox" "${CMAKE_C_FLAGS_RELWITHDEBINFO}" "RelWithDebugInfo" CMAKE_C_FLAGS_RELWITHDEBINFO)
	MT_removeCompilerFlag("-O[0-2sS]+[ ]?" "-Ox" "${CMAKE_C_FLAGS_MINSIZEREL}" "MinSizeRel" CMAKE_C_FLAGS_MINSIZEREL)
	MT_addCompilerFlag("-O0" "-O0" "${CMAKE_C_FLAGS_DEBUG}" "Debug" CMAKE_C_FLAGS_DEBUG)
	MT_addCompilerFlag("-O3" "-O3" "${CMAKE_C_FLAGS_RELWITHDEBINFO}" "RelWithDebugInfo" CMAKE_C_FLAGS_RELWITHDEBINFO)
	MT_addCompilerFlag("-O3" "-O3" "${CMAKE_C_FLAGS_RELEASE}" "Release" CMAKE_C_FLAGS_RELEASE)
	MT_addCompilerFlag("-O3" "-O3" "${CMAKE_C_FLAGS_MINSIZEREL}" "MinSizeRel" CMAKE_C_FLAGS_MINSIZEREL)

	# Replace -g flag with -g3
	MT_removeCompilerFlag("-g[ ]" "-g" "${CMAKE_C_FLAGS_DEBUG}" "Debug" CMAKE_C_FLAGS_DEBUG)
	MT_removeCompilerFlag("-g[ ]" "-g" "${CMAKE_C_FLAGS_RELWITHDEBINFO}" "RelWithDebugInfo" CMAKE_C_FLAGS_RELWITHDEBINFO)
	if("${CMAKE_C_FLAGS_DEBUG}" STREQUAL "") # hack
		set(CMAKE_C_FLAGS_DEBUG "-g3")
		set(CMAKE_C_FLAGS_RELWITHDEBINFO "-g3")
		message(STATUS "Added -g3 flag for Debug and RelWithDebugInfo builds")
	else()
		MT_addCompilerFlag("-g3" "-g3" "${CMAKE_C_FLAGS_DEBUG}" "Debug" CMAKE_C_FLAGS_DEBUG)
		MT_addCompilerFlag("-g3" "-g3" "${CMAKE_C_FLAGS_RELWITHDEBINFO}" "RelWithDebugInfo" CMAKE_C_FLAGS_RELWITHDEBINFO)
	endif()

	if(NOT ${CMAKE_C_FLAGS_RELEASE} MATCHES "D_FORTIFY_SOURCE")
		set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} -D_FORTIFY_SOURCE=2")
		set(CMAKE_C_FLAGS_RELWITHDEBINFO "${CMAKE_C_FLAGS_RELWITHDEBINFO} -D_FORTIFY_SOURCE=2")
		set(CMAKE_C_FLAGS_MINSIZEREL "${CMAKE_C_FLAGS_MINSIZEREL} -D_FORTIFY_SOURCE=2")
		message(STATUS "Added definition _FORTIFY_SOURCE=2 for Release, RelWithDebugInfo and MinSizeRel builds")
	endif()

	if(${ENABLE_ASSERT} STREQUAL "NO")
		MT_addCompilerFlag("-fomit-frame-pointer" "-fomit-frame-pointer" "${CMAKE_C_FLAGS}" "All" CMAKE_C_FLAGS)
	endif()
endif()

function(MT_checkCompilerFlag Flag)
	if(NOT "${CMAKE_C_FLAGS}" MATCHES "${Flag}")
		string(REPLACE "-" "" FLAG_TEST ${Flag}) # cmake will get confused
		string(REPLACE "/" "" FLAG_TEST ${FLAG_TEST}) # cmake will get confused
		cmake_push_check_state()
		set(CMAKE_REQUIRED_FLAGS "${CMAKE_REQUIRED_FLAGS} ${Flag}")
		check_c_source_compiles("int main(int argc,char** argv){(void)argc;(void)argv;return 0;}" COMPILER_${FLAG_TEST})
		cmake_pop_check_state()
		if(COMPILER_${FLAG_TEST})
			set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${Flag}" PARENT_SCOPE)
		endif()
	endif()
endfunction()

if(${ENABLE_STRICT} STREQUAL "YES")
	if(${CMAKE_C_COMPILER_ID} MATCHES "^GNU|Clang|AppleClang$")
		MT_checkCompilerFlag("-W")
		MT_checkCompilerFlag("-Werror")
		MT_checkCompilerFlag("-Wall")
		MT_checkCompilerFlag("-Wextra")
		MT_checkCompilerFlag("-Werror-implicit-function-declaration")
		MT_checkCompilerFlag("-Wpointer-arith")
		MT_checkCompilerFlag("-Wundef")
		MT_checkCompilerFlag("-Wformat=2")
		MT_checkCompilerFlag("-Wformat-overflow=1")
		MT_checkCompilerFlag("-Wno-format-truncation")
		MT_checkCompilerFlag("-Wno-format-nonliteral")
		MT_checkCompilerFlag("-Wno-error=suggest-attribute=format")
		MT_checkCompilerFlag("-Wno-cast-function-type")
		MT_checkCompilerFlag("-Winit-self")
		MT_checkCompilerFlag("-Winvalid-pch")
		MT_checkCompilerFlag("-Wmissing-declarations")
		MT_checkCompilerFlag("-Wmissing-format-attribute")
		MT_checkCompilerFlag("-Wmissing-prototypes")
		MT_checkCompilerFlag("-Wno-missing-field-initializers")
		MT_checkCompilerFlag("-Wold-style-definition")
		MT_checkCompilerFlag("-Wpacked")
		MT_checkCompilerFlag("-Wunknown-pragmas")
		MT_checkCompilerFlag("-Wvariadic-macros")
		MT_checkCompilerFlag("-fstack-protector-all")
		MT_checkCompilerFlag("-Wstack-protector")
		MT_checkCompilerFlag("-Wpacked-bitfield-compat")
		MT_checkCompilerFlag("-Wsync-nand")
		MT_checkCompilerFlag("-Wjump-misses-init")
		MT_checkCompilerFlag("-Wmissing-include-dirs")
		MT_checkCompilerFlag("-Wlogical-op")
		MT_checkCompilerFlag("-Wduplicated-cond")
		MT_checkCompilerFlag("-Wduplicated-branches")
		MT_checkCompilerFlag("-Wrestrict")
		MT_checkCompilerFlag("-Wnested-externs")
		MT_checkCompilerFlag("-Wno-char-subscripts")
		MT_checkCompilerFlag("-Wunreachable-code")
	elseif(${CMAKE_C_COMPILER_ID} STREQUAL "Intel" AND ${CMAKE_SYSTEM_NAME} STREQUAL "Linux")
		if(NOT "${LINK_OPTIONS}" MATCHES "-shared-intel")
			set(LINK_OPTIONS "${LINK_OPTIONS} -shared-intel")
		endif()
		MT_checkCompilerFlag("-ansi")
		MT_checkCompilerFlag("-Wall")
		MT_checkCompilerFlag("-w2")
		MT_checkCompilerFlag("-Wcheck")
		MT_checkCompilerFlag("-Werror")
		MT_checkCompilerFlag("-Werror-all")
		MT_checkCompilerFlag("-we140,147,266,181,810,271,593")
		MT_checkCompilerFlag("-wd1418,1419,981,193,1357")
		MT_checkCompilerFlag("-wd2259")
		if("${ENABLE_ASSERT}" STREQUAL "YES")
			MT_checkCompilerFlag("-wd279")
		endif()
	elseif(MSVC)
		MT_checkCompilerFlag("/WX")
	endif()
endif()

if(NOT ${ENABLE_SANITIZER} STREQUAL "NO")
	if("${CMAKE_C_COMPILER_ID}" STREQUAL "GNU")
		MT_checkCompilerFlag("-fsanitize=address")
		MT_checkCompilerFlag("-fno-omit-frame-pointer")
		add_compile_definitions(NO_ATOMIC_INSTRUCTIONS)
	else()
		message(FATAL_ERROR "Sanitizer only supported with GCC")
	endif()
endif()

set(CMAKE_C_LINK_FLAGS "${LINK_OPTIONS}" CACHE STRING "Link flags for all builds" FORCE) # This variable is depreacted but still used
set(LINK_OPTIONS "${LINK_OPTIONS}" CACHE STRING "Link options for all builds" FORCE)
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS}" CACHE STRING "Compilation flags for all builds" FORCE)
set(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG}" CACHE STRING "Debug flags" FORCE)
set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE}" CACHE STRING "Release flags" FORCE)
set(CMAKE_C_FLAGS_RELWITHDEBINFO "${CMAKE_C_FLAGS_RELWITHDEBINFO}" CACHE STRING "RelWithDebugInfo flags" FORCE)
set(CMAKE_C_FLAGS_MINSIZEREL "${CMAKE_C_FLAGS_MINSIZEREL}" CACHE STRING "MinSizeRel flags" FORCE)

site_name(BUILD_HOST)
set(builtby "$ENV{USER}@${BUILD_HOST}")
string(TOUPPER ${CMAKE_BUILD_TYPE} CMAKE_BUILD_TYPE_UPPER)
set(compilercall "${CMAKE_C_COMPILER}${CMAKE_C_FLAGS} ${CMAKE_C_FLAGS_${CMAKE_BUILD_TYPE_UPPER}}")
set(linkercall "${CMAKE_LINKER}${CMAKE_C_LINK_FLAGS}")

configure_file(monetdb_config.h.in ${CMAKE_CURRENT_BINARY_DIR}/monetdb_config.h)
install(FILES ${CMAKE_CURRENT_BINARY_DIR}/monetdb_config.h DESTINATION ${INCLUDEDIR}/monetdb)
include_directories(${CMAKE_CURRENT_BINARY_DIR})

add_subdirectory(buildtools)
add_subdirectory(common)
add_subdirectory(clients)
if(HAVE_GDK)
	add_subdirectory(gdk)
endif()
if(HAVE_MONETDB5)
	add_subdirectory(monetdb5)
endif()
if(HAVE_GEOM) # The SHP vault requires the geom module, so the geom module should compile before SQL
	add_subdirectory(geom)
endif()
if(HAVE_SQL)
	add_subdirectory(sql)
endif()
add_subdirectory(tools)
if(HAVE_TESTING)
	add_subdirectory(testing)
endif()
