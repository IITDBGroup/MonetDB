#[[
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0.  If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright 1997 - July 2008 CWI, August 2008 - 2019 MonetDB B.V.
#]]

cmake_minimum_required(VERSION 3.12 FATAL_ERROR)

project(MonetDB C)

set(C_STANDARD_REQUIRED ON)
set(CMAKE_C_STANDARD 99)
set(PACKAGE "MonetDB" CACHE STRING "MonetDB, SQL queries at light speed")

set(CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake" CACHE INTERNAL "Location of custom CMake modules.")
include(CheckCCompilerFlag REQUIRED)
include(CheckCSourceCompiles REQUIRED)
include(CheckCSourceRuns REQUIRED)
include(CheckIncludeFile REQUIRED)
include(CheckIncludeFiles REQUIRED)
include(CMakePushCheckState REQUIRED)
include(CheckStructHasMember REQUIRED)
include(CheckSymbolExists REQUIRED)
include(CheckTypeSize REQUIRED)
include(TestBigEndian REQUIRED)
include(TestLargeFiles REQUIRED)

cmake_policy(SET CMP0075 NEW)

# Save default cmake options in the begining
set(PREV_CMAKE_REQUIRED_LIBRARIES "${CMAKE_REQUIRED_LIBRARIES}")

function(MT_clibsToCmake INPUT_INCS OUTPUT_INCS) # Remove -I before the include path
	string(LENGTH "${INPUT_INCS}" INPUT_INCS_LENGTH)
	string(SUBSTRING "${INPUT_INCS}" 2 ${INPUT_INCS_LENGTH} INPUT_INCS)
	string(REPLACE "\ -I" ";" HELPER ${INPUT_INCS})
	set(${OUTPUT_INCS} "${HELPER}" PARENT_SCOPE)
endfunction()

# set host data
string(TOLOWER "${CMAKE_SYSTEM_PROCESSOR}" CMAKE_SYSTEM_PROCESSOR_LOWER)
string(TOLOWER "${CMAKE_SYSTEM_NAME}" CMAKE_SYSTEM_NAME_LOWER)
string(TOLOWER "${CMAKE_C_COMPILER_ID}" CMAKE_C_COMPILER_ID_LOWER)
set("HOST" "${CMAKE_SYSTEM_PROCESSOR_LOWER}-pc-${CMAKE_SYSTEM_NAME_LOWER}-${CMAKE_C_COMPILER_ID_LOWER}")

# Change these variables between releases
set(MONETDB_VERSION_MAJOR "11")
set(MONETDB_VERSION "${MONETDB_VERSION_MAJOR}.34.0")
set(VERSION "${MONETDB_VERSION}")

set(GDK_VERSION_MAJOR "18")
set(GDK_VERSION "${GDK_VERSION_MAJOR}.0.0")

set(MAPI_VERSION_MAJOR "12")
set(MAPI_VERSION "${MAPI_VERSION_MAJOR}.0.0")

set(MONETDB5_VERSION_MAJOR "27")
set(MONETDB5_VERSION "${MONETDB5_VERSION_MAJOR}.0.0")

set(STREAM_VERSION_MAJOR "13")
set(STREAM_VERSION "${STREAM_VERSION_MAJOR}.0.0")

# Packaging information
set(PACKAGE "MonetDB")
set(PACKAGE_NAME "MonetDB")
set(PACKAGE_TARNAME "MonetDB")
set(PACKAGE_STRING "MonetDB ${MONETDB_VERSION}")
set(PACKAGE_URL "https://www.monetdb.org/")
set(PACKAGE_BUGREPORT "https://bugs.monetdb.org/")
set(PACKAGE_VERSION "${MONETDB_VERSION}")

# Check current version control revision
if(EXISTS "${CMAKE_SOURCE_DIR}/.hg")
	exec_program("hg" "${CMAKE_SOURCE_DIR}" ARGS "id -i" OUTPUT_VARIABLE HG_OUPUT_RES RETURN_VALUE HG_RETURN_CODE)
	if(HG_RETURN_CODE EQUAL 0 AND HG_OUPUT_RES)
		set(MERCURIAL_ID "${HG_OUPUT_RES}")
	endif()
elseif(EXISTS "${CMAKE_SOURCE_DIR}/.git")
	exec_program("git" "${CMAKE_SOURCE_DIR}" ARGS "rev-parse HEAD" OUTPUT_VARIABLE GIT_OUPUT_RES RETURN_VALUE GIT_RETURN_CODE)
	if(GIT_RETURN_CODE EQUAL 0 AND GIT_OUPUT_RES)
		set(MERCURIAL_ID "${GIT_OUPUT_RES}+")
	endif()
endif()

if(NOT "${CMAKE_C_COMPILER_ID}" MATCHES "^GNU|Intel|Clang|MSVC|AppleClang$")
	message(WARNING "Compiler potentially not (correctly) recognized")
endif()

# Set default build options
if(NOT CMAKE_BUILD_TYPE)
	message(STATUS "Setting build type to Debug as none was selected")
	set(CMAKE_BUILD_TYPE Debug CACHE STRING "The type of build" FORCE)
endif()
if(EXISTS "${CMAKE_SOURCE_DIR}/vertoo.data")
	set(DFT_STRICT "YES")
	set(DFT_ASSERT "YES")
	set(DFT_DEVELOPER "YES")
else()
	set(DFT_STRICT "NO")
	set(DFT_ASSERT "NO")
	set(DFT_DEVELOPER "NO")
endif()

# modules to use
set(ENABLE_MAPI "YES" CACHE STRING "Enable MAPI (default=YES)")
if(NOT ${ENABLE_MAPI} STREQUAL "NO")
	set(HAVE_MAPI ON)
endif()

set(ENABLE_GDK "YES" CACHE STRING "Enable support for GDK (default=YES)")

set(ENABLE_MONETDB5 "YES" CACHE STRING "Enable support for MonetDB5 (default=YES)")
if(${ENABLE_GDK} STREQUAL "NO")
	if(${ENABLE_MONETDB5} STREQUAL "YES")
		message(FATAL_ERROR "MonetDB5 requires GDK.")
	elseif(${ENABLE_MONETDB5} STREQUAL "AUTO")
		set(ENABLE_MONETDB5 "NO")
	endif()
else()
	set(HAVE_GDK ON)
endif()

set(ENABLE_SQL "YES" CACHE STRING "Enable support for MonetDB/SQL (default=YES)")
if(${ENABLE_MONETDB5} STREQUAL "NO")
	if(${ENABLE_SQL} STREQUAL "YES")
		message(FATAL_ERROR "MonetDB/SQL requires MonetDB5.")
	elseif(${ENABLE_SQL} STREQUAL "AUTO")
		set(ENABLE_SQL "NO")
	endif()
endif()

set(ENABLE_GEOM "AUTO" CACHE STRING "Enable support for geom module (default=AUTO)")
if(${ENABLE_MONETDB5} STREQUAL "NO")
	if(${ENABLE_GEOM} STREQUAL "YES")
		message(FATAL_ERROR "Geom module requires MonetDB5.")
	elseif(${ENABLE_GEOM} STREQUAL "AUTO")
		set(ENABLE_GEOM "NO")
	endif()
endif()

set(ENABLE_LIDAR "AUTO" CACHE STRING "Enable support for LiDAR data (default=AUTO)")
set(ENABLE_SHP "AUTO" CACHE STRING "Enable support for ESRI Shapefiles (default=AUTO)")
if(${ENABLE_GEOM} STREQUAL "NO")
	if(${ENABLE_SHP} STREQUAL "YES")
		message(FATAL_ERROR "ESRI Shapefile vault requires the geom module.")
	elseif(${ENABLE_SHP} STREQUAL "AUTO")
		set(ENABLE_SHP "NO")
	endif()
else()
	set(HAVE_GEOM ON)
endif()

set(ENABLE_EMBEDDED "NO" CACHE STRING "Enable support for running MonetDB as a library (default=NO)") # TODO check this
if(NOT ${ENABLE_EMBEDDED} STREQUAL "NO")
	set(HAVE_EMBEDDED ON)
endif()

set(ENABLE_CONSOLE "YES" CACHE STRING "Enables direct console on the server (involves security risks) (default=YES)")
if(NOT ${ENABLE_CONSOLE} STREQUAL "NO")
	set(HAVE_CONSOLE ON)
endif()

set(ENABLE_ASSERT "${DFT_ASSERT}" CACHE STRING "Enable assertions in the code (default=YES for development sources, NO for tarball instalation)")
set(ENABLE_STRICT "${DFT_STRICT}" CACHE STRING "Enable strict compiler flags (default=YES for development sources, NO for tarball instalation)")
set(ENABLE_SANITIZER "NO" CACHE STRING "Enable support for the GCC address sanitizer (default=NO)")
set(ENABLE_DEVELOPER "${DFT_DEVELOPER}" CACHE STRING "Enable full debugging (default=YES for development sources, NO for tarball instalation)")
if(NOT ${ENABLE_DEVELOPER} STREQUAL "NO")
	set(HAVE_DEVELOPER ON)
endif()
set(ENABLE_STATIC_ANALYSIS "NO" CACHE STRING "Configure for static code analysis (use only if you know what you are doing)")
if(NOT ${ENABLE_STATIC_ANALYSIS} STREQUAL "NO")
	set(STATIC_CODE_ANALYSIS ON)
endif()

set(SOURCE "${CMAKE_SOURCE_DIR}")
set(PREFIX "${CMAKE_INSTALL_PREFIX}")
set(EXEC_PREFIX "${CMAKE_INSTALL_PREFIX}")

if(WIN32)
	string(REPLACE "/" "\\\\" TRIMMED_INSTALL_PREFIX "${CMAKE_INSTALL_PREFIX}")
	set(BINDIR "${CMAKE_INSTALL_PREFIX}/bin")
	set(BIN_DIR "${TRIMMED_INSTALL_PREFIX}\\\\bin")
	set(DATADIR "${CMAKE_INSTALL_PREFIX}/share")
	set(DATA_DIR "${TRIMMED_INSTALL_PREFIX}\\\\share")
	set(INCLUDEDIR "${CMAKE_INSTALL_PREFIX}/include")
	set(LIBDIR "${CMAKE_INSTALL_PREFIX}/lib")
	set(LIB_DIR "${TRIMMED_INSTALL_PREFIX}\\\\lib")
	set(LOCALSTATEDIR "${CMAKE_INSTALL_PREFIX}/var")
	set(LOCALSTATE_DIR "${TRIMMED_INSTALL_PREFIX}\\\\var")
else()
	include(GNUInstallDirs REQUIRED)
	set(BINDIR "${CMAKE_INSTALL_FULL_BINDIR}")
	set(BIN_DIR "${CMAKE_INSTALL_FULL_BINDIR}")
	set(DATADIR "${CMAKE_INSTALL_FULL_DATADIR}")
	set(DATA_DIR "${CMAKE_INSTALL_FULL_DATADIR}")
	set(DATAROOTDIR "${CMAKE_INSTALL_FULL_DATAROOTDIR}")
	set(INCLUDEDIR "${CMAKE_INSTALL_FULL_INCLUDEDIR}")
	set(INFODIR "${CMAKE_INSTALL_FULL_INFODIR}")
	set(LIBDIR "${CMAKE_INSTALL_FULL_LIBDIR}")
	set(LIB_DIR "${CMAKE_INSTALL_FULL_LIBDIR}")
	set(LIBEXECDIR "${CMAKE_INSTALL_FULL_LIBEXECDIR}")
	set(LOCALSTATEDIR "${CMAKE_INSTALL_FULL_LOCALSTATEDIR}")
	set(LOCALSTATE_DIR "${CMAKE_INSTALL_FULL_LOCALSTATEDIR}")
	set(LOGDIR "${CMAKE_INSTALL_FULL_LOCALSTATEDIR}/log/monetdb" CACHE PATH "Where to put log files (LOCALSTATEDIR/log/monetdb)")
	set(MANDIR "${CMAKE_INSTALL_FULL_MANDIR}")
	set(RUNDIR "${CMAKE_INSTALL_FULL_LOCALSTATEDIR}/run/monetdb" CACHE PATH "Where to put pid files (LOCALSTATEDIR/run/monetdb)")
	set(SYSCONFDIR "${CMAKE_INSTALL_FULL_SYSCONFDIR}")
	set(CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_FULL_LIBDIR}")
	set(PKGCONFIGDIR "${LIBDIR}/pkgconfig")
endif()

set(PROGRAM_PERMISSIONS_DEFAULT OWNER_WRITE OWNER_READ OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)

# password hash algorithm
set(PASSWORD_BACKEND "SHA512" CACHE STRING "Password hash algorithm, one of MD5, SHA1, RIPEMD160, SHA224, SHA256, SHA384, SHA512, defaults to SHA512")
if(${PASSWORD_BACKEND} MATCHES "^MD5|SHA1|RIPEMD160|SHA224|SHA256|SHA384|SHA512$")
	set("MONETDB5_PASSWDHASH" ${PASSWORD_BACKEND})
	set("MONETDB5_PASSWDHASH_TOKEN" ${PASSWORD_BACKEND})
else()
	message(FATAL_ERROR "PASSWORD_BACKEND invalid, choose one of MD5, SHA1, RIPEMD160, SHA224, SHA256, SHA384, SHA512")
endif()

if(${CMAKE_C_COMPILER_ID} STREQUAL "Intel")
	add_compile_options(-no-gcc) # Intel compiler hack
elseif(${CMAKE_C_COMPILER_ID} STREQUAL "GNU")
	add_compile_definitions(_GNU_SOURCE _XOPEN_SOURCE)
	set(CMAKE_REQUIRED_DEFINITIONS "${CMAKE_REQUIRED_DEFINITIONS} -D_GNU_SOURCE -D_XOPEN_SOURCE")
endif()
if(NOT MSVC)
	add_compile_definitions(_REENTRANT)
	set(CMAKE_REQUIRED_DEFINITIONS "${CMAKE_REQUIRED_DEFINITIONS} -D_REENTRANT")
endif()

opj_test_large_files(_LARGE_FILES)
opj_test_large_files(_LARGEFILE_SOURCE)
opj_test_large_files(_FILE_OFFSET_BITS)

message(STATUS "Test if struct tm has tm_zone field")
check_struct_has_member("struct tm" tm_zone "time.h" HAVE_STRUCT_TM_TM_ZONE LANGUAGE C)

message(STATUS "Test for __builtin_add_overflow")
check_c_source_compiles("
	#include <stdio.h>
	#include <stdlib.h>

	int main(int argc, char **argv) {
		__int128 a=(__int128)atoll(getenv(\"a\"))<<64, b=(__int128)atoll(getenv(\"b\"))<<64, c;
		(void) argc;(void) argv;
		if (!__builtin_mul_overflow(a, b, &c))
			printf(\"%lld %lld\",(long long)(c>>64), (long long)c);
		return 0;
	}" HAVE___BUILTIN_ADD_OVERFLOW)

set(FLEXIBLE_ARRAY_MEMBER ON) # We compile according to C99 standard
if(MSVC)
	set(__attribute__(a) ON)
	set(restrict __restrict)
	add_compile_definitions(_CRT_SECURE_NO_WARNINGS _CRT_SECURE_NO_DEPRECATE _WINSOCK_DEPRECATED_NO_WARNINGS)
endif()

# https://github.com/Unidata/netcdf-c/commit/b432a527c4a38af45498691a44c5a88961b9c751
message(STATUS "Test if char type is unsigned or not")
check_c_source_compiles("
	#include <stdlib.h>

	int main(int argc, char **argv) {
		char error_if_char_is_signed[((char)-1) < 0 ? -1 : 1];
		(void) argc; (void) argv; (void) error_if_char_is_signed;
		error_if_char_is_signed[0] = 0;
		return 0;
	}" __CHAR_UNSIGNED__)
if(__CHAR_UNSIGNED__)
	add_compile_definitions(__CHAR_UNSIGNED__)
endif()

message(STATUS "Test if __hidden macro is supported")
check_c_source_compiles("
	#include <stdlib.h>

	__hidden void test(int a);
	void test(int a) { (void)a; }

	int main(int argc, char **argv) {
		(void) argc; (void) argv;
		test(1);
		return 0;
	}" HAVE_HIDDEN)
if(NOT HAVE_HIDDEN)
	set(__hidden ON)
endif()

if(MSVC)
	set(_Noreturn "__declspec(noreturn)")
else()
	message(STATUS "Test if _Noreturn keyword is supported")
	check_c_source_compiles("
		#include <stdlib.h>

		_Noreturn void foo(const char *a, ...);
		void foo(const char *a, ...) { (void)a; exit(0); }

		int main(int argc, char **argv) {
			(void) argc; (void) argv;
			foo (\"%s\", \"\");
			return 0;
		}" HAVE_NORETURN)
	if(HAVE_NORETURN)
		set(_Noreturn _Noreturn)
	else()
		set(_Noreturn __attribute__((__noreturn__)))
	endif()
endif()

message(STATUS "Test if compiler can use NAN as an initializer")
check_c_source_compiles("
	#include <math.h>

	extern const float f;
	extern const double d;
	const float f = NAN;
	const double d = NAN;

	int main(int argc, char **argv) {
		(void) argc; (void) argv;
		return 0;
	}" NAN_CAN_BE_USED_AS_INITIALIZER)
if(NOT NAN_CAN_BE_USED_AS_INITIALIZER)
	set(NAN_CANNOT_BE_USED_AS_INITIALIZER ON)
endif()

# Iconv - Check before adding any new compiler flag
set(ICONV_INCLUDE_DIR "")
set(ICONV_LIBRARIES "")
include(FindIconv)
if(Iconv_FOUND)
	set(HAVE_ICONV ON)
	set(HAVE_ICONV_H ON)
	cmake_push_check_state()
	if(NOT Iconv_IS_BUILT_IN)
		set(ICONV_INCLUDE_DIR "${Iconv_INCLUDE_DIR}")
		set(ICONV_LIBRARIES "${Iconv_LIBRARY}")
		set(CMAKE_REQUIRED_LIBRARIES "${CMAKE_REQUIRED_LIBRARIES};${ICONV_LIBRARIES}")
	endif()

	if(MSVC)
		set(ICONV_CONST " ")
	else()
		message(STATUS "Check if second iconv argument requires const")
		check_c_source_compiles("
			#include <iconv.h>

			int main(int argc, char **argv) {
				iconv_t conv = 0;
				char* in, *out = 0;
				size_t ilen = 0, olen = 0;
				(void) argc; (void) argv;
				iconv(conv, &in, &ilen, &out, &olen);
				return 0;
			}
		" ICONV_NOT_REQUIRES_CONST)
		if(ICONV_NOT_REQUIRES_CONST)
			set(ICONV_CONST " ")
		else()
			set(ICONV_CONST const)
		endif()
	endif()
	cmake_pop_check_state()
endif()

if(${CMAKE_C_COMPILER_ID} STREQUAL "Intel" AND EXISTS "${ROOT}/usr/include/math.h") # see https://software.intel.com/en-us/forums/intel-c-compiler/topic/760979
	file(READ "${ROOT}/usr/include/math.h" TMPTXT)
	string(FIND "${TMPTXT}" "_LIB_VERSION_TYPE" FOUND_VERSION)
	if(FOUND_VERSION)
		set(INTEL_MATH_H_HACK ON)
	endif()
endif()

# Check for compiler flags
function(removeCompilerFlag REGEX_EXPRESSION FLAG_TO_REMOVE OLD_FLAGS BUILD NEW_FLAGS)
	if(${OLD_FLAGS} MATCHES "${REGEX_EXPRESSION}")
		string(REGEX REPLACE "${REGEX_EXPRESSION}" "" NEW_VAR "${OLD_FLAGS}")
		set(${NEW_FLAGS} "${NEW_VAR}" PARENT_SCOPE)
		message(STATUS "Removed ${FLAG_TO_REMOVE} flag for ${BUILD} build(s)")
	endif()
endfunction()
function(addCompilerFlag REGEX_EXPRESSION FLAG_TO_ADD OLD_FLAGS BUILD NEW_FLAGS)
	if(NOT ${OLD_FLAGS} MATCHES "${REGEX_EXPRESSION}")
		set(${NEW_FLAGS} "${OLD_FLAGS} ${FLAG_TO_ADD}" PARENT_SCOPE)
		message(STATUS "Added ${FLAG_TO_ADD} flag for ${BUILD} build(s)")
	endif()
endfunction()
function(addLinkerFlag REGEX_EXPRESSION FLAG_TO_ADD OLD_FLAGS NEW_FLAGS)
	if(NOT ${OLD_FLAGS} MATCHES "${REGEX_EXPRESSION}")
		set(${NEW_FLAGS} "${OLD_FLAGS} ${FLAG_TO_ADD}" PARENT_SCOPE)
		message(STATUS "Added ${FLAG_TO_ADD} flag")
	endif()
endfunction()

if(NOT CMAKE_C_FLAGS)
	set(CMAKE_C_FLAGS "")
endif()
if(MSVC)
	addCompilerFlag("/GF" "/GF" "${CMAKE_C_FLAGS}" "all" CMAKE_C_FLAGS)
	addCompilerFlag("/W3" "/W3" "${CMAKE_C_FLAGS}" "all" CMAKE_C_FLAGS)
	addCompilerFlag("/nologo" "/nologo" "${CMAKE_C_FLAGS}" "all" CMAKE_C_FLAGS)
	addCompilerFlag("/Zi" "/Zi" "${CMAKE_C_FLAGS}" "all" CMAKE_C_FLAGS)
	addCompilerFlag("/Oi" "/Oi" "${CMAKE_C_FLAGS}" "all" CMAKE_C_FLAGS)
endif()
set(X_CFLAGS "")

if(${ENABLE_ASSERT} STREQUAL "NO")
	set(NDEBUG ON)
elseif(${ENABLE_ASSERT} STREQUAL "YES" AND ${CMAKE_C_COMPILER_ID} STREQUAL "Intel")
	set(X_CFLAGS "${X_CFLAGS} -wd279")
endif()

if(MSVC)
	# Remove all /Ox but /Oi on all, /Od on Debug and /Ox on others
	removeCompilerFlag("/O[0-9a-ce-hj-zA-CE-HJ-Z]+[ ]?" "/Ox" "${CMAKE_C_FLAGS_DEBUG}" "Debug" CMAKE_C_FLAGS_DEBUG)
	removeCompilerFlag("/O[0-9a-hj-wyzA-HJ-WYZ]+[ ]?" "/Ox" "${CMAKE_C_FLAGS_RELEASE}" "Release" CMAKE_C_FLAGS_RELEASE)
	removeCompilerFlag("/O[0-9a-hj-wyzA-HJ-WYZ]+[ ]?" "/Ox" "${CMAKE_C_FLAGS_RELWITHDEBINFO}" "RelWithDebugInfo" CMAKE_C_FLAGS_RELWITHDEBINFO)
	removeCompilerFlag("/O[0-9a-hj-wyzA-HJ-WYZ]+[ ]?" "/Ox" "${CMAKE_C_FLAGS_MINSIZEREL}" "MinSizeRel" CMAKE_C_FLAGS_MINSIZEREL)

	addCompilerFlag("/Od" "/Od" "${CMAKE_C_FLAGS_DEBUG}" "Debug" CMAKE_C_FLAGS_DEBUG)
	addCompilerFlag("/Ox" "/Ox" "${CMAKE_C_FLAGS_RELEASE}" "Release" CMAKE_C_FLAGS_RELEASE)
	addCompilerFlag("/Ox" "/Ox" "${CMAKE_C_FLAGS_RELWITHDEBINFO}" "RelWithDebugInfo" CMAKE_C_FLAGS_RELWITHDEBINFO)
	addCompilerFlag("/Ox" "/Ox" "${CMAKE_C_FLAGS_MINSIZEREL}" "MinSizeRel" CMAKE_C_FLAGS_MINSIZEREL)

	addCompilerFlag("/RTC1" "/RTC1" "${CMAKE_C_FLAGS_DEBUG}" "Debug" CMAKE_C_FLAGS_DEBUG)
	addCompilerFlag("/D_DEBUG" "/D_DEBUG" "${CMAKE_C_FLAGS_DEBUG}" "Debug" CMAKE_C_FLAGS_DEBUG)

	addCompilerFlag("/MDd" "/MDd" "${CMAKE_C_FLAGS_DEBUG}" "Debug" CMAKE_C_FLAGS_DEBUG)
	addCompilerFlag("/MD" "/MD" "${CMAKE_C_FLAGS_RELEASE}" "Release" CMAKE_C_FLAGS_RELEASE)
	addCompilerFlag("/MD" "/MD" "${CMAKE_C_FLAGS_RELWITHDEBINFO}" "RelWithDebugInfo" CMAKE_C_FLAGS_RELWITHDEBINFO)
	addCompilerFlag("/MD" "/MD" "${CMAKE_C_FLAGS_MINSIZEREL}" "MinSizeRel" CMAKE_C_FLAGS_MINSIZEREL)
else()
	# Remove existing -Ox flags
	removeCompilerFlag("-O[0-2sS]+[ ]?" "-Ox" "${CMAKE_C_FLAGS_DEBUG}" "Debug" CMAKE_C_FLAGS_DEBUG)
	removeCompilerFlag("-O[0-2sS]+[ ]?" "-Ox" "${CMAKE_C_FLAGS_RELEASE}" "Release" CMAKE_C_FLAGS_RELEASE)
	removeCompilerFlag("-O[0-2sS]+[ ]?" "-Ox" "${CMAKE_C_FLAGS_RELWITHDEBINFO}" "RelWithDebugInfo" CMAKE_C_FLAGS_RELWITHDEBINFO)
	removeCompilerFlag("-O[0-2sS]+[ ]?" "-Ox" "${CMAKE_C_FLAGS_MINSIZEREL}" "MinSizeRel" CMAKE_C_FLAGS_MINSIZEREL)
	if(${CMAKE_C_COMPILER_ID} MATCHES "^GNU|Clang|AppleClang$")
		addCompilerFlag("-O3" "-O3" "${CMAKE_C_FLAGS_RELEASE}" "Release" CMAKE_C_FLAGS_RELEASE)
		addCompilerFlag("-O3" "-O3" "${CMAKE_C_FLAGS_RELWITHDEBINFO}" "RelWithDebugInfo" CMAKE_C_FLAGS_RELWITHDEBINFO)
		addCompilerFlag("-O3" "-O3" "${CMAKE_C_FLAGS_MINSIZEREL}" "MinSizeRel" CMAKE_C_FLAGS_MINSIZEREL)
	elseif(${CMAKE_C_COMPILER_ID} STREQUAL "Intel")
		addCompilerFlag("-O2" "-O2" "${CMAKE_C_FLAGS_RELEASE}" CMAKE_C_FLAGS_RELEASE)
		addCompilerFlag("-O2" "-O2" "${CMAKE_C_FLAGS_RELWITHDEBINFO}" CMAKE_C_FLAGS_RELWITHDEBINFO)
		addCompilerFlag("-O2" "-O2" "${CMAKE_C_FLAGS_MINSIZEREL}" CMAKE_C_FLAGS_MINSIZEREL)
	endif()

	# Replace -g flag with -g3
	if(${CMAKE_C_FLAGS_DEBUG} MATCHES "-g$") # hack
		set(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} ")
		set(CMAKE_C_FLAGS_RELWITHDEBINFO "${CMAKE_C_FLAGS_RELWITHDEBINFO} ")
	endif()
	removeCompilerFlag("-g[ ]" "-g" "${CMAKE_C_FLAGS_DEBUG}" "Debug" CMAKE_C_FLAGS_DEBUG)
	removeCompilerFlag("-g[ ]" "-g" "${CMAKE_C_FLAGS_RELWITHDEBINFO}" "RelWithDebugInfo" CMAKE_C_FLAGS_RELWITHDEBINFO)
	if("${CMAKE_C_FLAGS_DEBUG}" STREQUAL "") # hack
		set(CMAKE_C_FLAGS_DEBUG "-g3")
		set(CMAKE_C_FLAGS_RELWITHDEBINFO "-g3")
		message(STATUS "Added -g3 flag for Debug and RelWithDebugInfo build(s)")
	else()
		addCompilerFlag("-g3" "-g3" "${CMAKE_C_FLAGS_DEBUG}" "Debug" CMAKE_C_FLAGS_DEBUG)
		addCompilerFlag("-g3" "-g3" "${CMAKE_C_FLAGS_RELWITHDEBINFO}" "RelWithDebugInfo" CMAKE_C_FLAGS_RELWITHDEBINFO)
	endif()

	if(NOT ${CMAKE_C_FLAGS_RELEASE} MATCHES "D_FORTIFY_SOURCE")
		cmake_push_check_state()
		set(CMAKE_REQUIRED_DEFINITIONS "${CMAKE_REQUIRED_DEFINITIONS} -D_FORTIFY_SOURCE=2")
		check_c_compiler_flag("" HAVE_FORTIFY_SOURCE)
		cmake_pop_check_state()
		if(HAVE_FORTIFY_SOURCE)
			set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} -D_FORTIFY_SOURCE=2")
			set(CMAKE_C_FLAGS_RELWITHDEBINFO "${CMAKE_C_FLAGS_RELWITHDEBINFO} -D_FORTIFY_SOURCE=2")
			set(CMAKE_C_FLAGS_MINSIZEREL "${CMAKE_C_FLAGS_MINSIZEREL} -D_FORTIFY_SOURCE=2")
			message(STATUS "Added definition _FORTIFY_SOURCE=2 for Release build")
		endif()
	endif()

	if(${CMAKE_C_COMPILER_ID} STREQUAL "Clang") # Add fomit-frame-pointer to Clang compilation
		addCompilerFlag("-fomit-frame-pointer" "-fomit-frame-pointer" "${CMAKE_C_FLAGS}" "Release" CMAKE_C_FLAGS)
	endif()

	if(${ENABLE_ASSERT} STREQUAL "YES" AND NOT MSVC) # Remove -fomit-frame-pointer in assert builds
		removeCompilerFlag("-fomit-frame-pointer[ ]?" "-fomit-frame-pointer" "${CMAKE_C_FLAGS}" "Debug" CMAKE_C_FLAGS)
	endif()
endif()

function(checkCompilerFlag Flag)
	if(NOT "${CMAKE_C_FLAGS}" MATCHES "${Flag}")
		check_c_compiler_flag("${Flag}" COMPILE_SUCCEEDED)
		if(COMPILE_SUCCEEDED)
			message(STATUS "Test for ${Flag} succeeded")
			set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${Flag}" PARENT_SCOPE)
		else()
			message(STATUS "Test for ${Flag} failed")
		endif()
	endif()
endfunction()

if(${ENABLE_STRICT} STREQUAL "YES")
	if(${CMAKE_C_COMPILER_ID} MATCHES "^GNU|Clang|AppleClang$")
		checkCompilerFlag("-W")
		checkCompilerFlag("-Werror")
		checkCompilerFlag("-Wall")
		checkCompilerFlag("-Wextra")
		checkCompilerFlag("-Werror-implicit-function-declaration")
		checkCompilerFlag("-Wpointer-arith")
		checkCompilerFlag("-Wundef")
		checkCompilerFlag("-Wformat=2")
		checkCompilerFlag("-Wformat-overflow=1")
		checkCompilerFlag("-Wno-format-truncation")
		checkCompilerFlag("-Wno-format-nonliteral")
		if(${CMAKE_SYSTEM_NAME} STREQUAL "CYGWIN")
			checkCompilerFlag("-Wno-error=suggest-attribute=format")
			checkCompilerFlag("-Wno-cast-function-type")
		endif()
		checkCompilerFlag("-Winit-self")
		checkCompilerFlag("-Winvalid-pch")
		checkCompilerFlag("-Wmissing-declarations")
		checkCompilerFlag("-Wmissing-format-attribute")
		checkCompilerFlag("-Wmissing-prototypes")
		checkCompilerFlag("-Wno-missing-field-initializers")
		checkCompilerFlag("-Wold-style-definition")
		checkCompilerFlag("-Wpacked")
		checkCompilerFlag("-Wunknown-pragmas")
		checkCompilerFlag("-Wvariadic-macros")
		checkCompilerFlag("-fstack-protector-all")
		checkCompilerFlag("-Wstack-protector")
		checkCompilerFlag("-Wpacked-bitfield-compat")
		checkCompilerFlag("-Wsync-nand")
		checkCompilerFlag("-Wjump-misses-init")
		checkCompilerFlag("-Wmissing-include-dirs")
		checkCompilerFlag("-Wlogical-op")
		checkCompilerFlag("-Wduplicated-cond")
		checkCompilerFlag("-Wduplicated-branches")
		checkCompilerFlag("-Wrestrict")
		checkCompilerFlag("-Wnested-externs")
		checkCompilerFlag("-Wno-char-subscripts")
		checkCompilerFlag("-Wunreachable-code")
	elseif(${CMAKE_C_COMPILER_ID} STREQUAL "Intel")
		if(CMAKE_C_COMPILER_VERSION VERSION_LESS 10)
			addLinkerFlag("-i_dynamic" "-i_dynamic" "${LINK_OPTIONS}" LINK_OPTIONS)
		else()
			addLinkerFlag("-shared-intel" "-shared-intel" "${LINK_OPTIONS}" LINK_OPTIONS)
		endif()
		if(CMAKE_C_COMPILER_VERSION VERSION_GREATER_EQUAL 8.1 AND CMAKE_C_COMPILER_VERSION VERSION_LESS_EQUAL 11)
			addLinkerFlag("-wd1418" "-wd1418" "${LINK_OPTIONS}" LINK_OPTIONS)
		endif()
		set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -we140 -we147")
		if(CMAKE_C_COMPILER_VERSION VERSION_LESS 8 OR CMAKE_C_COMPILER_VERSION VERSION_GREATER 17)
			set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -ansi")
		endif()

		set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall -w2 -Wcheck")
		set(X_CFLAGS "${X_CFLAGS} -we266,181,810,271,593")
		set(X_CFLAGS "${X_CFLAGS} -Werror -Werror-all")
		set(X_CFLAGS "${X_CFLAGS} -wd1418,1419,981,193,1357")

		if(CMAKE_C_COMPILER_VERSION VERSION_EQUAL 11 OR CMAKE_C_COMPILER_VERSION VERSION_EQUAL 15 OR CMAKE_C_COMPILER_VERSION VERSION_EQUAL 17)
			set(X_CFLAGS "${X_CFLAGS},2259")
		endif()
		if(CMAKE_C_COMPILER_VERSION VERSION_GREATER_EQUAL 8.1 OR CMAKE_C_COMPILER_VERSION VERSION_LESS_EQUAL 8.9)
			set(X_CFLAGS "${X_CFLAGS},1572")
		elseif(CMAKE_C_COMPILER_VERSION VERSION_GREATER_EQUAL 9.1 OR CMAKE_C_COMPILER_VERSION VERSION_LESS_EQUAL 9.9 OR (CMAKE_C_COMPILER_VERSION VERSION_GREATER_EQUAL 10 AND CMAKE_C_COMPILER_VERSION VERSION_EQUAL 11))
			set(X_CFLAGS "${X_CFLAGS},1572,1599")
		endif()
	elseif(MSVC)
		checkCompilerFlag("/WX")
	endif()
endif()

if(NOT ${ENABLE_SANITIZER} STREQUAL "NO")
	if("${CMAKE_C_COMPILER_ID}" STREQUAL "GNU")
		string(TOLOWER "${ENABLE_SANITIZER}" ENABLE_SANITIZER_LOWER)
		checkCompilerFlag("-fsanitize=address")
		checkCompilerFlag("-fsanitize=${ENABLE_SANITIZER_LOWER}")
		checkCompilerFlag("-fno-omit-frame-pointer")
		add_compile_definitions(NO_ATOMIC_INSTRUCTIONS)
	else()
		message(FATAL_ERROR "Sanitizer only supported with GCC")
	endif()
endif()

if(NOT "${LINK_OPTIONS}" MATCHES "-Wl,-Bsymbolic-function")
	message(STATUS "Test if compiler supports -Wl,-Bsymbolic-functions flag")
	set(PREV_LINK_OPTIONS "${LINK_OPTIONS}")
	set(LINK_OPTIONS "${LINK_OPTIONS} -Wl,-Bsymbolic-functions")
	check_c_compiler_flag("" HAVE_WL_BSYMBOLIC_FUNCTIONS)
	if(NOT HAVE_WL_BSYMBOLIC_FUNCTIONS)
		set(LINK_OPTIONS "${PREV_LINK_OPTIONS}")
	endif()
endif()

set(PYTHON2 "AUTO" CACHE PATH "python2 is installed in DIR")
set(PYTHON3 "AUTO" CACHE PATH "python3 is installed in DIR")
message(STATUS "Checking major version of Python interpreter")
find_program(PYTHON_INTERPRETER python)
if(PYTHON_INTERPRETER)
	exec_program("${PYTHON_INTERPRETER}" ARGS "-V" OUTPUT_VARIABLE PY_OUPUT_RES RETURN_VALUE PY_RETURN_CODE)
	if(PY_RETURN_CODE EQUAL 0 AND PY_OUPUT_RES)
		string(FIND "${PY_OUPUT_RES}" "Python 2" MAJOR_IS_PYTHON2)
		string(FIND "${PY_OUPUT_RES}" "Python 3" MAJOR_IS_PYTHON3)
		if(NOT MAJOR_IS_PYTHON2 EQUAL -1) # Python 2 has precedence
			set(MAJOR_PYTHON 2)
			set(HAVE_PYTHON2 YES)
			set(PY2_OUPUT_RES "${PY_OUPUT_RES}")
		elseif(NOT MAJOR_IS_PYTHON3 EQUAL -1)
			set(MAJOR_PYTHON 3)
			set(HAVE_PYTHON3 YES)
			set(PY3_OUPUT_RES "${PY_OUPUT_RES}")
		else()
			message(FATAL_ERROR "Only python versions 2 and 3 are supported by MonetDB")
		endif()
		if(MAJOR_IS_PYTHON2 OR MAJOR_IS_PYTHON3)
			set(HAVE_PYTHON YES)
			message(STATUS "Major Python interpreter: ${MAJOR_PYTHON}")
		endif()
	endif()
else()
	message(STATUS "A python interpreter was not found")
endif()

if(NOT ${PYTHON2} STREQUAL "NO")
	if(${PYTHON2} STREQUAL "AUTO")
		if(MAJOR_PYTHON EQUAL 2)
			set(PYTHON2_INTERPRETER "${PYTHON_INTERPRETER}")
		else()
			find_program(PYTHON2_INTERPRETER python2)
		endif()
	else()
		set(PYTHON2_INTERPRETER "${PYTHON2}/python2")
	endif()

	if(NOT CMAKE_CROSSCOMPILING)
		exec_program("${PYTHON2_INTERPRETER}" ARGS "-V" OUTPUT_VARIABLE PY2_CUSTOM_OUPUT_RES RETURN_VALUE PY2_RETURN_CODE)
		if(PY2_RETURN_CODE EQUAL 0 AND PY2_CUSTOM_OUPUT_RES)
			string(FIND "${PY2_CUSTOM_OUPUT_RES}" "Python 2" HAS_PYTHON2)
			if(HAS_PYTHON2 EQUAL -1)
				if(${PYTHON2} STREQUAL "YES")
					message(FATAL_ERROR "Python 2 executable not found")
				else()
					message(STATUS "Python 2 executable not found")
				endif()
			else()
				set(HAVE_PYTHON2 YES)
				set(PY2_OUPUT_RES ${PY2_CUSTOM_OUPUT_RES})
			endif()
		endif()
		if(NOT HAVE_PYTHON2)
			if(${PYTHON2} STREQUAL "YES")
				message(FATAL_ERROR "Python 2 executable not found")
			else()
				message(STATUS "Python 2 executable not found")
			endif()
		endif()
	endif()

	if(HAVE_PYTHON2)
		string(LENGTH "${PY2_OUPUT_RES}" PY2_OUPUT_LENGTH)
		string(SUBSTRING "${PY2_OUPUT_RES}" 7 ${PY2_OUPUT_LENGTH} PY2_VERSION) # Remove "Python "
		if(PY2_VERSION LESS 2.6)
			set(HAVE_PYTHON2 NO)
			if(${PYTHON2} STREQUAL "YES")
				message(FATAL_ERROR "Python 2 executable is too old (<2.6)")
			else()
				message(WARNING "Python 2 executable is too old (<2.6)")
			endif()
		endif()
	endif()

	set(PYTHON2_LIBDIR "AUTO" CACHE PATH "Path for Python 2 library directory (where Python 2 modules should be installed)")
	if(${PYTHON2_LIBDIR} STREQUAL "YES" OR ${PYTHON2_LIBDIR} STREQUAL "AUTO")
		if(CMAKE_CROSSCOMPILING)
			if(${PYTHON2} STREQUAL "YES")
				message(FATAL_ERROR "Must specify PYTHON2_LIBDIR when cross compiling")
			else()
				message(WARNING "Must specify PYTHON2_LIBDIR when cross compiling")
			endif()
		endif()
		if(APPLE AND CMAKE_SYSTEM_VERSION VERSION_EQUAL 9 AND PY2_VERSION VERSION_EQUAL 2.5)
			exec_program("${PYTHON2_INTERPRETER}" ARGS "-c \"import distutils.sysconfig; print distutils.sysconfig.get_python_lib(1,1,'${LIBDIR}')\"" OUTPUT_VARIABLE PYTHON2_LIBDIR RETURN_VALUE PYTHON2_LIBDIR_CODE) # TODO Escape this
			if(PYTHON2_LIBDIR)
				set(PYTHON2_LIBDIR "${PYTHON2_LIBDIR}/site-packages") # Runs on a POSIX platform, so it's safe to do
			endif()
		else()
			exec_program("${PYTHON2_INTERPRETER}" ARGS "-c \"import distutils.sysconfig; print distutils.sysconfig.get_python_lib(1,0,'${LIBDIR}')\"" OUTPUT_VARIABLE PYTHON2_LIBDIR RETURN_VALUE PYTHON2_LIBDIR_CODE) # TODO Escape this
		endif()

		if(PYTHON2_LIBDIR AND PYTHON2_LIBDIR_CODE EQUAL 0)
			string(LENGTH "${LIBDIR}" LIBDIR_LENGTH)
			string(LENGTH "${PYTHON2_LIBDIR}" PYTHON2_LIBDIR_PREFIX_LENGTH)
			math(EXPR TOTAL_LENGTH "${PYTHON2_LIBDIR_PREFIX_LENGTH}-${LIBDIR_LENGTH}+1") # add the / separator
			string(SUBSTRING "${PYTHON2_LIBDIR}" ${LIBDIR_LENGTH} ${TOTAL_LENGTH} PYTHON2_LIBDIR) # remove the prefix
		elseif(${PYTHON2} STREQUAL "YES")
			message(FATAL_ERROR "Could not find PYTHON2_LIBDIR")
		else()
			message(WARNING "Could not find PYTHON2_LIBDIR")
		endif()
	endif()
else()
	set(HAVE_PYTHON2 NO)
endif()

if(NOT ${PYTHON3} STREQUAL "NO")
	if(${PYTHON3} STREQUAL "AUTO")
		if(MAJOR_PYTHON EQUAL 3)
			set(PYTHON3_INTERPRETER "${PYTHON_INTERPRETER}")
		else()
			find_program(PYTHON3_INTERPRETER python3)
		endif()
	else()
		set(PYTHON3_INTERPRETER "${PYTHON3}/python3")
	endif()

	if(NOT CMAKE_CROSSCOMPILING)
		exec_program("${PYTHON3_INTERPRETER}" ARGS "-V" OUTPUT_VARIABLE PY3_CUSTOM_OUPUT_RES RETURN_VALUE PY3_RETURN_CODE)
		if(PY3_RETURN_CODE EQUAL 0 AND PY3_CUSTOM_OUPUT_RES)
			string(FIND "${PY3_CUSTOM_OUPUT_RES}" "Python 3" HAS_PYTHON3)
			if(HAS_PYTHON3 EQUAL -1)
				if(${PYTHON3} STREQUAL "YES")
					message(FATAL_ERROR "Python 3 executable not found")
				else()
					message(STATUS "Python 3 executable not found")
				endif()
			else()
				set(HAVE_PYTHON3 YES)
				set(PY3_OUPUT_RES ${PY3_CUSTOM_OUPUT_RES})
			endif()
		endif()
		if(NOT HAVE_PYTHON3)
			if(${PYTHON3} STREQUAL "YES")
				message(FATAL_ERROR "Python 3 executable not found")
			else()
				message(STATUS "Python 3 executable not found")
			endif()
		endif()
	endif()

	if(HAVE_PYTHON3)
		string(LENGTH "${PY3_OUPUT_RES}" PY3_OUPUT_LENGTH)
		string(SUBSTRING "${PY3_OUPUT_RES}" 7 PY3_OUPUT_LENGTH PY3_VERSION) # Remove "Python "
		if(PY3_VERSION LESS 3.5)
			set(HAVE_PYTHON3 NO)
			if(${PYTHON3} STREQUAL "YES")
				message(FATAL_ERROR "Python 3 executable is too old (<3.5)")
			else()
				message(WARNING "Python 3 executable is too old (<3.5)")
			endif()
		endif()
	endif()

	set(PYTHON3_LIBDIR "AUTO" CACHE PATH "Path for Python 3 library directory (where Python 3 modules should be installed)")
	if(${PYTHON3_LIBDIR} STREQUAL "YES" OR ${PYTHON3_LIBDIR} STREQUAL "AUTO")
		if(CMAKE_CROSSCOMPILING)
			if(${PYTHON3} STREQUAL "YES")
				message(FATAL_ERROR "Must specify PYTHON3_LIBDIR when cross compiling")
			else()
				message(WARNING "Must specify PYTHON3_LIBDIR when cross compiling")
			endif()
		endif()
		exec_program("${PYTHON3_INTERPRETER}" ARGS "-c \"import distutils.sysconfig; print(distutils.sysconfig.get_python_lib(1,0,'${LIBDIR}'))\"" OUTPUT_VARIABLE PYTHON3_LIBDIR RETURN_VALUE PYTHON3_LIBDIR_CODE)

		if(PYTHON3_LIBDIR AND PYTHON3_LIBDIR_CODE EQUAL 0)
			string(LENGTH "${LIBDIR}" LIBDIR_LENGTH)
			string(LENGTH "${PYTHON3_LIBDIR}" PYTHON3_LIBDIR_PREFIX_LENGTH)
			math(EXPR TOTAL_LENGTH "${PYTHON3_LIBDIR_PREFIX_LENGTH}-${LIBDIR_LENGTH}+1") # add the / separator
			string(SUBSTRING "${PYTHON3_LIBDIR}" ${LIBDIR_LENGTH} ${TOTAL_LENGTH} PYTHON3_LIBDIR) # remove the prefix
		elseif(${PYTHON3} STREQUAL "YES")
			message(FATAL_ERROR "Could not find PYTHON3_LIBDIR")
		else()
			message(WARNING "Could not find PYTHON3_LIBDIR")
		endif()
	endif()
else()
	set(HAVE_PYTHON3 NO)
endif()

if(HAVE_PYTHON2 AND "${PYTHON2_LIBDIR_CODE}" STREQUAL "0")
	set(PYTHON_LIBDIR ${PYTHON2_LIBDIR})
elseif(HAVE_PYTHON3 AND "${PYTHON3_LIBDIR_CODE}" STREQUAL "0")
	set(PYTHON_LIBDIR ${PYTHON3_LIBDIR})
endif()

set(ENABLE_TESTING "AUTO" CACHE STRING "Enable support for testing (default=AUTO)")
if(NOT ENABLE_TESTING STREQUAL "NO" AND NOT HAVE_PYTHON2 AND NOT HAVE_PYTHON3)
	set(ENABLE_TESTING "NO")
endif()
if(NOT ${ENABLE_TESTING} STREQUAL "NO")
	set(HAVE_TESTING ON)
endif()

find_package(BISON)
if(BISON_FOUND)
	if(BISON_VERSION VERSION_LESS_EQUAL 2.4.3)
		removeCompilerFlag("-Wundef[ ]?" "-Wundef" "${CMAKE_C_FLAGS}" "all" CMAKE_C_FLAGS)
	endif()
elseif(${ENABLE_SQL} STREQUAL "YES")
	message(FATAL_ERROR "MonetDB/SQL requires bison")
else()
	set(ENABLE_SQL "NO")
	message(STATUS "Bison not found")
endif()

if(WIN32)
	set(OS_DIRSEP  "\\\\")
	set(OS_PATHSEP ";")
	set(SO_PREFIX  "lib")
	# We don't use the library naming convention on Windows :(
	set(CMAKE_IMPORT_LIBRARY_PREFIX "${SO_PREFIX}" CACHE STRING "Import library name prefix" FORCE)
	set(CMAKE_SHARED_LIBRARY_PREFIX "${SO_PREFIX}" CACHE STRING "Shared library name prefix" FORCE)
	set(CMAKE_SHARED_MODULE_PREFIX "${SO_PREFIX}" CACHE STRING "Library module name prefix" FORCE)
	set(CMAKE_STATIC_LIBRARY_PREFIX "${SO_PREFIX}" CACHE STRING "Static Library name prefix" FORCE)
elseif(UNIX OR APPLE OR ${CMAKE_SYSTEM_NAME} STREQUAL "CYGWIN")
	set(OS_DIRSEP  "/")
	set(OS_PATHSEP ":")
	set(SO_PREFIX  "${CMAKE_SHARED_LIBRARY_PREFIX}")
else()
	message(FATAL_ERROR "Unknown target operating system")
endif()

set(DIR_SEP      "'${OS_DIRSEP}'")
set(DIR_SEP_STR  ${OS_DIRSEP})
set(PATH_SEP     "'${OS_PATHSEP}'")
set(SO_EXT       "${CMAKE_SHARED_LIBRARY_SUFFIX}")

test_big_endian(WORDS_BIGENDIAN)
if(APPLE)
	set(AC_APPLE_UNIVERSAL_BUILD ON)
endif()

# checks for libraries
set(WITH_BZ2 "AUTO" CACHE STRING "Include bz2 support (default=AUTO)") # Check with BZip2_FOUND
if(NOT ${WITH_BZ2} STREQUAL "NO")
	include(FindBZip2)

	if(BZip2_FOUND)
		message(STATUS "bz2 library found")
		set(HAVE_LIBBZ2 ON)
	elseif(${WITH_BZ2} STREQUAL "YES")
		message(FATAL_ERROR "bz2 library not found")
	else()
		message(STATUS "bz2 library not found")
	endif()
endif()
if(NOT BZip2_FOUND)
	set(BZIP2_INCLUDE_DIR "")
	set(BZIP2_LIBRARIES "")
endif()

set(WITH_SNAPPY "AUTO" CACHE STRING "Include snappy support (default=AUTO)") # Check with HAVE_LIBSNAPPY
if(NOT ${WITH_SNAPPY} STREQUAL "NO")
	include(FindSnappy)

	if(SNAPPY_FOUND)
		message(STATUS "snappy library found")
		set(HAVE_LIBSNAPPY ON)
	elseif(${WITH_SNAPPY} STREQUAL "YES")
		message(FATAL_ERROR "snappy library not found")
	else()
		message(STATUS "snappy library not found")
	endif()
endif()
if(NOT SNAPPY_FOUND)
	set(SNAPPY_INCLUDE_DIR "")
	set(SNAPPY_LIBRARIES "")
endif()

set(WITH_LZ4 "AUTO" CACHE STRING "Include lz4 library support (default=AUTO)") # Check with HAVE_LIBLZ4
if(NOT ${WITH_LZ4} STREQUAL "NO")
	include(FindLZ4)

	if(LZ4_FOUND)
		set(LZ4_MINIMUM_VERSION "1.8.0")
		if(LZ4_VERSION VERSION_LESS "${LZ4_MINIMUM_VERSION}")
			if(${WITH_LZ4} STREQUAL "YES")
				message(FATAL_ERROR "lz4 library found but version is too old: ${LZ4_VERSION} < ${LZ4_MINIMUM_VERSION}")
			else()
				message(STATUS "lz4 library found but version is too old: ${LZ4_VERSION} < ${LZ4_MINIMUM_VERSION}")
			endif()
		else()
			message(STATUS "lz4 library found")
			set(HAVE_LIBLZ4 ON)
		endif()
	elseif(${WITH_LZ4} STREQUAL "YES")
		message(FATAL_ERROR "lz4 library not found")
	else()
		message(STATUS "lz4 library not found")
	endif()
endif()
if(NOT HAVE_LIBLZ4)
	set(LZ4_INCLUDE_DIR "")
	set(LZ4_LIBRARIES "")
endif()

set(DL_LIBRARIES "")
set(MATH_LIBRARIES "")
set(PSAPI_LIBRARIES "")
if(UNIX)
	set(DL_LIBRARIES "${CMAKE_DL_LIBS}")
	set(MATH_LIBRARIES "m")
endif()
if(WIN32)
	find_library(PSAPI_LIBRARY NAMES Psapi psapi DOC "psapi library to link")
	if("${PSAPI_LIBRARY}" STREQUAL "")
		message(FATAL_ERROR "Psapi library is required to compile MonetDB on Windows")
	endif()
endif()
if(PSAPI_LIBRARY)
	set(PSAPI_LIBRARIES "${PSAPI_LIBRARY}")
endif()

# Malloc libs
set(MALLOC_LIBRARIES "")
set(CMAKE_REQUIRED_LIBRARIES "${CMAKE_REQUIRED_LIBRARIES};umem")
check_symbol_exists("malloc" "umem.h" HAVE_UMEM)
set(CMAKE_REQUIRED_LIBRARIES "${PREV_CMAKE_REQUIRED_LIBRARIES}")
if(HAVE_UMEM)
	set(MALLOC_LIBRARIES "umem")
else()
	set(CMAKE_REQUIRED_LIBRARIES "${CMAKE_REQUIRED_LIBRARIES};mtmalloc")
	check_symbol_exists("malloc" "mtmalloc.h" HAVE_MT)
	set(CMAKE_REQUIRED_LIBRARIES "${PREV_CMAKE_REQUIRED_LIBRARIES}")
	if(HAVE_MT)
		set(MALLOC_LIBRARIES "mtmalloc")
	else()
		set(CMAKE_REQUIRED_LIBRARIES "${CMAKE_REQUIRED_LIBRARIES};malloc")
		check_symbol_exists("malloc" "malloc.h" HAVE_MALLOC)
		set(CMAKE_REQUIRED_LIBRARIES "${PREV_CMAKE_REQUIRED_LIBRARIES}")
		if(HAVE_MALLOC)
			set(MALLOC_LIBRARIES "malloc")
		endif()
	endif()
endif()

# Pthread libs
set(PTHREAD_INCLUDE_DIR "")
set(PTHREAD_LIBRARIES "")
set(PTHREAD_LIBRARY_DIR "")
if(NOT WIN32)
	set(WITH_PTHREAD "AUTO" CACHE PATH "Pthread library is installed in DIR") # Check with HAVE_PTHREAD_LIB (not needed on MacOSX)
	if(NOT ${WITH_PTHREAD} STREQUAL "NO")
		cmake_push_check_state()
		if(NOT ${WITH_PTHREAD} MATCHES "^AUTO|YES$")
			set(PTHREAD_INCLUDE_DIR "${WITH_PTHREAD}/include")
			set(PTHREAD_LIBRARY_DIR "${WITH_PTHREAD}/lib")
			set(CMAKE_REQUIRED_INCLUDES "${CMAKE_REQUIRED_INCLUDES};${PTHREAD_INCLUDE_DIR}") # Set back again in the end!
			set(CMAKE_REQUIRED_LIBRARIES "${CMAKE_REQUIRED_LIBRARIES};${PTHREAD_LIBRARY_DIR}") # Set back again in the end!
		endif()

		check_include_file("pthread.h" HAVE_PTHREAD_H)
		check_include_file("semaphore.h" HAVE_SEMAPHORE_H)
		check_include_file("sched.h" HAVE_SCHED_H)

		if(${WITH_PTHREAD} MATCHES "^AUTO|YES$")
			if("${CMAKE_C_COMPILER_ID}" MATCHES "^Clang|AppleClang|GNU$")
				if(NOT APPLE)
					set(HAVE_PTHREAD_LIB ON)
				endif()
			elseif(${WITH_PTHREAD} STREQUAL "YES")
				message(FATAL_ERROR "pthread library not supported by the platform")
			endif()
		endif()

		set(CMAKE_REQUIRED_LIBRARIES "${CMAKE_REQUIRED_LIBRARIES};pthread")
		check_symbol_exists("pthread_kill" "signal.h" HAVE_PTHREAD_KILL)
		check_symbol_exists("pthread_sigmask" "signal.h" HAVE_PTHREAD_SIGMASK)
		cmake_pop_check_state()
	endif()
	if(HAVE_PTHREAD_H)
		set(PTHREAD_INCLUDE_DIR "${PTHREAD_INCLUDE_DIR}")
		set(PTHREAD_LIBRARIES "pthread")
		set(HAVE_LIBPTHREAD ON)
	else()
		message(FATAL_ERROR "MonetDB requires libpthread on UNIX systems")
	endif()
endif()

# Readline libs
set(READLINE_INCLUDE_DIR "")
set(READLINE_LIBRARIES "")
set(READLINE_LIBRARY_DIR "")
set(WITH_READLINE "AUTO" CACHE PATH "Readline library is installed in DIR") # Check with HAVE_LIBREADLINE
if(NOT ${WITH_READLINE} STREQUAL "NO")
	cmake_push_check_state()
	if(NOT ${WITH_READLINE} MATCHES "^AUTO|YES$")
		set(READLINE_INCLUDE_DIR "${WITH_READLINE}/include")
		set(READLINE_LIBRARY_DIR "${WITH_READLINE}/lib")
		set(CMAKE_REQUIRED_INCLUDES "${CMAKE_REQUIRED_INCLUDES};${READLINE_INCLUDE_DIR}") # Set back again in the end!
		set(CMAKE_REQUIRED_LINK_OPTIONS "${CMAKE_REQUIRED_LINK_OPTIONS};${READLINE_LIBRARY_DIR}") # Set back again in the end!
	endif()

	set(CMAKE_REQUIRED_LIBRARIES "${CMAKE_REQUIRED_LIBRARIES};readline")
	check_symbol_exists("readline" "stdio.h;readline/readline.h;readline/history.h" HAVE_LIBREADLINE)
	if(HAVE_LIBREADLINE)
		list(APPEND READLINE_LIBRARIES readline)
	else()
		set(CMAKE_REQUIRED_LIBRARIES "${CMAKE_REQUIRED_LIBRARIES};termcap")
		check_symbol_exists("rl_history_search_forward" "stdio.h;readline/readline.h;readline/history.h" HAVE_LIBREADLINE)
		if(HAVE_LIBREADLINE)
			list(APPEND READLINE_LIBRARIES termcap)
		else()
			set(CMAKE_REQUIRED_LIBRARIES "${PREV_CMAKE_REQUIRED_LIBRARIES};readline;ncurses")
			check_symbol_exists("rl_reverse_search_history" "stdio.h;readline/readline.h;readline/history.h" HAVE_LIBREADLINE)
			if(HAVE_LIBREADLINE)
				list(APPEND READLINE_LIBRARIES ncurses)
			elseif(${WITH_READLINE} STREQUAL "YES")
				message(FATAL_ERROR "Readline library not found")
			else()
				message(STATUS "Readline library not found")
			endif()
		endif()
	endif()

	if(HAVE_LIBREADLINE)
		check_symbol_exists("rl_completion_matches" "stdio.h;readline/readline.h" HAVE_LIBREADLINE)
		if(HAVE_LIBREADLINE)
			message(STATUS "Checking whether rl_completion_func_t exists")
			check_symbol_exists("rl_completion_func_t" "stdio.h;readline/readline.h" HAVE_LIBREADLINE)
			if(NOT HAVE_LIBREADLINE)
				if(${WITH_READLINE} STREQUAL "YES")
					message(FATAL_ERROR "readline/readline.h does not contain rl_completion_func_t, is it GNU readline?")
				else()
					message(WARNING "readline/readline.h does not contain rl_completion_func_t, is it GNU readline?")
				endif()
			endif()
		elseif(${WITH_READLINE} STREQUAL "YES")
			message(FATAL_ERROR "Readline library does not contain rl_completion_matches")
		else()
			message(WARNING "Readline library does not contain rl_completion_matches")
		endif()
	endif()
	cmake_pop_check_state()
endif()

# UUID
set(WITH_UUID "YES" CACHE STRING "Include UUID support (default=YES)") # Check with HAVE_UUID
if(NOT ${WITH_UUID} STREQUAL "NO")
	include(FindUUID)

	if(UUID_FOUND)
		message(STATUS "uuid library found")
		set(HAVE_UUID ON)
	elseif(${WITH_SNAPPY} STREQUAL "YES")
		message(FATAL_ERROR "uuid library not found")
	else()
		message(STATUS "uuid library not found")
	endif()
endif()
if(NOT UUID_FOUND)
	set(UUID_INCLUDE_DIR "")
	set(UUID_LIBRARIES "")
endif()

# OpenSSL or CommonCrypto library
if(APPLE)
	set(CRYPTO_LIBRARY_NAME "CommonCrypto")
	include(FindCommonCrypto)

	if(COMMONCRYPTO_FOUND)
		message(STATUS "CommonCrypto library found")
		set(HAVE_COMMONCRYPTO ON)
		set(CRYPTO_INCLUDE_DIR "${COMMONCRYPTO_INCLUDE_DIR}")
		set(CRYPTO_LIBRARIES "${COMMONCRYPTO_LIBRARIES}")
	endif()
else()
	set(WITH_OPENSSL "YES" CACHE STRING "Include OpenSSL support (default=YES)") # Check with OPENSSL_FOUND
	if(NOT ${WITH_OPENSSL} STREQUAL "NO")
		set(CRYPTO_LIBRARY_NAME "OpenSSL")
		find_package(OpenSSL)

		if(OPENSSL_FOUND)
			message(STATUS "openssl library found")
			set(HAVE_OPENSSL ON)
			set(CRYPTO_INCLUDE_DIR "${OPENSSL_INCLUDE_DIR}")
			set(CRYPTO_LIBRARIES "${OPENSSL_CRYPTO_LIBRARY}")
		endif()
	endif()
endif()

if(MSVC)
	set(HAVE_MD5_UPDATE ON)
	set(HAVE_RIPEMD160_UPDATE ON)
	set(HAVE_SHA1_UPDATE ON)
	set(HAVE_SHA224_UPDATE ON)
	set(HAVE_SHA256_UPDATE ON)
	set(HAVE_SHA384_UPDATE ON)
	set(HAVE_SHA512_UPDATE ON)
else()
	cmake_push_check_state()
	set(CMAKE_REQUIRED_INCLUDES "${CMAKE_REQUIRED_INCLUDES};${CRYPTO_INCLUDE_DIR}")
	set(CMAKE_REQUIRED_LIBRARIES "${CMAKE_REQUIRED_LIBRARIES};${CRYPTO_LIBRARIES}")

	check_symbol_exists("MD5_Update" "openssl/md5.h" HAVE_MD5_UPDATE)
	check_symbol_exists("RIPEMD160_Update" "openssl/ripemd.h" HAVE_RIPEMD160_UPDATE)
	check_symbol_exists("SHA1_Update" "openssl/sha.h" HAVE_SHA1_UPDATE)
	check_symbol_exists("SHA224_Update" "openssl/sha.h" HAVE_SHA224_UPDATE)
	check_symbol_exists("SHA256_Update" "openssl/sha.h" HAVE_SHA256_UPDATE)
	check_symbol_exists("SHA384_Update" "openssl/sha.h" HAVE_SHA384_UPDATE)
	check_symbol_exists("SHA512_Update" "openssl/sha.h" HAVE_SHA512_UPDATE)
	cmake_pop_check_state()
endif()

if(NOT COMMONCRYPTO_FOUND AND NOT OPENSSL_FOUND)
	if(${ENABLE_MONETDB5} STREQUAL "YES")
		message(FATAL_ERROR "${CRYPTO_LIBRARY_NAME} library not found but required for MonetDB5")
	else()
		set(ENABLE_MONETDB5 "NO")
		set(WHY_NOT_MONETDB5 "${CRYPTO_LIBRARY_NAME} library not found but required for MonetDB5")
		message(WARNING "${WHY_NOT_MONETDB5}")
	endif()
endif()
if(NOT HAVE_${PASSWORD_BACKEND}_UPDATE)
	if(${ENABLE_MONETDB5} STREQUAL "YES")
		message(FATAL_ERROR "${CRYPTO_LIBRARY_NAME} library found but checksum algorithm required for MonetDB5 not found")
	else()
		set(HAVE_COMMONCRYPTO NO)
		set(OPENSSL_FOUND NO)
		set(ENABLE_MONETDB5 "NO")
		set(WHY_NOT_MONETDB5 "${CRYPTO_LIBRARY_NAME} library found but required checksum algorithm not found, so disabling")
		message(WARNING "${WHY_NOT_MONETDB5}")
	endif()
endif()

# Regex library
set(WITH_REGEX "PCRE" CACHE STRING "Use either PCRE or POSIX regular expressions (default=PCRE if available)") # Check with HAVE_LIBPCRE and HAVE_POSIX_REGEX
if(NOT ${WITH_REGEX} MATCHES "^AUTO|PCRE|POSIX$")
	message(FATAL_ERROR "WITH_REGEX argument must be either AUTO, PCRE or POSIX")
endif()

if(NOT ${WITH_REGEX} STREQUAL "POSIX")
	set(PCRE_REQUIRED_VERSION "4.5")
	include(FindPCRE)

	if(PCRE_FOUND)
		message(STATUS "PCRE library found")
		if(MSVC)
			set(HAVE_LIBPCRE ON)
		else()
			message(STATUS "Checking for UTF-8 support on PCRE library")
			cmake_push_check_state()
			set(CMAKE_REQUIRED_LIBRARIES "${CMAKE_REQUIRED_LIBRARIES};pcre")
			check_c_source_runs("
				#include <stdlib.h>
				#include <pcre.h>

				int main(int argc, char **argv) {
					int rc;
					(void) argc; (void) argv;
					if (pcre_config(PCRE_CONFIG_UTF8, &rc) != 0)
						return 1;
					exit(!rc);
					return 0;
				}
			" HAVE_LIBPCRE)
			cmake_pop_check_state()
		endif()
		if(NOT HAVE_LIBPCRE)
			if(${WITH_REGEX} STREQUAL "PCRE")
				message(FATAL_ERROR "PCRE library found but no UTF-8 support")
			else()
				message(STATUS "PCRE library found but no UTF-8 support")
			endif()
		endif()
	else()
		if(PCRE_FOUND AND PCRE_VERSION VERSION_LESS_EQUAL ${PCRE_REQUIRED_VERSION})
			set(PCRE_ERROR_MESSAGE "PCRE library found, but the version is too old ${PCRE_VERSION} < ${PCRE_REQUIRED_VERSION}")
		else()
			set(PCRE_ERROR_MESSAGE "PCRE library not found or not usable")
		endif()

		if(${WITH_REGEX} STREQUAL "PCRE")
			message(FATAL_ERROR "${PCRE_ERROR_MESSAGE}")
		else()
			message(WARNING "${PCRE_ERROR_MESSAGE}")
		endif()
	endif()
endif()

if(NOT HAVE_LIBPCRE)
	set(PCRE_INCLUDE_DIR "")
	set(PCRE_LIBRARIES "")
	message(STATUS "Checking for GNU regex library")
	check_symbol_exists("regcomp" "regex.h" HAVE_POSIX_REGEX)
endif()

if(NOT HAVE_LIBPCRE AND NOT HAVE_POSIX_REGEX)
	if(${ENABLE_MONETDB5} STREQUAL "YES")
		message(FATAL_ERROR "PCRE library or GNU regex library not found but required for MonetDB5")
	else()
		set(ENABLE_MONETDB5 "NO")
		set(WHY_NOT_MONETDB5 "PCRE library or GNU regex library not found but required for MonetDB5")
		message(WARNING "${WHY_NOT_MONETDB5}")
	endif()
endif()

set(WITH_LIBXML2 "AUTO" CACHE STRING "Include libxml2 support (default=AUTO)") # Check with HAVE_LIBXML
if(NOT ${WITH_LIBXML2} STREQUAL "NO")
	include(FindLibXml2)

	if(LIBXML2_FOUND)
		message(STATUS "libxml2 library found")
		set(HAVE_LIBXML ON)
	elseif(${WITH_LIBXML2} STREQUAL "YES")
		message(FATAL_ERROR "libxml2 library not found")
	else()
		message(STATUS "libxml2 library not found")
	endif()
endif()
if(NOT LIBXML2_FOUND)
	set(LIBXML2_INCLUDE_DIR "")
	set(LIBXML2_LIBRARIES "")
endif()

set(WITH_CURL "AUTO" CACHE STRING "Include cURL support (default=AUTO)") # Check with HAVE_CURL
if(NOT ${WITH_CURL} STREQUAL "NO")
	include(FindCURL)

	if(CURL_FOUND)
		message(STATUS "libcurl library found")
		set(HAVE_CURL ON)
	elseif(${WITH_CURL} STREQUAL "YES")
		message(FATAL_ERROR "libcurl library not found")
	else()
		message(STATUS "libcurl library not found")
	endif()
endif()
if(NOT CURL_FOUND)
	set(CURL_INCLUDE_DIR "")
	set(CURL_LIBRARIES "")
endif()

set(WITH_ZLIB "AUTO" CACHE STRING "Include zlib support (default=AUTO)") # Check with HAVE_LIBZ
if(NOT ${WITH_ZLIB} STREQUAL "NO")
	include(FindZLIB)

	if(ZLIB_FOUND)
		message(STATUS "zlib library found")
		set(HAVE_LIBZ ON)
	elseif(${WITH_ZLIB} STREQUAL "YES")
		message(FATAL_ERROR "zlib library not found")
	else()
		message(STATUS "zlib library not found")
	endif()
endif()
if(NOT ZLIB_FOUND)
	set(ZLIB_INCLUDE_DIR "")
	set(ZLIB_LIBRARIES "")
endif()

set(WITH_LIBLZMA "AUTO" CACHE STRING "Include liblzma support (default=AUTO)") # Check with HAVE_LIBLZMA
if(NOT ${WITH_LIBLZMA} STREQUAL "NO")
	include(FindLibLZMA)

	if(LIBLZMA_FOUND)
		message(STATUS "liblzma library found")
		set(HAVE_LIBLZMA ON)
	elseif(${WITH_LIBLZMA} STREQUAL "YES")
		message(FATAL_ERROR "liblzma library not found")
	else()
		message(STATUS "liblzma library not found")
	endif()
endif()
if(NOT LIBLZMA_FOUND)
	set(LIBLZMA_INCLUDE_DIR "")
	set(LIBLZMA_LIBRARIES "")
endif()

set(WITH_VALGRIND "NO" CACHE STRING "Include valgrind support (default=NO)") # Check with HAVE_VALGRIND
if(NOT ${WITH_VALGRIND} STREQUAL "NO")
	include(FindValgrind)

	if(VALGRIND_FOUND)
		message(STATUS "valgrind library found")
		set(HAVE_VALGRIND ON)
	elseif(${WITH_VALGRIND} STREQUAL "YES")
		message(FATAL_ERROR "valgrind library not found")
	else()
		message(STATUS "valgrind library not found")
	endif()
endif()
if(NOT VALGRIND_FOUND)
	set(VALGRIND_INCLUDE_DIR "")
	set(VALGRIND_LIBRARIES "")
endif()

set(R_HOME "")
set(R_INCLUDE_DIR "")
set(R_LIBRARIES "")
set(ENABLE_RINTEGRATION "AUTO" CACHE STRING "Enable support for R integration into MonetDB (default=AUTO)") # Check with HAVE_LIBR
if(NOT ${ENABLE_RINTEGRATION} STREQUAL "NO")
	if(${ENABLE_RINTEGRATION} MATCHES "^YES|AUTO$")
		set(R_INTERPRETER "R")
	else()
		set(R_INTERPRETER "${ENABLE_RINTEGRATION}")
	endif()

	message(STATUS "Checking major version of R interpreter")
	exec_program("${R_INTERPRETER}" ARGS "RHOME" OUTPUT_VARIABLE RHOME RETURN_VALUE R_HOME_RC)
	exec_program("${R_INTERPRETER}" ARGS "CMD config --cppflags" OUTPUT_VARIABLE R_CPP_OUTPUT RETURN_VALUE R_CPP_RC)
	exec_program("${R_INTERPRETER}" ARGS "CMD config --ldflags" OUTPUT_VARIABLE R_LD_OUTPUT RETURN_VALUE R_LD_RC)
	if(R_HOME_RC EQUAL 0 AND R_CPP_RC EQUAL 0 AND R_LD_RC EQUAL 0)
		MT_clibsToCmake(${R_CPP_OUTPUT} R_INCLUDE_DIR)
		string(REPLACE "-fopenmp" "" R_LD_OUTPUT ${R_LD_OUTPUT}) # We don't want to link to OpenMP
		string(REPLACE "-fopenmp=libgomp" "" R_LD_OUTPUT ${R_LD_OUTPUT})
		set(R_LIBRARIES "${R_LD_OUTPUT}")
		set(HAVE_LIBR ON)
	elseif(${ENABLE_RINTEGRATION} STREQUAL "YES")
		message(FATAL_ERROR "R executable required for R integration support")
	else()
		message(STATUS "R executable not found")
	endif()
endif()

function(testPythonIntegration HAVE_NUMPY PY_INCLUDE_DIR PY_LIBRARIES PY_VERSION INTEGRATION_ENABLED INTERPRETER_PATH INTERPRETER_CONFIG)
	if(NOT HAVE_PYTHON${PY_VERSION})
		if(${INTEGRATION_ENABLED} STREQUAL "AUTO")
			message(WARNING "A valid python${PY_VERSION} interpreter is required for Python${PY_VERSION} integration")
		else()
			message(FATAL_ERROR "A valid python${PY_VERSION} interpreter is required for Python${PY_VERSION} integration")
		endif()
	endif()

	if(${INTERPRETER_CONFIG} STREQUAL "AUTO")
		set(PY_CONFIG_FILE "python${PY_VERSION}-config")
	else()
		set(PY_CONFIG_FILE "${INTERPRETER_CONFIG}")
	endif()

	message(STATUS "Checking python${PY_VERSION}-config program")
	exec_program("${PY_CONFIG_FILE}" ARGS "--ldflags" OUTPUT_VARIABLE PC_OUTPUT RETURN_VALUE PC_RETURN_CODE)
	if(NOT PC_RETURN_CODE EQUAL 0)
		if(${INTEGRATION_ENABLED} STREQUAL "AUTO")
			message(WARNING "python${PY_VERSION}-config library required for Python ${PY_VERSION} integration support")
		else()
			message(FATAL_ERROR "python${PY_VERSION}-config library required for Python ${PY_VERSION} integration support")
		endif()
	endif()

	message(STATUS "Checking for numpy version")
	exec_program("${INTERPRETER_PATH}" ARGS "-c \"import numpy; print(int(numpy.__version__.split('.').__getitem__(1)) >= 7)\"" OUTPUT_VARIABLE NUMPY_OUTPUT RETURN_VALUE NUMPY_RETURN_CODE)
	if(NUMPY_RETURN_CODE EQUAL 0 AND NUMPY_OUTPUT STREQUAL "True")
		check_include_file("numpy/numpyconfig.h" NUMPY_HEADERS)
		if(NUMPY_HEADERS)
			set(NUMPY_HEADERS "True")
		else()
			exec_program("${INTERPRETER_PATH}" ARGS "-c \"import numpy, os; print(os.path.isfile(os.path.join(numpy.get_include(), 'numpy/arrayobject.h')))\"" OUTPUT_VARIABLE NUMPY_HEADERS RETURN_VALUE NUMPY_HEADERS_RETURN_CODE)
			if(NOT NUMPY_HEADERS_RETURN_CODE)
				unset(NUMPY_HEADERS)
			endif()
		endif()
		if(NUMPY_HEADERS)
			exec_program("${INTERPRETER_PATH}" ARGS "-c \"import distutils.sysconfig, os; print(os.path.isfile(os.path.join(distutils.sysconfig.get_python_inc(), 'Python.h')))\"" OUTPUT_VARIABLE PYTHON_HEADERS RETURN_VALUE PYTHON_HEADERS_RC)
			exec_program("${INTERPRETER_PATH}" ARGS "-c \"from distutils.sysconfig import get_python_inc; import numpy; print(';' + get_python_inc() + ';' + numpy.get_include());\"" OUTPUT_VARIABLE PYTHON_CPP_FLAGS RETURN_VALUE PYTHON_CPP_RC)
			exec_program("${PY_CONFIG_FILE}" ARGS "--ldflags" OUTPUT_VARIABLE PYTHON_LD_FLAGS RETURN_VALUE PYTHON_LD_RC)
			if(PYTHON_HEADERS_RC EQUAL 0 AND PYTHON_HEADERS STREQUAL "True" AND PYTHON_HEADERS_RC EQUAL 0 AND PYTHON_CPP_RC EQUAL 0 AND PYTHON_LD_RC EQUAL 0)
				set(${HAVE_NUMPY} YES PARENT_SCOPE)
				set(${PY_INCLUDE_DIR} "${PYTHON_CPP_FLAGS}" PARENT_SCOPE)
				set(${PY_LIBRARIES} "${PYTHON_LD_FLAGS}" PARENT_SCOPE)
			elseif(${INTEGRATION_ENABLED} STREQUAL "AUTO")
				message(WARNING "Python.h not found")
			else()
				message(FATAL_ERROR "Python.h not found")
			endif()
		elseif(${INTEGRATION_ENABLED} STREQUAL "AUTO")
			message(STATUS "(numpy/arrayobject.h not found)")
		else()
			message(FATAL_ERROR "(numpy/arrayobject.h not found)")
		endif()
	elseif(${INTEGRATION_ENABLED} STREQUAL "AUTO")
		message(WARNING "numpy version >= 1.7.0 required for Python ${PY_VERSION} integration support")
	else()
		message(FATAL_ERROR "numpy version >= 1.7.0 required for Python ${PY_VERSION} integration support")
	endif()
endfunction()

set(PY2_INCLUDE_DIR "")
set(PY2_LIBRARIES "")
set(PYTHON2_CONFIG "AUTO" CACHE FILEPATH "python2-config is installed as FILE")
set(ENABLE_PY2INTEGRATION "AUTO" CACHE STRING "Enable support for Python 2 integration into MonetDB (default=AUTO)") # Check with HAVE_LIBPY
if(NOT ${ENABLE_PY2INTEGRATION} STREQUAL "NO")
	testPythonIntegration(HAVE_LIBPY PY2_INCLUDE_DIR PY2_LIBRARIES "2" ${ENABLE_PY2INTEGRATION} ${PYTHON2_INTERPRETER} ${PYTHON2_CONFIG})
endif()

set(PY3_INCLUDE_DIR "")
set(PY3_LIBRARIES "")
set(PYTHON3_CONFIG "AUTO" CACHE FILEPATH "python3-config is installed as FILE")
set(ENABLE_PY3INTEGRATION "AUTO" CACHE STRING "enable support for Python 3 integration into MonetDB (default=AUTO)") # Check with HAVE_LIBPY3
if(NOT ${ENABLE_PY3INTEGRATION} STREQUAL "NO")
	testPythonIntegration(HAVE_LIBPY3 PY3_INCLUDE_DIR PY3_LIBRARIES "3" ${ENABLE_PY3INTEGRATION} ${PYTHON3_INTERPRETER} ${PYTHON3_CONFIG})
endif()

set(ODBC_INCLUDE_DIR "")
set(ODBC_LIBRARY_DIR "")
set(ODBCINST_LIBRARIES "")
set(ODBC_LIBRARIES "")
set(ENABLE_ODBC "AUTO" CACHE STRING "Compile the MonetDB ODBC driver (default=AUTO)") # Check with HAVE_ODBC
if(NOT ${ENABLE_ODBC} STREQUAL "NO")
	cmake_push_check_state()
	if(MSVC)
		set(HAVE_SQLGETPRIVATEPROFILESTRING ON)
		if(CMAKE_SIZEOF_VOID_P EQUAL 8) # Windows 64 bit
			set(LENP_OR_POINTER_T "SQLLEN *")
		else()
			set(LENP_OR_POINTER_T "SQLPOINTER")
		endif()

		find_path(ODBCINST_INCLUDE odbcinst.h)
		if(ODBCINST_INCLUDE)
			set(HAVE_ODBCINST_H YES)
			find_library(ODBCCP32_LIBRARY NAMES odbccp32)
			if(ODBCCP32_LIBRARY)
				set(ODBCINST_LIBRARIES "${ODBCINST_LIBRARIES};odbccp32")
			endif()
			find_library(USER32_LIBRARY NAMES user32 User32)
			if(USER32_LIBRARY)
				set(ODBCINST_LIBRARIES "${ODBCINST_LIBRARIES};${USER32_LIBRARY}")
			endif()
			find_library(LEGACY_STDIO_LIBRARY NAMES legacy_stdio_definitions)
			if(LEGACY_STDIO_LIBRARY)
				set(ODBCINST_LIBRARIES "${ODBCINST_LIBRARIES};legacy_stdio_definitions")
			endif()

			find_library(ODBC32_LIBRARY NAMES odbc32)
			if(ODBC32_LIBRARY)
				set(ODBC_LIBRARIES odbc32)
			endif()

			if(NOT "${ODBCINST_LIBRARIES}" STREQUAL "" AND NOT "${ODBC_LIBRARIES}" STREQUAL "")
				set(HAVE_ODBC YES)
			elseif(${ENABLE_ODBC} STREQUAL "YES")
				message(FATAL_ERROR "ODBC libraries missing")
			else()
				message(STATUS "ODBC libraries missing")
			endif()
		elseif(${ENABLE_ODBC} STREQUAL "YES")
			message(FATAL_ERROR "odbcinst.h not found")
		else()
			message(STATUS "odbcinst.h not found")
		endif()
	else()
		set(WITH_UNIXODBC "AUTO" CACHE PATH "unixODBC library is installed in DIR")
		if(NOT ${WITH_UNIXODBC} STREQUAL "NO")
			set(HAVE_ODBC YES)
			if(NOT ${WITH_UNIXODBC} MATCHES "^YES|AUTO$")
				set(ODBC_INCLUDE_DIR "${WITH_UNIXODBC}/include")
				set(ODBC_LIBRARY_DIR "${WITH_UNIXODBC}/lib")
				set(CMAKE_REQUIRED_INCLUDES "${CMAKE_REQUIRED_INCLUDES};${ODBC_INCLUDE_DIR}")
				set(CMAKE_REQUIRED_LINK_OPTIONS "${CMAKE_REQUIRED_LINK_OPTIONS};${ODBC_LIBRARY_DIR}")
			endif()

			check_include_file("odbcinst.h" HAVE_ODBCINST_H)
			if(NOT HAVE_ODBCINST_H)
				if(${WITH_UNIXODBC} STREQUAL "YES")
					message(FATAL_ERROR "odbcinst.h not found")
				else()
					set(HAVE_ODBC NO)
					message(STATUS "odbcinst.h not found")
				endif()
			endif()

			find_library(ODBCINST_LIBRARY NAMES odbcinst)
			if(ODBCINST_LIBRARY)
				set(CMAKE_REQUIRED_LIBRARIES "${CMAKE_REQUIRED_LIBRARIES};odbcinst")
				check_symbol_exists("SQLGetPrivateProfileString" "odbcinst.h" HAVE_SQLGETPRIVATEPROFILESTRING)
				if(HAVE_SQLGETPRIVATEPROFILESTRING)
					set(ODBCINST_LIBRARIES "${ODBCINST_LIBRARY}")
					set(HAVE_SQLGETPRIVATEPROFILESTRING ON)
				elseif(${WITH_UNIXODBC} STREQUAL "YES")
					message(FATAL_ERROR "odbcinst library not found")
				else()
					set(HAVE_ODBC NO)
					message(STATUS "odbcinst library not found")
				endif()
			endif()

			find_library(ODBC_LIBRARY NAMES odbc)
			if(ODBC_LIBRARY)
				set(CMAKE_REQUIRED_LIBRARIES "${CMAKE_REQUIRED_LIBRARIES};odbc")
				check_symbol_exists("SQLGetDiagRec" "odbcinst.h" HAVE_SQLGETDIAGREC)
				if(HAVE_SQLGETDIAGREC)
					set(ODBC_LIBRARIES "${ODBC_LIBRARY}")
				elseif(${WITH_UNIXODBC} STREQUAL "YES")
					message(FATAL_ERROR "odbc library not found")
				else()
					set(HAVE_ODBC NO)
					message(STATUS "odbc library not found")
				endif()
			endif()

			message(STATUS "Checking SQLColAttribute uses SQLLEN * or SQLPOINTER")
			check_c_source_runs("
				#include <sql.h>

				SQLRETURN SQL_API
				SQLColAttribute(SQLHSTMT hStmt, SQLUSMALLINT nCol, SQLUSMALLINT nFieldIdentifier, SQLPOINTER pszValue, SQLSMALLINT nValueLengthMax, SQLSMALLINT *pnValueLength, SQLLEN *pnValue) {
					(void) hStmt; (void) nCol; (void) nFieldIdentifier; (void) pszValue; (void) nValueLengthMax; (void) pnValueLength; (void) pnValue;
					return SQL_SUCCESS;
				}

				int main(int argc, char **argv) {
					(void) argc; (void) argv;
					return SQLColAttribute(0,0,0,0,0,0,0);
				}
			" SQL_COL_TEST)
			if(SQL_COL_TEST)
				message(STATUS "Using 'SQLLEN *' as SQLColAttribute")
				set(LENP_OR_POINTER_T "SQLLEN *")
			else()
				message(STATUS "Using 'SQLPOINTER' as SQLColAttribute")
				set(LENP_OR_POINTER_T "SQLPOINTER")
			endif()

			set(CMAKE_EXTRA_INCLUDE_FILES "${CMAKE_EXTRA_INCLUDE_FILES};sql.h")
			check_type_size(SQLWCHAR SIZEOF_SQLWCHAR LANGUAGE C)
			if(NOT HAVE_SIZEOF_SQLWCHAR OR "${SIZEOF_SQLWCHAR}" STREQUAL "0")
				if(${WITH_UNIXODBC} STREQUAL "YES")
					message(FATAL_ERROR "could not determine the size of SQLWCHAR")
				else()
					set(HAVE_ODBC NO)
					message(STATUS "could not determine the size of SQLWCHAR")
				endif()
			else()
				set(SIZEOF_SQLWCHAR ${SIZEOF_SQLWCHAR})
			endif()

			if(NOT HAVE_ODBC)
				if(${WITH_UNIXODBC} STREQUAL "YES")
					message(FATAL_ERROR "unixODBC library required for ODBC driver")
				else()
					message(WARNING "unixODBC library required for ODBC driver")
				endif()
			endif()
		endif()
	endif()
	cmake_pop_check_state()
endif()

set(WITH_PROJ "AUTO" CACHE STRING "Include proj support (default=AUTO)") # Check with HAVE_PROJ
if(NOT ${WITH_PROJ} STREQUAL "NO")
	include(FindProj)

	if(PROJ_FOUND)
		message(STATUS "proj library found")
		set(HAVE_PROJ ON)
	elseif(${WITH_PROJ} STREQUAL "YES")
		message(FATAL_ERROR "proj library not found")
	else()
		message(STATUS "proj library not found")
	endif()
endif()
if(NOT PROJ_FOUND)
	set(PROJ_INCLUDE_DIR "")
	set(PROJ_LIBRARIES "")
endif()

set(SAMTOOLS_INCLUDE_DIR "")
set(SAMTOOLS_LIBRARY_DIR "")
set(SAMTOOLS_LIBRARIES "")
set(WITH_SAMTOOLS "AUTO" CACHE PATH "Samtools (providing bam library) are installed in DIR") # Check with HAVE_SAMTOOLS
if(NOT ${WITH_SAMTOOLS} STREQUAL "NO")

	cmake_push_check_state()
	if(NOT ${WITH_SAMTOOLS} MATCHES "^YES|AUTO$")
		set(SAMTOOLS_INCLUDE_DIR "${WITH_SAMTOOLS}/include")
		set(SAMTOOLS_LIBRARY_DIR "${WITH_SAMTOOLS}/lib")
		set(CMAKE_REQUIRED_INCLUDES "${CMAKE_REQUIRED_INCLUDES};${SAMTOOLS_INCLUDE_DIR}")
		set(CMAKE_REQUIRED_LINK_OPTIONS "${CMAKE_REQUIRED_LINK_OPTIONS};${SAMTOOLS_LIBRARY_DIR}")
	endif()

	check_include_file("samtools/bam.h" HAVE_SAMTOOLS_BAM_H)
	if(NOT HAVE_SAMTOOLS_BAM_H)
		set(SAMTOOLS_ERROR "bam.h header not found")
		check_include_file("bam/bam.h" HAVE_BAM_BAM_H)
		if(HAVE_BAM_BAM_H)
			unset(SAMTOOLS_ERROR)
		else()
			set(SAMTOOLS_ERROR "Neither samtools/bam.h nor bam/bam.h header found")
		endif()
	endif()

	if(NOT SAMTOOLS_ERROR)
		check_include_file("samtools/sam.h" HAVE_SAMTOOLS_SAM_H)
		if(NOT HAVE_SAMTOOLS_SAM_H)
			set(SAMTOOLS_ERROR "samtools/sam.h header not found")
			check_include_file("bam/sam.h" HAVE_BAM_SAM_H)
			if(HAVE_BAM_SAM_H)
				unset(SAMTOOLS_ERROR)
			else()
				set(SAMTOOLS_ERROR "Neither samtools/sam.h nor bam/sam.h header found")
			endif()
		endif()
	endif()

	if(NOT SAMTOOLS_ERROR)
		check_include_file("samtools/bgzf.h" HAVE_SAMTOOLS_BGZF_H)
		if(NOT HAVE_SAMTOOLS_BGZF_H)
			set(SAMTOOLS_ERROR "samtools/bgzf.h header not found")
			check_include_file("bam/bgzf.h" HAVE_BAM_BGZF_H)
			if(HAVE_BAM_BGZF_H)
				unset(SAMTOOLS_ERROR)
			else()
				set(SAMTOOLS_ERROR "Neither samtool/bgzf.h nor bam/bgzf.h header found")
			endif()
		endif()
	endif()

	if(NOT SAMTOOLS_ERROR)
		set(CMAKE_REQUIRED_LIBRARIES "${CMAKE_REQUIRED_LIBRARIES}bam;m;pthread;z")
		check_symbol_exists("bam_header_read" "samtools/bam.h" HAVE_SAMTOOLS)
		if(HAVE_SAMTOOLS)
			set(SAMTOOLS_LIBRARIES bam)
		else()
			set(SAMTOOLS_ERROR "bam library not found")
		endif()
	endif()

	if(NOT SAMTOOLS_ERROR)
		check_include_file("samtools/kstring.h" HAVE_SAMTOOLS_KSTRING_H)
		check_include_file("bam/kstring.h" HAVE_BAM_KSTRING_H)
	endif()

	if(SAMTOOLS_ERROR)
		if(${WITH_SAMTOOLS} STREQUAL "YES")
			message(FATAL_ERROR "${SAMTOOLS_ERROR}")
		else()
			message(STATUS "${SAMTOOLS_ERROR}")
		endif()
		set(HAVE_SAMTOOLS NO)
	endif()
	cmake_pop_check_state()
endif()

set(WITH_GEOS "AUTO" CACHE STRING "Include geos library support (default=AUTO)") # Check with HAVE_GEOS_LIB
if(NOT ${WITH_GEOS} STREQUAL "NO")
	include(FindGeos)

	if(GEOS_FOUND)
		set(GEOS_MINIMUM_VERSION "3.4.0")
		if(GEOS_VERSION VERSION_LESS "${GEOS_MINIMUM_VERSION}")
			if(${WITH_GEOS} STREQUAL "YES")
				message(FATAL_ERROR "geos library found but version is too old: ${GEOS_VERSION} < ${GEOS_MINIMUM_VERSION}")
			else()
				message(STATUS "geos library found but version is too old: ${GEOS_VERSION} < ${GEOS_MINIMUM_VERSION}")
			endif()
		else()
			message(STATUS "geos library found")
			set(HAVE_GEOS_LIB ON)
		endif()
	elseif(${WITH_GEOS} STREQUAL "YES")
		message(FATAL_ERROR "geos library not found")
	else()
		message(STATUS "geos library not found")
	endif()
endif()
if(NOT HAVE_GEOS_LIB)
	set(GEOS_INCLUDE_DIR "")
	set(GEOS_LIBRARIES "")
	if(${ENABLE_GEOM} STREQUAL "YES")
		message(FATAL_ERROR "geos library required for geom module")
	else()
		set(HAVE_GEOM OFF)
	endif()
endif()

set(WITH_GDAL "AUTO" CACHE STRING "Include gdal support (default=AUTO)") # Check with GDAL_FOUND
if(${WITH_GDAL} STREQUAL "NO")
	if(HAVE_GEOM)
		message(FATAL_ERROR "geom module required for gdal")
	else()
		set(HAVE_GEOM OFF)
	endif()
	if(${ENABLE_SHP} STREQUAL "YES")
		message(FATAL_ERROR "geom module required for shp")
	else()
		set(ENABLE_SHP "NO")
	endif()
endif()
if(NOT ${WITH_GDAL} STREQUAL "NO")
	include(FindGDAL)

	if(GDAL_FOUND)
		message(STATUS "gdal library found")
	elseif(${ENABLE_SHP} STREQUAL "YES")
		message(FATAL_ERROR "gdal library required for ESRI Shapefile vault")
	endif()
endif()
if(NOT GDAL_FOUND)
	set(GDAL_INCLUDE_DIR "")
	set(GDAL_LIBRARIES "")
endif()

set(ENABLE_FITS "AUTO" CACHE STRING "Enable support for FITS (default=AUTO)")
if(NOT ${ENABLE_FITS} STREQUAL "NO") # Check with CFITSIO_FOUND
	include(FindCfitsio)

	if(CFITSIO_FOUND)
		message(STATUS "cfitsio library found")
		set(HAVE_FITS ON)
	elseif(${ENABLE_FITS} STREQUAL "YES")
		message(FATAL_ERROR "cfitsio library required for FITS support")
	endif()
endif()
if(NOT CFITSIO_FOUND)
	set(CFITSIO_INCLUDE_DIR "")
	set(CFITSIO_LIBRARIES "")
endif()

set(ENABLE_NETCDF "AUTO" CACHE STRING "Enable support for netcdf (default=AUTO)")
if(NOT ${ENABLE_NETCDF} STREQUAL "NO") # Check with NETCDF_FOUND
	include(FindNetCDF)

	if(NETCDF_FOUND)
		set(NETCDF_MINIMUM_VERSION "4.2")
		if(NETCDF_VERSION VERSION_LESS "${NETCDF_MINIMUM_VERSION}")
			if(${WITH_NETCDF} STREQUAL "YES")
				message(FATAL_ERROR "netcdf library found but version is too old: ${NETCDF_VERSION} < ${NETCDF_MINIMUM_VERSION}")
			else()
				message(STATUS "netcdf library found but version is too old: ${NETCDF_VERSION} < ${NETCDF_MINIMUM_VERSION}")
			endif()
		else()
			message(STATUS "netcdf library found")
			set(HAVE_NETCDF ON)
		endif()
	elseif(${ENABLE_NETCDF} STREQUAL "YES")
		message(FATAL_ERROR "netcdf library required for NetCDF support")
	endif()
endif()
if(NOT HAVE_NETCDF)
	set(NETCDF_INCLUDE_DIR "")
	set(NETCDF_LIBRARIES "")
endif()

set(LIBLAS_INCLUDE_DIR "")
set(LIBLAS_LIBRARIES "")
set(WITH_LIBLAS "AUTO" CACHE PATH "liblas library is installed in DIR") # Check with HAVE_LIBLAS_LIB
if(NOT ${WITH_LIBLAS} STREQUAL "NO")
	set(LIBLAS_VERSION_REQUIRED_MIN "1.8.0")

	if(${WITH_LIBLAS} MATCHES "^YES|AUTO$")
		set(LIBLAS_EXECUTABLE "liblas-config")
	else()
		set(LIBLAS_EXECUTABLE "${WITH_LIBLAS}/bin/liblas-config")
	endif()

	exec_program("${LIBLAS_EXECUTABLE}" ARGS "--version" OUTPUT_VARIABLE LIBLAS_VERSION RETURN_VALUE LIBLAS_RC)
	if(LIBLAS_RC EQUAL 0)
		if(LIBLAS_VERSION VERSION_GREATER_EQUAL ${LIBLAS_VERSION_REQUIRED_MIN})

			exec_program("${LIBLAS_EXECUTABLE}" ARGS "--includes" OUTPUT_VARIABLE LIBLAS_INCLUDE_DIR RETURN_VALUE LIBLAS_INCS_RC)
			exec_program("${LIBLAS_EXECUTABLE}" ARGS "--libs" OUTPUT_VARIABLE LIBLAS_LIBRARIES RETURN_VALUE LIBLAS_LIBS_RC)
			if(LIBLAS_INCS_RC EQUAL 0 AND LIBLAS_LIBS_RC EQUAL 0)

				MT_clibsToCmake(${LIBLAS_INCLUDE_DIR} LIBLAS_INCLUDE_DIR)
				cmake_push_check_state()
				set(CMAKE_REQUIRED_INCLUDES "${CMAKE_REQUIRED_INCLUDES}${LIBLAS_INCLUDE_DIR}") # the regex should add the ;
				check_include_file("liblas/capi/liblas.h" HAVE_LIBLAS_LIB)
				cmake_pop_check_state()
				if(NOT HAVE_LIBLAS_LIB)
					if(${WITH_LIBLAS} STREQUAL "YES")
						message(FATAL_ERROR "liblas/capi/liblas.h header file not found")
					else()
						message(STATUS "liblas/capi/liblas.h header file not found")
					endif()
				endif()
			elseif(${WITH_LIBLAS} STREQUAL "YES")
				message(FATAL_ERROR "could not determine LIBLAS cflags and clibs")
			else()
				message(WARNING "could not determine LIBLAS cflags and clibs")
			endif()
		elseif(${WITH_LIBLAS} STREQUAL "YES")
			message(FATAL_ERROR "liblas version is too old ${LIBLAS_VERSION} < ${LIBLAS_VERSION_REQUIRED_MIN}")
		else()
			message(WARNING "liblas version is too old ${LIBLAS_VERSION} < ${LIBLAS_VERSION_REQUIRED_MIN}")
		endif()
	elseif(${WITH_LIBLAS} STREQUAL "YES")
		message(FATAL_ERROR "liblas-config not found")
	else()
		message(STATUS "liblas-config not found")
	endif()
endif()
if(HAVE_LIBLAS_LIB)
	set(HAVE_LIDAR ON)
elseif(${ENABLE_LIDAR} STREQUAL "YES")
	message(FATAL_ERROR "liblas library required for lidar module")
else()
	set(ENABLE_LIDAR "NO")
endif()

# Header files
check_include_file("dirent.h" HAVE_DIRENT_H)
check_include_file("dispatch/dispatch.h" HAVE_DISPATCH_DISPATCH_H)
check_include_file("dlfcn.h" HAVE_DLFCN_H)
check_include_file("execinfo.h" HAVE_EXECINFO_H)
check_include_file("fcntl.h" HAVE_FCNTL_H)
check_include_file("getopt.h" HAVE_GETOPT_H)
check_include_file("io.h" HAVE_IO_H)
check_include_file("langinfo.h" HAVE_LANGINFO_H)
check_include_file("libgen.h" HAVE_LIBGEN_H)
check_include_file("libintl.h" HAVE_LIBINTL_H)
check_include_file("mach/mach_init.h" HAVE_MACH_MACH_INIT_H)
check_include_file("mach/task.h" HAVE_MACH_TASK_H)
check_include_file("mach-o/dyld.h" HAVE_MACH_O_DYLD_H)
check_include_file("netdb.h" HAVE_NETDB_H)
check_include_file("netinet/in.h" HAVE_NETINET_IN_H)
check_include_file("procfs.h" HAVE_PROCFS_H)
check_include_file("pwd.h" HAVE_PWD_H)
check_include_file("stdatomic.h" HAVE_STDATOMIC_H)
check_include_file("strings.h" HAVE_STRINGS_H)
check_include_file("stropts.h" HAVE_STROPTS_H)
check_include_file("sys/file.h" HAVE_SYS_FILE_H)
check_include_file("sys/ioctl.h" HAVE_SYS_IOCTL_H)
check_include_file("sys/mman.h" HAVE_SYS_MMAN_H)
check_include_file("sys/param.h" HAVE_SYS_PARAM_H)
check_include_file("sys/resource.h" HAVE_SYS_RESOURCE_H)
check_include_file("sys/socket.h" HAVE_SYS_SOCKET_H)
check_include_file("sys/stat.h" HAVE_SYS_STAT_H)
if(${CMAKE_SYSTEM_NAME} STREQUAL "OpenBSD") # on OpenBSD, sys/sysctl.h requires sys/param.h to be included beforehand
	check_include_files("sys/param.h;sys/sysctl.h" HAVE_SYS_SYSCTL_H)
else()
	check_include_file("sys/sysctl.h" HAVE_SYS_SYSCTL_H)
endif()
check_include_file("sys/time.h" HAVE_SYS_TIME_H)
check_include_file("sys/times.h" HAVE_SYS_TIMES_H)
check_include_file("sys/types.h" HAVE_SYS_TYPES_H)
check_include_file("sys/uio.h" HAVE_SYS_UIO_H)
check_include_file("sys/un.h" HAVE_SYS_UN_H)
check_include_file("sys/utime.h" HAVE_SYS_UTIME_H)
check_include_file("sys/wait.h" HAVE_SYS_WAIT_H)
check_include_file("termios.h" HAVE_TERMIOS_H)
check_include_file("unistd.h" HAVE_UNISTD_H)
check_include_file("uuid/uuid.h" HAVE_UUID_UUID_H)
check_include_file("winsock.h" HAVE_WINSOCK_H)

# Socket libraries
set(SOCKET_LIBRARIES )
if(MSVC)
	set(HAVE_GETADDRINFO ON)
	find_library(WSOCK32_LIBRARY NAMES Wsock32 wsock32)
	if(WSOCK32_LIBRARY)
		list(APPEND SOCKET_LIBRARIES "${WSOCK32_LIBRARY}")
	else()
		message(FATAL_ERROR "Wsock32 library is missing and required to compile MonetDB on Windows")
	endif()
	find_library(WS2_32_LIBRARY NAMES Ws2_32 ws2_32)
	if(WS2_32_LIBRARY)
		list(APPEND SOCKET_LIBRARIES "${WS2_32_LIBRARY}")
	else()
		message(FATAL_ERROR "ws2_32 library is missing and required to compile MonetDB on Windows")
	endif()
else()
	check_symbol_exists("gethostbyname" "netdb.h;sys/socket.h" HAVE_GETHOSTBYNAME)
	if(NOT HAVE_GETHOSTBYNAME)
		message(STATUS "Trying to find gethostbyname by linking to nsl")
		set(CMAKE_REQUIRED_LIBRARIES "${CMAKE_REQUIRED_LIBRARIES};nsl")
		check_symbol_exists("gethostbyname" "netdb.h;sys/socket.h" HAVE_GETHOSTBYNAME)
		if(HAVE_GETHOSTBYNAME)
			list(APPEND SOCKET_LIBRARIES nsl)
		else()
			message(FATAL_ERROR "Could not find gethostbyname symbol")
		endif()
		set(CMAKE_REQUIRED_LIBRARIES "${PREV_CMAKE_REQUIRED_LIBRARIES}")
	endif()

	check_symbol_exists("hstrerror" "netdb.h;sys/socket.h" HAVE_HSTERROR)
	if(NOT HAVE_HSTERROR)
		message(STATUS "Trying to find hstrerror by linking to resolv")
		set(CMAKE_REQUIRED_LIBRARIES "${PREV_CMAKE_REQUIRED_LIBRARIES};resolv")
		check_symbol_exists("hstrerror" "netdb.h;sys/socket.h" HAVE_HSTERROR)
		if(HAVE_HSTERROR)
			list(APPEND SOCKET_LIBRARIES resolv)
		else()
			message(FATAL_ERROR "Could not find hstrerror symbol")
		endif()
		set(CMAKE_REQUIRED_LIBRARIES "${PREV_CMAKE_REQUIRED_LIBRARIES}")
	endif()

	check_symbol_exists("setsockopt" "sys/types.h;sys/socket.h" HAVE_SETSOCKOPT)
	if(NOT HAVE_SETSOCKOPT)
		message(STATUS "Trying to find setsockopt by linking to socket")
		set(CMAKE_REQUIRED_LIBRARIES "${PREV_CMAKE_REQUIRED_LIBRARIES};socket")
		check_symbol_exists("setsockopt" "sys/types.h;sys/socket.h" HAVE_SETSOCKOPT)
		if(HAVE_SETSOCKOPT)
			list(APPEND SOCKET_LIBRARIES socket)
		else()
			message(FATAL_ERROR "Could not find setsockopt symbol")
		endif()
		set(CMAKE_REQUIRED_LIBRARIES "${PREV_CMAKE_REQUIRED_LIBRARIES}")
	endif()

	check_symbol_exists("getaddrinfo" "sys/types.h;sys/socket.h;netdb.h" HAVE_GETADDRINFO)
	if(NOT HAVE_GETADDRINFO)
		message(STATUS "Trying to find getaddrinfo by linking to socket")
		set(CMAKE_REQUIRED_LIBRARIES "${PREV_CMAKE_REQUIRED_LIBRARIES};socket")
		check_symbol_exists("getaddrinfo" "sys/types.h;sys/socket.h;netdb.h" HAVE_GETADDRINFO)
		if(HAVE_GETADDRINFO)
			list(FIND ${SOCKET_LIBRARIES} socket LINKED_TO_SOCKET)
			if(NOT LINKED_TO_SOCKET)
				list(APPEND SOCKET_LIBRARIES socket)
			endif()
		else()
			message(STATUS "Trying to find getaddrinfo by linking to nsl")
			set(CMAKE_REQUIRED_LIBRARIES "${PREV_CMAKE_REQUIRED_LIBRARIES};nsl")
			check_symbol_exists("getaddrinfo" "sys/types.h;sys/socket.h;netdb.h" HAVE_GETADDRINFO)
			if(HAVE_GETADDRINFO)
				list(FIND ${SOCKET_LIBRARIES} nsl LINKED_TO_NSL)
				if(NOT LINKED_TO_NSL)
					list(APPEND SOCKET_LIBRARIES nsl)
				endif()
			else()
				message(FATAL_ERROR "Could not find getaddrinfo symbol")
			endif()
		endif()
		set(CMAKE_REQUIRED_LIBRARIES "${PREV_CMAKE_REQUIRED_LIBRARIES}")
	endif()
endif()

cmake_push_check_state()
if(MSVC)
	set(CMAKE_EXTRA_INCLUDE_FILES "${CMAKE_EXTRA_INCLUDE_FILES};WS2tcpip.h;winsock.h")
else()
	set(CMAKE_EXTRA_INCLUDE_FILES "${CMAKE_EXTRA_INCLUDE_FILES};sys/types.h;sys/socket.h")
endif()
check_type_size(SOCKET SIZEOF_SOCKET LANGUAGE C)
if(NOT HAVE_SIZEOF_SOCKET OR "${SIZEOF_SOCKET}" STREQUAL "0")
	set(SOCKET int)
endif()
check_type_size(socklen_t SIZEOF_SOCKETLEN_T LANGUAGE C)
if(HAVE_SIZEOF_SOCKETLEN_T AND NOT "${SIZEOF_SOCKETLEN_T}" STREQUAL "0")
	set(HAVE_SOCKLEN_T ON)
else()
	set(socklen_t int)
endif()
cmake_pop_check_state()

check_type_size(size_t SIZEOF_SIZE_T LANGUAGE C)
if(HAVE_SIZEOF_SIZE_T AND NOT "${SIZEOF_SIZE_T}" STREQUAL "0")
	set(SIZEOF_SIZE_T ${SIZEOF_SIZE_T})
else()
	set(size_t "unsigned int")
endif()
check_type_size(ssize_t SIZEOF_SSIZE_T LANGUAGE C)
if(HAVE_SIZEOF_SSIZE_T AND NOT "${SIZEOF_SSIZE_T}" STREQUAL "0")
	set(SIZEOF_SSIZE_T ${SIZEOF_SSIZE_T})
elseif(CMAKE_SIZEOF_VOID_P EQUAL 8 AND MSVC) # Windows 64 bit
	set(ssize_t "int64_t")
	set(SIZEOF_SSIZE_T 8)
else()
	set(ssize_t "int")
	set(SIZEOF_SSIZE_T 4)
endif()

check_type_size(pid_t SIZEOF_PID_T LANGUAGE C)
if(NOT HAVE_SIZEOF_PID_T OR "${SIZEOF_PID_T}" STREQUAL "0")
	set(pid_t int)
endif()
check_type_size(off_t SIZEOF_OFF_T LANGUAGE C)
if(NOT HAVE_SIZEOF_OFF_T OR "${SIZEOF_OFF_T}" STREQUAL "0")
	set(off_t int)
endif()

set(ENABLE_INT128 "AUTO" CACHE STRING "Enable support for 128-bit integers (default=AUTO)")
if(NOT ${ENABLE_INT128} STREQUAL "NO")
	check_type_size(__int128 SIZEOF___INT128 LANGUAGE C)
	if(HAVE_SIZEOF___INT128 AND NOT "${SIZEOF___INT128}" STREQUAL "0")
		set(SIZEOF___INT128 ${SIZEOF___INT128})
		set(HAVE___INT128 ON)
	endif()

	check_type_size(__int128_t SIZEOF___INT128_T LANGUAGE C)
	if(HAVE_SIZEOF___INT128_T AND NOT "${SIZEOF___INT128_T}" STREQUAL "0")
		set(SIZEOF___INT128_T ${SIZEOF___INT128_T})
		set(HAVE___INT128_T ON)
	endif()

	check_type_size(__uint128_t SIZEOF___UINT128_T LANGUAGE C)
	if(HAVE_SIZEOF___UINT128_T AND NOT "${SIZEOF___UINT128_T}" STREQUAL "0")
		set(HAVE___UINT128_T ON)
	endif()

	if(HAVE_SIZEOF___INT128 OR HAVE_SIZEOF___INT128_T OR HAVE_SIZEOF___UINT128_T)
		set(HAVE_HGE ON)
	elseif(${ENABLE_INT128} STREQUAL "YES")
		message(FATAL_ERROR "128-bit integers not supported by this compiler")
	else()
		message(STATUS "128-bit integers not supported by this compiler")
	endif()
endif()

check_type_size(char CHAR LANGUAGE C)
if(HAVE_CHAR AND NOT "${CHAR}" STREQUAL "0")
	set(SIZEOF_CHAR ${CHAR})
endif()
check_type_size(short SHORT LANGUAGE C)
if(HAVE_SHORT AND NOT "${SHORT}" STREQUAL "0")
	set(SIZEOF_SHORT ${SHORT})
endif()
check_type_size(int INT LANGUAGE C)
if(HAVE_INT AND NOT "${INT}" STREQUAL "0")
	set(SIZEOF_INT ${INT})
endif()
check_type_size(long LONG LANGUAGE C)
if(HAVE_LONG AND NOT "${LONG}" STREQUAL "0")
	set(SIZEOF_LONG ${LONG})
endif()
set(SIZEOF_VOID_P ${CMAKE_SIZEOF_VOID_P})
check_type_size(wchar_t WCHAR_T LANGUAGE C)
if(HAVE_WCHAR_T AND NOT "${WCHAR_T}" STREQUAL "0")
	set(SIZEOF_WCHAR_T ${WCHAR_T})
endif()

check_symbol_exists("accept4" "sys/types.h;sys/socket.h" HAVE_ACCEPT4)
check_symbol_exists("asctime_r" "time.h" HAVE_ASCTIME_R)
check_symbol_exists("asctime_s" "time.h" HAVE_ASCTIME_S3)
check_symbol_exists("backtrace" "execinfo.h" HAVE_BACKTRACE)
check_symbol_exists("clock_gettime" "time.h" HAVE_CLOCK_GETTIME)
check_symbol_exists("ctime_r" "time.h" HAVE_CTIME_R)
check_symbol_exists("ctime_s" "time.h" HAVE_CTIME_S3)
check_symbol_exists("dispatch_semaphore_create" "dispatch/dispatch.h" HAVE_DISPATCH_SEMAPHORE_CREATE)
check_symbol_exists("fallocate" "fcntl.h" HAVE_FALLOCATE)
check_symbol_exists("fcntl" "unistd.h;fcntl.h" HAVE_FCNTL)
if(NOT(${CMAKE_SYSTEM_NAME} STREQUAL "Darwin" AND CMAKE_SYSTEM_VERSION VERSION_LESS_EQUAL 17))
	check_symbol_exists("fdatasync" "unistd.h" HAVE_FDATASYNC)
endif()
check_symbol_exists("fork" "sys/types.h;unistd.h" HAVE_FORK)
check_symbol_exists("fseeko" "stdio.h" HAVE_FSEEKO)
check_symbol_exists("fsync" "unistd.h" HAVE_FSYNC)
check_symbol_exists("ftime" "sys/timeb.h" HAVE_FTIME)
check_symbol_exists("GetDynamicTimeZoneInformation" "Windows.h" HAVE_GETDYNAMICTIMEZONEINFORMATION)
check_symbol_exists("getexecname" "stdlib.h" HAVE_GETEXECNAME)
check_symbol_exists("getlogin" "unistd.h" HAVE_GETLOGIN)
check_symbol_exists("getopt" "unistd.h" HAVE_GETOPT)
check_symbol_exists("getopt_long" "unistd.h;getopt.h" HAVE_GETOPT_LONG)
check_symbol_exists("gettimeofday" "sys/time.h" HAVE_GETTIMEOFDAY)
check_symbol_exists("getuid" "unistd.h;sys/types.h" HAVE_GETUID)
check_symbol_exists("localtime_r" "time.h" HAVE_LOCALTIME_R)
check_symbol_exists("localtime_s" "time.h" HAVE_LOCALTIME_S)
check_symbol_exists("lockf" "unistd.h" HAVE_LOCKF)
check_symbol_exists("lstat" "sys/types.h;sys/stat.h;unistd.h" HAVE_LSTAT)
check_symbol_exists("madvise" "sys/mman.h" HAVE_MADVISE)
check_symbol_exists("mremap" "sys/mman.h" HAVE_MREMAP)
check_symbol_exists("nanosleep" "time.h" HAVE_NANOSLEEP)
check_symbol_exists("nl_langinfo" "langinfo.h" HAVE_NL_LANGINFO)
check_symbol_exists("_NSGetExecutablePath" "mach-o/dyld.h" HAVE__NSGETEXECUTABLEPATH)
check_symbol_exists("pipe2" "fcntl.h;unistd.h" HAVE_PIPE2)
check_symbol_exists("popen" "stdio.h" HAVE_POPEN)
check_symbol_exists("posix_fadvise" "fcntl.h" HAVE_POSIX_FADVISE)
check_symbol_exists("posix_fallocate" "fcntl.h" HAVE_POSIX_FALLOCATE)
check_symbol_exists("posix_madvise" "sys/mman.h" HAVE_POSIX_MADVISE)
check_symbol_exists("semtimedop" "sys/types.h;sys/ipc.h;sys/sem.h" HAVE_SEMTIMEDOP)
check_symbol_exists("setenv" "stdlib.h" HAVE_SETENV)
check_symbol_exists("setsid" "sys/types.h;unistd.h" HAVE_SETSID)
if(MSVC)
	set(HAVE_SHUTDOWN ON) # check_symbol_exists on Windows doesn't link to aditional libraries
else()
	check_symbol_exists("shutdown" "sys/socket.h" HAVE_SHUTDOWN)
endif()
check_symbol_exists("sigaction" "signal.h" HAVE_SIGACTION)
check_symbol_exists("stpcpy" "string.h" HAVE_STPCPY)
check_symbol_exists("strcasestr" "string.h" HAVE_STRCASESTR)
check_symbol_exists("strncasecmp" "strings.h" HAVE_STRNCASECMP)
check_symbol_exists("strptime" "time.h" HAVE_STRPTIME)
check_symbol_exists("strtok_r" "string.h" HAVE_STRTOK_R)
check_symbol_exists("strtok_s" "string.h" HAVE_STRTOK_S)
check_symbol_exists("sysconf" "unistd.h" HAVE_SYSCONF)
check_symbol_exists("task_info" "mach/task_info.h" HAVE_TASK_INFO)
check_symbol_exists("times" "sys/times.h" HAVE_TIMES)
check_symbol_exists("uname" "sys/utsname.h" HAVE_UNAME)
if(MSVC AND CMAKE_SIZEOF_VOID_P EQUAL 8)  # Windows 64 bit
	set(HAVE__MUL128 ON)
else()
	check_symbol_exists("_mul128" "intrin.h" HAVE__MUL128)
endif()
check_symbol_exists("_wfopen_s" "wchar.h" HAVE__WFOPEN) # Check for _wfopen_s to avoid warnings
check_symbol_exists("_stat64" "sys/types.h;sys/stat.h" HAVE_STAT64)

if(HAVE_ASCTIME_R)
	message(STATUS "Test if asctime_r takes 3 arguments")
	check_c_source_compiles("
		#include <time.h>

		int main(int argc, char **argv) {
			char buf[26]; struct tm t;
			(void) argc; (void) argv; (void) t; (void) buf;
			asctime_r(&t,buf,26);
			return 0;
		}" HAVE_ASCTIME_R3)
endif()

if(HAVE_CTIME_R)
	message(STATUS "Test if ctime_r takes 3 arguments")
	check_c_source_compiles("
		#include <time.h>

		int main(int argc, char **argv) {
			char buf[26]; struct tm t;
			(void) argc; (void) argv; (void) t; (void) buf;
			ctime_r(&t,buf,26);
			return 0;
		}" HAVE_CTIME_R3)
endif()

message(STATUS "Check for diff program")
exec_program("gdiff" ARGS "--version" OUTPUT_VARIABLE GDIFF_OUPUT RETURN_VALUE GDIFF_RETURN_CODE)
if(GDIFF_RETURN_CODE EQUAL 0 AND GDIFF_OUPUT)
	set(DIFF "gdiff" CACHE STRING "Diff program")
	message(STATUS "gdiff program found")
else()
	exec_program("diff" ARGS "--version" OUTPUT_VARIABLE DIFF_OUPUT RETURN_VALUE DIFF_RETURN_CODE)
	if(DIFF_RETURN_CODE EQUAL 0 AND DIFF_OUPUT)
		set(DIFF "diff" CACHE STRING "Diff program")
		message(STATUS "diff program found")
	else()
		message(STATUS "No diff program found")
	endif()
endif()

if(${ENABLE_SQL} STREQUAL "YES" AND ${ENABLE_MONETDB5} STREQUAL "NO")
	message(FATAL_ERROR "MonetDB/SQL requires MonetDB5: ${WHY_NOT_MONETDB5}")
endif()
if(NOT ${ENABLE_SQL} STREQUAL "NO")
	set(HAVE_SQL YES)
endif()
if(NOT ${ENABLE_MONETDB5} STREQUAL "NO")
	set(HAVE_MONETDB5 YES)
endif()
if(NOT ${ENABLE_SHP} STREQUAL "NO")
	set(HAVE_SHP YES)
endif()

set(CMAKE_C_LINK_FLAGS "${LINK_OPTIONS}" CACHE STRING "Link flags for all builds" FORCE)
set(LINK_OPTIONS "${LINK_OPTIONS}" CACHE STRING "Link options for all builds" FORCE)
if(NOT "${X_CFLAGS}" STREQUAL "")
	set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${X_CFLAGS}")
endif()
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS}" CACHE STRING "Compilation flags for all builds" FORCE)
set(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG}" CACHE STRING "Debug flags" FORCE)
set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE}" CACHE STRING "Release flags" FORCE)
set(CMAKE_C_FLAGS_RELWITHDEBINFO "${CMAKE_C_FLAGS_RELWITHDEBINFO}" CACHE STRING "RelWithDebugInfo flags" FORCE)
set(CMAKE_C_FLAGS_MINSIZEREL "${CMAKE_C_FLAGS_MINSIZEREL}" CACHE STRING "MinSizeRel flags" FORCE)

site_name(BUILD_HOST)
set(builtby "$ENV{USER}@${BUILD_HOST}")
string(TOUPPER ${CMAKE_BUILD_TYPE} CMAKE_BUILD_TYPE_UPPER)
set(compilercall "${CMAKE_C_COMPILER}${CMAKE_C_FLAGS} ${CMAKE_C_FLAGS_${CMAKE_BUILD_TYPE_UPPER}}")
set(linkercall "${CMAKE_LINKER}${CMAKE_C_LINK_FLAGS}")

configure_file(monetdb_config.h.in ${CMAKE_CURRENT_BINARY_DIR}/monetdb_config.h)
install(FILES ${CMAKE_CURRENT_BINARY_DIR}/monetdb_config.h DESTINATION ${INCLUDEDIR}/monetdb)
include_directories(${CMAKE_CURRENT_BINARY_DIR})

add_subdirectory(buildtools)
add_subdirectory(common)
add_subdirectory(clients)
if(HAVE_GDK)
	add_subdirectory(gdk)
endif()
if(HAVE_MONETDB5)
	add_subdirectory(monetdb5)
endif()
if(HAVE_SQL)
	add_subdirectory(sql)
endif()
if(HAVE_GEOM)
	add_subdirectory(geom)
endif()
add_subdirectory(tools)
if(HAVE_TESTING)
	add_subdirectory(testing)
endif()
