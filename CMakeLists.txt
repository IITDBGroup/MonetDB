#[[
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0.  If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright 1997 - July 2008 CWI, August 2008 - 2019 MonetDB B.V.
#]]

cmake_minimum_required(VERSION 3.12 FATAL_ERROR)

project(MonetDB C)

set(C_STANDARD_REQUIRED ON)
set(CMAKE_C_STANDARD 99)
set(PACKAGE "MonetDB" CACHE STRING "")

find_package(PkgConfig)

set(CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake" CACHE INTERNAL "Location of custom CMake modules.")
include(CheckCCompilerFlag REQUIRED)
include(CheckCSourceCompiles REQUIRED)
include(CheckCSourceRuns REQUIRED)
include(CheckIncludeFile REQUIRED)
include(CheckIncludeFiles REQUIRED)
include(CheckSymbolExists REQUIRED)
include(CheckTypeSize REQUIRED)
include(CheckStructHasMember REQUIRED)
include(FindIconv REQUIRED)
include(TestLargeFiles REQUIRED)
include(TestBigEndian REQUIRED)

cmake_policy(SET CMP0075 NEW)
set(CMAKE_POSITION_INDEPENDENT_CODE ON) # TODO check this

# Save default cmake options in the beggining
set(PREV_CMAKE_REQUIRED_LIBRARIES "${CMAKE_REQUIRED_LIBRARIES}")
set(PREV_CMAKE_REQUIRED_INCLUDES "${CMAKE_REQUIRED_INCLUDES}")
set(PREV_CMAKE_REQUIRED_LINK_OPTIONS "${CMAKE_REQUIRED_LINK_OPTIONS}")
set(PREV_CMAKE_EXTRA_INCLUDE_FILES "${CMAKE_EXTRA_INCLUDE_FILES}")
set(PREV_CMAKE_REQUIRED_FLAGS "${CMAKE_REQUIRED_FLAGS}")

function(MT_clibsToCmake INPUT_INCS OUTPUT_INCS) # Remove -I before the include path
	string(LENGTH "${INPUT_INCS}" INPUT_INCS_LENGTH)
	string(SUBSTRING "${INPUT_INCS}" 2 ${INPUT_INCS_LENGTH} INPUT_INCS)
	string(REPLACE "\ -I" ";" HELPER ${INPUT_INCS})
	set(${OUTPUT_INCS} "${HELPER}" PARENT_SCOPE)
endfunction()

# set prefix with -DCMAKE_INSTALL_PREFIX=...

# set host data
string(TOLOWER "${CMAKE_SYSTEM_NAME}" CMAKE_SYSTEM_NAME_LOWER)
string(TOLOWER "${CMAKE_C_COMPILER_ID}" CMAKE_C_COMPILER_ID_LOWER)
set("HOST" "${CMAKE_SYSTEM_PROCESSOR}-pc-${CMAKE_SYSTEM_NAME_LOWER}-${CMAKE_C_COMPILER_ID_LOWER}")

set(MONETDB_RELEASE "unreleased")

# Change these variables between releases
set(MONETDB_VERSION_MAJOR "11")
set(MONETDB_VERSION "${MONETDB_VERSION_MAJOR}.34.0")
set(VERSION "${MONETDB_VERSION}")

set(GDK_VERSION_MAJOR "17")
set(GDK_VERSION "${GDK_VERSION_MAJOR}.4.0")

set(MAPI_VERSION_MAJOR "11")
set(MAPI_VERSION "${MAPI_VERSION_MAJOR}.0.1")

set(MONETDB5_VERSION_MAJOR "26")
set(MONETDB5_VERSION "${MONETDB5_VERSION_MAJOR}.0.1")

set(STREAM_VERSION_MAJOR "12")
set(STREAM_VERSION "${STREAM_VERSION_MAJOR}.1.1")

# Packaging information
set(PACKAGE "MonetDB")
set(PACKAGE_NAME "MonetDB")
set(PACKAGE_TARNAME "MonetDB")
set(PACKAGE_STRING "MonetDB ${MONETDB_VERSION}")
set(PACKAGE_URL "https://www.monetdb.org/")
set(PACKAGE_BUGREPORT "https://bugs.monetdb.org/")
set(PACKAGE_VERSION "${MONETDB_VERSION}")

# Check current version control revision
if(EXISTS "${CMAKE_SOURCE_DIR}/.hg")
	exec_program("hg" "${CMAKE_SOURCE_DIR}" ARGS "id -i" OUTPUT_VARIABLE HG_OUPUT_RES RETURN_VALUE HG_RETURN_CODE)
	if(HG_RETURN_CODE EQUAL 0 AND HG_OUPUT_RES)
		set(MERCURIAL_ID "${HG_OUPUT_RES}")
	endif()
elseif(EXISTS "${CMAKE_SOURCE_DIR}/.git")
	exec_program("git" "${CMAKE_SOURCE_DIR}" ARGS "rev-parse HEAD" OUTPUT_VARIABLE GIT_OUPUT_RES RETURN_VALUE GIT_RETURN_CODE)
	if(GIT_RETURN_CODE EQUAL 0 AND GIT_OUPUT_RES)
		set(MERCURIAL_ID "${GIT_OUPUT_RES}+")
	endif()
endif()

if(NOT "${CMAKE_C_COMPILER_ID}" MATCHES "^GNU|Intel|Clang|MSVC|AppleClang$")
	message(WARNING "Compiler potentially not (correctly) recognized")
endif()

if("${CMAKE_C_COMPILER_ID}" STREQUAL "Intel")
	set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -no-gcc") # Intel compiler hack
elseif("${CMAKE_C_COMPILER_ID}" STREQUAL "GNU")
	add_definitions(-D_GNU_SOURCE)
endif()
add_definitions(-D_REENTRANT)

# Set default build options
if("${CMAKE_BUILD_TYPE}" MATCHES "^Debug|$")
	set(DFT_STRICT "YES")
	set(DFT_ASSERT "YES")
	set(DFT_DEBUG "YES")
	set(DFT_OPTIMIZE "NO")
	set(DFT_DEVELOPER "YES")
else()
	set(DFT_STRICT "NO")
	set(DFT_ASSERT "NO")
	set(DFT_DEBUG "NO")
	set(DFT_OPTIMIZE "NO")
	set(DFT_DEVELOPER "NO")
endif()

set(ENABLE_DEVELOPER "${DFT_DEVELOPER}" CACHE STRING "Build and install programs that are only useful for MonetDB development (default=yes for development sources)")
set(ENABLE_TESTING "AUTO" CACHE STRING "Enable support for testing (default=auto)")

# modules to use
set(ENABLE_MAPI "YES" CACHE STRING "Enable MAPI (default=yes)")
if(NOT ${ENABLE_MAPI} STREQUAL "NO")
	set(HAVE_MAPI ON)
endif()

set(ENABLE_GDK "YES" CACHE STRING "Enable support for GDK (default=yes)")

set(ENABLE_MONETDB5 "YES" CACHE STRING "Enable support for MonetDB5 (default=yes)")
if(${ENABLE_GDK} STREQUAL "NO")
	if(${ENABLE_MONETDB5} STREQUAL "YES")
		message(FATAL_ERROR "MonetDB5 requires GDK.")
	elseif(${ENABLE_MONETDB5} STREQUAL "AUTO")
		set(ENABLE_MONETDB5 "NO")
	endif()
else()
	set(HAVE_GDK ON)
endif()

set(ENABLE_SQL "YES" CACHE STRING "Enable support for MonetDB/SQL (default=yes)")
if(${ENABLE_MONETDB5} STREQUAL "NO")
	if(${ENABLE_SQL} STREQUAL "YES")
		message(FATAL_ERROR "MonetDB/SQL requires MonetDB5.")
	elseif(${ENABLE_SQL} STREQUAL "AUTO")
		set(ENABLE_SQL "NO")
	endif()
endif()

set(ENABLE_GEOM "AUTO" CACHE STRING "Enable support for geom module (default=auto)")
if(${ENABLE_MONETDB5} STREQUAL "NO")
	if(${ENABLE_GEOM} STREQUAL "YES")
		message(FATAL_ERROR "Geom module requires MonetDB5.")
	elseif(${ENABLE_GEOM} STREQUAL "AUTO")
		set(ENABLE_GEOM "NO")
	endif()
endif()

set(ENABLE_LIDAR "AUTO" CACHE STRING "Enable support for LiDAR data (default=auto)")
set(ENABLE_SHP "AUTO" CACHE STRING "Enable support for ESRI Shapefiles (default=auto)")
if(${ENABLE_GEOM} STREQUAL "NO")
	if(${ENABLE_SHP} STREQUAL "YES")
		message(FATAL_ERROR "ESRI Shapefile vault requires the geom module.")
	elseif(${ENABLE_SHP} STREQUAL "AUTO")
		set(ENABLE_SHP "NO")
	endif()
else()
	set(HAVE_GEOM ON)
endif()

set(ENABLE_EMBEDDED "NO" CACHE STRING "Enable support for running MonetDB as a library (default=no)")
if(NOT ${ENABLE_EMBEDDED} STREQUAL "NO")
	set(HAVE_EMBEDDED ON)
endif()

set(ENABLE_CONSOLE "YES" CACHE STRING "Enables direct console on the server (involves security risks) (default=yes)")
if(NOT ${ENABLE_CONSOLE} STREQUAL "NO")
	set(HAVE_CONSOLE ON)
endif()

set(ENABLE_DEBUG "${DFT_DEBUG}" CACHE STRING "Enable full debugging (default=yes for development sources)")
set(ENABLE_ASSERT "${DFT_ASSERT}" CACHE STRING "Enable assertions in the code (default=yes for development sources)")
set(ENABLE_OPTIMIZE "${DFT_OPTIMIZE}" CACHE STRING "Enable extra optimization (default=no)")
set(ENABLE_STRICT "${DFT_STRICT}" CACHE STRING "Enable strict compiler flags (default=yes for development sources)")
set(ENABLE_SANITIZER "NO" CACHE STRING "Enable support for the GCC address sanitizer (default=no)")
set(ENABLE_STATIC_ANALYSIS "NO" CACHE STRING "Configure for static code analysis (use only if you know what you are doing)")
if(NOT ${ENABLE_STATIC_ANALYSIS} STREQUAL "NO")
	set(STATIC_CODE_ANALYSIS ON)
endif()

# password hash algorithm
set(PASSWORD_BACKEND "SHA512" CACHE STRING "Password hash algorithm, one of MD5, SHA1, RIPEMD160, SHA224, SHA256, SHA384, SHA512, defaults to SHA512")
if(${PASSWORD_BACKEND} MATCHES "^MD5|SHA1|RIPEMD160|SHA224|SHA256|SHA384|SHA512$")
	set("MONETDB5_PASSWDHASH" ${PASSWORD_BACKEND})
	set("MONETDB5_PASSWDHASH_TOKEN" ${PASSWORD_BACKEND})
else()
	message(FATAL_ERROR "PASSWORD_BACKEND invalid, choose one of MD5, SHA1, RIPEMD160, SHA224, SHA256, SHA384, SHA512")
endif()

opj_test_large_files(_LARGE_FILES)
opj_test_large_files(_LARGEFILE_SOURCE)
opj_test_large_files(_FILE_OFFSET_BITS)

message(STATUS "Test if struct tm has tm_zone field")
check_struct_has_member("struct tm" tm_zone "time.h" HAVE_STRUCT_TM_TM_ZONE LANGUAGE C)

message(STATUS "Test for __builtin_add_overflow")
check_c_source_compiles("
	#include <stdio.h>
	#include <stdlib.h>

	int main(int argc, char **argv) {
		__int128 a=(__int128)atoll(getenv(\"a\"))<<64, b=(__int128)atoll(getenv(\"b\"))<<64, c;
		(void) argc;(void) argv;
		if (!__builtin_mul_overflow(a, b, &c))
			printf(\"%lld %lld\",(long long)(c>>64), (long long)c);
		return 0;
	}" HAVE___BUILTIN_ADD_OVERFLOW)

set(FLEXIBLE_ARRAY_MEMBER ON) # We compile according to C99 standard onwards

# https://github.com/Unidata/netcdf-c/commit/b432a527c4a38af45498691a44c5a88961b9c751
message(STATUS "Test if char type is unsigned or not")
check_c_source_compiles("
	#include <stdlib.h>

	int main(int argc, char **argv) {
		char error_if_char_is_signed[((char)-1) < 0 ? -1 : 1];
		(void) argc; (void) argv; (void) error_if_char_is_signed;
		error_if_char_is_signed[0] = 0;
		return 0;
	}" __CHAR_UNSIGNED__)
if(__CHAR_UNSIGNED__)
	set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -D__CHAR_UNSIGNED__")
endif()

message(STATUS "Test if __hidden macro is supported")
check_c_source_compiles("
	#include <stdlib.h>

	__hidden void test(int a);
	void test(int a) { (void)a; }

	int main(int argc, char **argv) {
		(void) argc; (void) argv;
		test(1);
		return 0;
	}" HAVE_HIDDEN)
if(NOT HAVE_HIDDEN)
	set(__hidden ON)
endif()

message(STATUS "Test if compiler can use NAN as an initializer")
check_c_source_compiles("
	#include <math.h>

	extern const float f;
	extern const double d;
	const float f = NAN;
	const double d = NAN;

	int main(int argc, char **argv) {
		(void) argc; (void) argv;
		return 0;
	}" NAN_CAN_BE_USED_AS_INITIALIZER)
if(NOT NAN_CAN_BE_USED_AS_INITIALIZER)
	set(NAN_CANNOT_BE_USED_AS_INITIALIZER ON)
endif()

# Check for compiler flags
set(X_CFLAGS "${CMAKE_C_FLAGS}")

function(checkCompilerFlag Flag)
	check_c_compiler_flag("${Flag}" COMPILE_SUCCEEDED)
	if(COMPILE_SUCCEEDED)
		message(STATUS "Test for ${Flag} succeeded")
		set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${Flag}" PARENT_SCOPE)
		set(X_CFLAGS "${X_CFLAGS} ${Flag}" PARENT_SCOPE)
	else()
		message(STATUS "Test for ${Flag} failed")
	endif()
endfunction()

if(${ENABLE_STRICT} STREQUAL "YES")
	if("${CMAKE_C_COMPILER_ID}" STREQUAL "GNU")
		checkCompilerFlag("-Werror")
		checkCompilerFlag("-Wall")
		checkCompilerFlag("-Wextra")
		checkCompilerFlag("-W")
		checkCompilerFlag("-Werror-implicit-function-declaration")
		checkCompilerFlag("-Wpointer-arith")
		checkCompilerFlag("-Wundef")
		checkCompilerFlag("-Wformat=2")
		checkCompilerFlag("-Wformat-overflow=1")
		checkCompilerFlag("-Wno-format-truncation")
		checkCompilerFlag("-Wno-format-nonliteral")
		if(${CMAKE_SYSTEM_NAME} STREQUAL "CYGWIN")
			checkCompilerFlag("-Wno-error=suggest-attribute=format")
			checkCompilerFlag("-Wno-cast-function-type")
		endif()
		checkCompilerFlag("-Winit-self")
		checkCompilerFlag("-Winvalid-pch")
		checkCompilerFlag("-Wmissing-declarations")
		checkCompilerFlag("-Wmissing-format-attribute")
		checkCompilerFlag("-Wmissing-prototypes")
		checkCompilerFlag("-Wno-missing-field-initializers")
		checkCompilerFlag("-Wold-style-definition")
		checkCompilerFlag("-Wpacked")
		checkCompilerFlag("-Wunknown-pragmas")
		checkCompilerFlag("-Wvariadic-macros")
		checkCompilerFlag("-fstack-protector-all")
		checkCompilerFlag("-Wstack-protector")
		checkCompilerFlag("-Wpacked-bitfield-compat")
		checkCompilerFlag("-Wsync-nand")
		checkCompilerFlag("-Wjump-misses-init")
		checkCompilerFlag("-Wmissing-include-dirs")
		checkCompilerFlag("-Wlogical-op")
		checkCompilerFlag("-Wduplicated-cond")
		checkCompilerFlag("-Wduplicated-branches")
		checkCompilerFlag("-Wrestrict")
		checkCompilerFlag("-Wnested-externs")
		checkCompilerFlag("-Wno-char-subscripts")
		if("${CMAKE_C_COMPILER_ID}" STREQUAL "Clang")
			checkCompilerFlag("-Wunreachable-code")
		endif()
	elseif(${CMAKE_SYSTEM_NAME} STREQUAL "Intel")
		if(CMAKE_C_COMPILER_VERSION VERSION_LESS 10)
			link_libraries("-i_dynamic")
		else()
			link_libraries("-shared-intel")
		endif()
		if(CMAKE_C_COMPILER_VERSION VERSION_GREATER_EQUAL 8.1 AND CMAKE_C_COMPILER_VERSION VERSION_LESS_EQUAL 11)
			link_libraries("-wd1418")
		endif()
		set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -we140 -we147")
		if(CMAKE_C_COMPILER_VERSION VERSION_LESS 8 OR CMAKE_C_COMPILER_VERSION VERSION_GREATER 17)
			set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -ansi")
		endif()

		set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall -w2 -Wcheck")
		set(X_CFLAGS "${X_CFLAGS} -we266,181,810,271,593")
		set(X_CFLAGS "${X_CFLAGS} -Werror -Werror-all")
		set(X_CFLAGS "${X_CFLAGS} -wd1418,1419,981,193,1357")

		if(CMAKE_C_COMPILER_VERSION VERSION_EQUAL 11 OR CMAKE_C_COMPILER_VERSION VERSION_EQUAL 15 OR CMAKE_C_COMPILER_VERSION VERSION_EQUAL 17)
			set(X_CFLAGS "${X_CFLAGS},2259")
		endif()
		if(CMAKE_C_COMPILER_VERSION VERSION_GREATER_EQUAL 8.1 OR CMAKE_C_COMPILER_VERSION VERSION_LESS_EQUAL 8.9)
			set(X_CFLAGS "${X_CFLAGS},1572")
		elseif(CMAKE_C_COMPILER_VERSION VERSION_GREATER_EQUAL 9.1 OR CMAKE_C_COMPILER_VERSION VERSION_LESS_EQUAL 9.9 OR (CMAKE_C_COMPILER_VERSION VERSION_GREATER_EQUAL 10 AND CMAKE_C_COMPILER_VERSION VERSION_EQUAL 11))
			set(X_CFLAGS "${X_CFLAGS},1572,1599")
		endif()
	endif()
endif()

if(NOT ${ENABLE_SANITIZER} STREQUAL "NO")
	if("${CMAKE_C_COMPILER_ID}" STREQUAL "GNU")
		if(${ENABLE_SANITIZER} STREQUAL "YES")
			checkCompilerFlag("-fsanitize=address")
			checkCompilerFlag("-fsanitize=${ENABLE_SANITIZER}")
			if(NOT ${X_CFLAGS} MATCHES "*-fsanitize=*")
				message(FATAL_ERROR " Sanitizer not supported by this compiler")
			endif()
			checkCompilerFlag("-fno-omit-frame-pointer")
		endif()
	else()
		message(FATAL_ERROR " Sanitizer only supported with GCC")
	endif()
endif()

if(${CMAKE_SYSTEM_NAME} STREQUAL "Intel") # see https://software.intel.com/en-us/forums/intel-c-compiler/topic/760979
	if(EXISTS "${ROOT}/usr/include/math.h")
		file(READ "${ROOT}/usr/include/math.h" TMPTXT)
		string(FIND "${TMPTXT}" "_LIB_VERSION_TYPE" FOUND_VERSION)
		if(FOUND_VERSION)
			set(INTEL_MATH_H_HACK ON)
		endif()
	endif()
endif()

message(STATUS "Test if compiler supports -Wl,-Bsymbolic-functions flag")
set(CMAKE_REQUIRED_FLAGS "${CMAKE_REQUIRED_FLAGS} -Wl,-Bsymbolic-functions")
check_c_compiler_flag("" HAVE_WL_BSYMBOLIC_FUNCTIONS)
if(NOT HAVE_WL_BSYMBOLIC_FUNCTIONS)
	set(CMAKE_REQUIRED_FLAGS "${PREV_CMAKE_REQUIRED_FLAGS}")
endif()

if(${CMAKE_SYSTEM_NAME} STREQUAL "CYGWIN")
	set(NO_UNDEFINED "-no-undefined")
endif()
if(MSVC OR ${CMAKE_SYSTEM_NAME} STREQUAL "CYGWIN")
	set(WIN32 ON)
endif()
if(MSVC)
	set(__attribute__(a) ON)
endif()

if(${ENABLE_DEBUG} STREQUAL "YES" AND ${ENABLE_OPTIMIZE} STREQUAL "YES")
	message(FATAL_ERROR " Combining optimize and debug is not possible")
endif()

if(${ENABLE_DEBUG} STREQUAL "YES")
	# Removing flags
	string(REGEX MATCHALL "-O[0-9]+" FOUND_FLAGS "${CMAKE_C_FLAGS}")
	list(LENGTH FOUND_FLAGS FOUND_FLAGS_LENGTH)
	if(FOUND_FLAGS_LENGTH GREATER 0)
		string(REPLACE "-O[0-9]+" "" CMAKE_C_FLAGS "${CMAKE_C_FLAGS}") # Remove -Ox
		message(STATUS "Removed${FOUND_FLAGS} flag(s) for debug build")
	endif()

	# Adding flags
	set(NEW_CMAKE_C_FLAGS "")
	if("${CMAKE_C_COMPILER_ID}" STREQUAL "GNU")
		set(NEW_CMAKE_C_FLAGS "-g3")
	else()
		set(NEW_CMAKE_C_FLAGS "-g")
	endif()

	string(LENGTH "${NEW_CMAKE_C_FLAGS}" NEW_CMAKE_FLAGS_LENGTH)
	if(NEW_CMAKE_FLAGS_LENGTH GREATER 0)
		message(STATUS "Added ${NEW_CMAKE_C_FLAGS} flag(s) for debug build")
		set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${NEW_CMAKE_C_FLAGS}")
	endif()
endif()

if(${ENABLE_ASSERT} STREQUAL "NO")
	set(NDEBUG ON)
elseif(${ENABLE_ASSERT} STREQUAL "YES" AND ${CMAKE_SYSTEM_NAME} STREQUAL "Intel")
	set(X_CFLAGS "${X_CFLAGS} -wd279")
endif()

if(${ENABLE_OPTIMIZE} STREQUAL "YES")
	# Removing flags
	string(REGEX MATCHALL "-O[0-9]+" FOUND_FLAGS "${CMAKE_C_FLAGS}")
	list(LENGTH FOUND_FLAGS FOUND_FLAGS_LENGTH)
	if(FOUND_FLAGS_LENGTH GREATER 0)
		string(REPLACE "-O[0-9]+" "" CMAKE_C_FLAGS "${CMAKE_C_FLAGS}") # Remove -Ox
		message(STATUS "Removed${FOUND_FLAGS} flag(s) for optimize build")
	endif()

	if(${ENABLE_ASSERT} STREQUAL "YES")
		string(REGEX MATCHALL "-fomit-frame-pointer" FOUND_FLAGS "${CMAKE_C_FLAGS}")
		list(LENGTH FOUND_FLAGS FOUND_FLAGS_LENGTH)
		if(FOUND_FLAGS_LENGTH GREATER 0)
			string(REPLACE "-O[0-9]+" "" CMAKE_C_FLAGS "${CMAKE_C_FLAGS}") # Remove -fomit-frame-pointer
			message(STATUS "Removed${FOUND_FLAGS} flag(s) for optimize build")
		endif()
	endif()

	# Adding flags
	set(NEW_CMAKE_C_FLAGS "")
	if(${CMAKE_SYSTEM_NAME} STREQUAL "Clang")
		set(NEW_CMAKE_C_FLAGS "-O3")
		if(${ENABLE_ASSERT} STREQUAL "NO")
			set(NEW_CMAKE_C_FLAGS "${NEW_CMAKE_C_FLAGS} -fomit-frame-pointer")
		endif()
	elseif(${CMAKE_SYSTEM_NAME} STREQUAL "GNU")
		set(NEW_CMAKE_C_FLAGS "-O3")
		if(${ENABLE_ASSERT} STREQUAL "NO")
			set(NEW_CMAKE_C_FLAGS "${NEW_CMAKE_C_FLAGS} -fomit-frame-pointer")
		endif()
		set(NEW_CMAKE_C_FLAGS "${NEW_CMAKE_C_FLAGS} -pipe")
	elseif(${CMAKE_SYSTEM_NAME} STREQUAL "Intel")
		set(NEW_CMAKE_C_FLAGS "-O2")
	endif()

	string(LENGTH "${NEW_CMAKE_C_FLAGS}" NEW_CMAKE_FLAGS_LENGTH)
	if(NEW_CMAKE_FLAGS_LENGTH GREATER 0)
		message(STATUS "Added ${NEW_CMAKE_C_FLAGS} flag(s) for optimize build")
		set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${NEW_CMAKE_C_FLAGS}")
	endif()

	checkCompilerFlag("-D_FORTIFY_SOURCE=2")
endif()

set(PYTHON2 "AUTO" CACHE STRING "python2 is installed in DIR")
set(PYTHON3 "AUTO" CACHE STRING "python3 is installed in DIR")

message(STATUS "Checking major version of Python interpreter")
exec_program("python" ARGS "-V" OUTPUT_VARIABLE PY_OUPUT_RES RETURN_VALUE PY_RETURN_CODE)
if(PY_RETURN_CODE EQUAL 0 AND PY_OUPUT_RES)
	string(FIND "${PY_OUPUT_RES}" "Python 2" MAJOR_IS_PYTHON2)
	string(FIND "${PY_OUPUT_RES}" "Python 3" MAJOR_IS_PYTHON3)
	if(NOT MAJOR_IS_PYTHON2 EQUAL -1) # Python 2 has precedence
		set(MAJOR_PYTHON 2)
		set(HAVE_PYTHON2 YES)
		set(PY2_OUPUT_RES "${PY_OUPUT_RES}")
	elseif(NOT MAJOR_IS_PYTHON3 EQUAL -1)
		set(MAJOR_PYTHON 3)
		set(HAVE_PYTHON3 YES)
		set(PY3_OUPUT_RES "${PY_OUPUT_RES}")
	else()
		message(FATAL_ERROR " Only python versions 2 and 3 are supported by MonetDB")
	endif()
	if(MAJOR_IS_PYTHON2 OR MAJOR_IS_PYTHON3)
		message(STATUS "Major Python interpreter: ${MAJOR_PYTHON}")
	endif()
endif()

if(NOT ${PYTHON2} STREQUAL "NO")
	if(${PYTHON2} STREQUAL "AUTO")
		if(MAJOR_PYTHON EQUAL 2)
			set(PYTHON2_INTERPRETER "python")
		else()
			set(PYTHON2_INTERPRETER "python2")
		endif()
	else()
		set(PYTHON2_INTERPRETER "${PYTHON2}/python2")
	endif()

	if(NOT CMAKE_CROSSCOMPILING)
		exec_program("${PYTHON2_INTERPRETER}" ARGS "-V" OUTPUT_VARIABLE PY2_CUSTOM_OUPUT_RES RETURN_VALUE PY2_RETURN_CODE)
		if(PY2_RETURN_CODE EQUAL 0 AND PY2_CUSTOM_OUPUT_RES)
			string(FIND "${PY2_CUSTOM_OUPUT_RES}" "Python 2" HAS_PYTHON2)
			if(HAS_PYTHON2 EQUAL -1)
				if(${PYTHON2} STREQUAL "YES")
					message(FATAL_ERROR " Python 2 executable not found")
				else()
					message(WARN " Python 2 executable not found")
				endif()
			else()
				set(HAVE_PYTHON2 YES)
				set(PY2_OUPUT_RES ${PY2_CUSTOM_OUPUT_RES})
			endif()
		endif()
		if(NOT HAVE_PYTHON2)
			if(${PYTHON2} STREQUAL "YES")
				message(FATAL_ERROR " Python 2 executable not found")
			else()
				message(WARN " Python 2 executable not found")
			endif()
		endif()
	endif()

	if(HAVE_PYTHON2)
		string(LENGTH "${PY2_OUPUT_RES}" PY2_OUPUT_LENGTH)
		string(SUBSTRING "${PY2_OUPUT_RES}" 9 ${PY2_OUPUT_LENGTH} PY2_VERSION)
		if(PY2_VERSION LESS 6)
			set(HAVE_PYTHON2 NO)
			if(${PYTHON2} STREQUAL "YES")
				message(FATAL_ERROR " Python 2 executable is too old (<2.6)")
			else()
				message(WARN " Python 2 executable is too old (<2.6)")
			endif()
		endif()
	endif()

	set(PYTHON2_LIBDIR "AUTO" CACHE STRING "Path for Python 2 library directory (where Python 2 modules should be installed)")
	if(${PYTHON2_LIBDIR} STREQUAL "YES" OR ${PYTHON2_LIBDIR} STREQUAL "AUTO")
		if(CMAKE_CROSSCOMPILING)
			if(${PYTHON2} STREQUAL "YES")
				message(FATAL_ERROR " Must specify PYTHON2_LIBDIR when cross compiling")
			else()
				message(WARN " Must specify PYTHON2_LIBDIR when cross compiling")
			endif()
		endif()
		if(${CMAKE_SYSTEM_NAME} STREQUAL "Darwin" AND CMAKE_SYSTEM_VERSION VERSION_EQUAL 9 AND PY2_VERSION VERSION_EQUAL 2.5)
			exec_program("${PYTHON2_INTERPRETER}" ARGS "-c 'import distutils.sysconfig; print distutils.sysconfig.get_python_lib(0,1,\"${CMAKE_INSTALL_PREFIX}\")'" OUTPUT_VARIABLE PYTHON2_LIBDIR RETURN_VALUE PYTHON2_LIBDIR_CODE) # TODO Escape this
			if(PYTHON2_LIBDIR)
				set(PYTHON2_LIBDIR "${PYTHON2_LIBDIR}/site-packages") # Runs on a POSIX platform, so it's safe to do
			endif()
		else()
			exec_program("${PYTHON2_INTERPRETER}" ARGS "-c 'import distutils.sysconfig; print distutils.sysconfig.get_python_lib(0,0,\"${CMAKE_INSTALL_PREFIX}\")'" OUTPUT_VARIABLE PYTHON2_LIBDIR RETURN_VALUE PYTHON2_LIBDIR_CODE) # TODO Escape this
		endif()

		if(PYTHON2_LIBDIR AND PYTHON2_LIBDIR_CODE EQUAL 0)
			string(LENGTH "${CMAKE_INSTALL_PREFIX}" CMAKE_INSTALL_PREFIX_LENGTH)
			math(EXPR CMAKE_INSTALL_PREFIX_LENGTH "${CMAKE_INSTALL_PREFIX_LENGTH}+1") # add the / separator
			string(LENGTH "${PYTHON2_LIBDIR}" PYTHON2_LIBDIR_PREFIX_LENGTH)
			string(SUBSTRING "${PYTHON2_LIBDIR}" ${CMAKE_INSTALL_PREFIX_LENGTH} ${PYTHON2_LIBDIR_PREFIX_LENGTH} PYTHON2_LIBDIR) # remove the prefix
		elseif(${PYTHON2} STREQUAL "YES")
			message(FATAL_ERROR " Could not find PYTHON2_LIBDIR")
		else()
			message(WARN " Could not find PYTHON2_LIBDIR")
		endif()
	endif()
else()
	set(HAVE_PYTHON2 NO)
endif()

if(NOT ${PYTHON3} STREQUAL "NO")
	if(${PYTHON3} STREQUAL "AUTO")
		if(MAJOR_PYTHON EQUAL 3)
			set(PYTHON3_INTERPRETER "python")
		else()
			set(PYTHON3_INTERPRETER "python3")
		endif()
	else()
		set(PYTHON3_INTERPRETER "${PYTHON3}/python3")
	endif()

	if(NOT CMAKE_CROSSCOMPILING)
		exec_program("${PYTHON3_INTERPRETER}" ARGS "-V" OUTPUT_VARIABLE PY3_CUSTOM_OUPUT_RES RETURN_VALUE PY3_RETURN_CODE)
		if(PY3_RETURN_CODE EQUAL 0 AND PY3_CUSTOM_OUPUT_RES)
			string(FIND "${PY3_CUSTOM_OUPUT_RES}" "Python 3" HAS_PYTHON3)
			if(HAS_PYTHON3 EQUAL -1)
				if(${PYTHON3} STREQUAL "YES")
					message(FATAL_ERROR " Python 3 executable not found")
				else()
					message(WARN " Python 3 executable not found")
				endif()
			else()
				set(HAVE_PYTHON3 YES)
				set(PY3_OUPUT_RES ${PY3_CUSTOM_OUPUT_RES})
			endif()
		endif()
		if(NOT HAVE_PYTHON3)
			if(${PYTHON3} STREQUAL "YES")
				message(FATAL_ERROR " Python 3 executable not found")
			else()
				message(WARN " Python 3 executable not found")
			endif()
		endif()
	endif()

	if(HAVE_PYTHON3)
		string(LENGTH "${PY3_OUPUT_RES}" PY3_OUPUT_LENGTH)
		string(SUBSTRING "${PY3_OUPUT_RES}" 9 PY3_OUPUT_LENGTH PY3_VERSION)
		if(PY3_VERSION LESS 5)
			set(HAVE_PYTHON3 NO)
			if(${PYTHON3} STREQUAL "YES")
				message(FATAL_ERROR " Python 3 executable is too old (<3.5)")
			else()
				message(WARN " Python 3 executable is too old (<3.5)")
			endif()
		endif()
	endif()

	set(PYTHON3_LIBDIR "AUTO" CACHE STRING "Path for Python 3 library directory (where Python 3 modules should be installed)")
	if(${PYTHON3_LIBDIR} STREQUAL "YES" OR ${PYTHON3_LIBDIR} STREQUAL "AUTO")
		if(CMAKE_CROSSCOMPILING)
			if(${PYTHON3} STREQUAL "YES")
				message(FATAL_ERROR " Must specify PYTHON3_LIBDIR when cross compiling")
			else()
				message(WARN " Must specify PYTHON3_LIBDIR when cross compiling")
			endif()
		endif()
		exec_program("${PYTHON3_INTERPRETER}" ARGS "-c 'import distutils.sysconfig; print(distutils.sysconfig.get_python_lib(0,0,\"${CMAKE_INSTALL_PREFIX}\"))'" OUTPUT_VARIABLE PYTHON3_LIBDIR RETURN_VALUE PYTHON3_LIBDIR_CODE)

		if(PYTHON3_LIBDIR AND PYTHON3_LIBDIR_CODE EQUAL 0)
			string(LENGTH "${CMAKE_INSTALL_PREFIX}" CMAKE_INSTALL_PREFIX_LENGTH)
			math(EXPR CMAKE_INSTALL_PREFIX_LENGTH "${CMAKE_INSTALL_PREFIX_LENGTH}+1") # add the / separator
			string(LENGTH "${PYTHON3_LIBDIR}" PYTHON3_LIBDIR_PREFIX_LENGTH)
			string(SUBSTRING "${PYTHON3_LIBDIR}" ${CMAKE_INSTALL_PREFIX_LENGTH} ${PYTHON3_LIBDIR_PREFIX_LENGTH} PYTHON3_LIBDIR) # remove the prefix
		elseif(${PYTHON3} STREQUAL "YES")
			message(FATAL_ERROR " Could not find PYTHON3_LIBDIR")
		else()
			message(WARN " Could not find PYTHON3_LIBDIR")
		endif()
	endif()
else()
	set(HAVE_PYTHON3 NO)
endif()

if(HAVE_PYTHON2)
	set(PYTHON_LIBDIR ${PYTHON2_LIBDIR})
elseif(HAVE_PYTHON3)
	set(PYTHON_LIBDIR ${PYTHON3_LIBDIR})
endif()

if(NOT ENABLE_TESTING STREQUAL "NO" AND NOT HAVE_PYTHON2 AND NOT HAVE_PYTHON3)
	set(ENABLE_TESTING "NO")
endif()
if(NOT ${ENABLE_TESTING} STREQUAL "NO")
	set(HAVE_TESTING ON)
endif()

find_package(BISON)
if(BISON_FOUND)
	if(BISON_VERSION VERSION_LESS_EQUAL 2.4.3)
		string(FIND "${CMAKE_C_FLAGS}" "-Wundef" FOUND_WDEF)
		if(NOT FOUND_WDEF EQUAL -1)
			string(REPLACE "-Wundef" "" CMAKE_C_FLAGS "${CMAKE_C_FLAGS}")
			message(STATUS "Removed -Wundef flag for bison")
		endif()
	endif()
elseif(${ENABLE_SQL} STREQUAL "YES")
	message(FATAL_ERROR "MonetDB/SQL requires bison")
else()
	set(ENABLE_SQL "NO")
	message(WARN " Bison not found")
endif()

if(${CMAKE_SYSTEM_NAME} STREQUAL "Windows")
	set(OS_DIRSEP  "\\\\")
	set(OS_PATHSEP ";")
elseif(UNIX OR APPLE OR ${CMAKE_SYSTEM_NAME} STREQUAL "CYGWIN")
	set(OS_DIRSEP  "/")
	set(OS_PATHSEP ":")
else()
	message(FATAL_ERROR "Unknown target operating system")
endif()

set(DIR_SEP      "'${OS_DIRSEP}'")
set(DIR_SEP_STR  ${OS_DIRSEP})
set(PATH_SEP     "'${OS_PATHSEP}'")
set(PATH_SEP_STR ${OS_PATHSEP})
set(SO_EXT       ${CMAKE_SHARED_LIBRARY_SUFFIX})
set(SO_PREFIX    ${CMAKE_SHARED_LIBRARY_PREFIX})

test_big_endian(WORDS_BIGENDIAN)
if(APPLE)
	set(AC_APPLE_UNIVERSAL_BUILD ON)
endif()

# checks for libraries
set(WITH_BZ2 "AUTO" CACHE STRING "Include bz2 support (default=auto)") # Check with BZip2_FOUND
if(NOT ${WITH_BZ2} STREQUAL "NO")
	include(FindBZip2)

	if(BZip2_FOUND)
		message(STATUS "bz2 library found")
	elseif(${WITH_BZ2} STREQUAL "YES")
		message(FATAL_ERROR "bz2 library not found")
	else()
		message(WARN " bz2 library not found")
	endif()
endif()

set(WITH_SNAPPY "AUTO" CACHE STRING "Include snappy support (default=auto)") # Check with HAVE_LIBSNAPPY
if(NOT ${WITH_SNAPPY} STREQUAL "NO")
	pkg_search_module(SNAPPY NO_CMAKE_PATH NO_CMAKE_ENVIRONMENT_PATH snappy)

	if(SNAPPY_FOUND)
		message(STATUS "snappy library found")
		set(HAVE_LIBSNAPPY ON)
	elseif(${WITH_SNAPPY} STREQUAL "YES")
		message(FATAL_ERROR "snappy library not found")
	else()
		message(WARN " snappy library not found")
	endif()
endif()

set(WITH_LZ4 "AUTO" CACHE STRING "Include lz4 library support (default=auto)") # Check with HAVE_LIBLZ4
if(NOT ${WITH_LZ4} STREQUAL "NO")
	pkg_search_module(LZ4 NO_CMAKE_PATH NO_CMAKE_ENVIRONMENT_PATH liblz4>=1.8.0)

	if(LZ4_FOUND)
		message(STATUS "lz4 library found")
		set(HAVE_LIBLZ4 ON)
	elseif(${WITH_LZ4} STREQUAL "YES")
		message(FATAL_ERROR "lz4 library not found")
	else()
		message(WARN " lz4 library not found")
	endif()
endif()

find_library(M_LIBRARY NAMES m)
if(M_LIBRARY)
	set(MATH_LIBS "m")
endif()

# Malloc libs
set(CMAKE_REQUIRED_LIBRARIES "${CMAKE_REQUIRED_LIBRARIES};umem")
check_symbol_exists("malloc" "umem.h" HAVE_UMEM)
set(CMAKE_REQUIRED_LIBRARIES "${PREV_CMAKE_REQUIRED_LIBRARIES}")
if(HAVE_UMEM)
	set(MALLOC_LIBS "umem")
else()
	set(CMAKE_REQUIRED_LIBRARIES "${CMAKE_REQUIRED_LIBRARIES};mtmalloc")
	check_symbol_exists("malloc" "mtmalloc.h" HAVE_MT)
	set(CMAKE_REQUIRED_LIBRARIES "${PREV_CMAKE_REQUIRED_LIBRARIES}")
	if(HAVE_MT)
		set(MALLOC_LIBS "mtmalloc")
	else()
		set(CMAKE_REQUIRED_LIBRARIES "${CMAKE_REQUIRED_LIBRARIES};malloc")
		check_symbol_exists("malloc" "malloc.h" HAVE_MALLOC)
		set(CMAKE_REQUIRED_LIBRARIES "${PREV_CMAKE_REQUIRED_LIBRARIES}")
		if(HAVE_MALLOC)
			set(MALLOC_LIBS "malloc")
		endif()
	endif()
endif()

# Pthread libs
set(PTHREAD_INCS "")
set(PTHREAD_LIBS "")
if(NOT ${CMAKE_SYSTEM_NAME} STREQUAL "Windows")
	set(WITH_PTHREAD "AUTO" CACHE STRING "Pthread library is installed in DIR") # Check with HAVE_PTHREAD_LIB (not needed on MacOSX)
	if(NOT ${WITH_PTHREAD} STREQUAL "NO")
		if(NOT ${WITH_PTHREAD} MATCHES "^AUTO|YES$")
			set(PTHREAD_INCS "${WITH_PTHREAD}/include")
			set(PTHREAD_LIBS "${WITH_PTHREAD}/lib")
			set(CMAKE_REQUIRED_INCLUDES "${CMAKE_REQUIRED_INCLUDES};${PTHREAD_INCS}") # Set back again in the end!
			set(CMAKE_REQUIRED_LINK_OPTIONS "${CMAKE_REQUIRED_LINK_OPTIONS};${PTHREAD_LIBS}") # Set back again in the end!
		endif()

		check_include_file("pthread.h" HAVE_PTHREAD_H)
		check_include_file("semaphore.h" HAVE_SEMAPHORE_H)
		check_include_file("sched.h" HAVE_SCHED_H)

		if(${WITH_PTHREAD} MATCHES "^AUTO|YES$")
			if("${CMAKE_C_COMPILER_ID}" MATCHES "^Clang|AppleClang|GNU$")
				if(NOT ${CMAKE_SYSTEM_NAME} STREQUAL "Darwin")
					set(HAVE_PTHREAD_LIB ON)
				endif()
			elseif(${WITH_PTHREAD} STREQUAL "YES")
				message(FATAL_ERROR "pthread library not supported by the platform")
			endif()
		endif()

		set(CMAKE_REQUIRED_LIBRARIES "${CMAKE_REQUIRED_LIBRARIES};pthread")
		check_symbol_exists("pthread_kill" "signal.h" HAVE_PTHREAD_KILL)
		check_symbol_exists("pthread_sigmask" "signal.h" HAVE_PTHREAD_SIGMASK)
		set(CMAKE_REQUIRED_INCLUDES "${PREV_CMAKE_REQUIRED_INCLUDES}")
		set(CMAKE_REQUIRED_LIBRARIES "${PREV_CMAKE_REQUIRED_LIBRARIES}")
		set(CMAKE_REQUIRED_LINK_OPTIONS "${PREV_CMAKE_REQUIRED_LINK_OPTIONS}")
	endif()
	if(HAVE_PTHREAD_H)
		set(PTHREAD_LIBRARIES "pthread")
		set(HAVE_LIBPTHREAD ON)
	else()
		message(FATAL_ERROR "MonetDB requires libpthread on UNIX systems")
	endif()
endif()

# Readline libs
set(READLINE_INCS "")
set(READLINE_LIBS "")
set(READLINE_LIBRARIES )
set(WITH_READLINE "AUTO" CACHE STRING "Readline library is installed in DIR") # Check with HAVE_LIBREADLINE
if(NOT ${WITH_READLINE} STREQUAL "NO")
	if(NOT ${WITH_READLINE} MATCHES "^AUTO|YES$")
		set(READLINE_INCS "${WITH_READLINE}/include")
		set(READLINE_LIBS "${WITH_READLINE}/lib")
		set(CMAKE_REQUIRED_INCLUDES "${CMAKE_REQUIRED_INCLUDES};${READLINE_INCS}") # Set back again in the end!
		set(CMAKE_REQUIRED_LINK_OPTIONS "${CMAKE_REQUIRED_LINK_OPTIONS};${READLINE_LIBS}") # Set back again in the end!
	endif()

	set(CMAKE_REQUIRED_LIBRARIES "${CMAKE_REQUIRED_LIBRARIES};readline")
	check_symbol_exists("readline" "stdio.h;readline/readline.h;readline/history.h" HAVE_LIBREADLINE)
	if(HAVE_LIBREADLINE)
		list(APPEND  READLINE_LIBRARIES readline)
	else()
		set(CMAKE_REQUIRED_LIBRARIES "${CMAKE_REQUIRED_LIBRARIES};termcap")
		check_symbol_exists("rl_history_search_forward" "stdio.h;readline/readline.h;readline/history.h" HAVE_LIBREADLINE)
		if(HAVE_LIBREADLINE)
			list(APPEND READLINE_LIBRARIES termcap)
		else()
			set(CMAKE_REQUIRED_LIBRARIES "${PREV_CMAKE_REQUIRED_LIBRARIES};readline;ncurses")
			check_symbol_exists("rl_reverse_search_history" "stdio.h;readline/readline.h;readline/history.h" HAVE_LIBREADLINE)
			if(HAVE_LIBREADLINE)
				list(APPEND READLINE_LIBRARIES ncurses)
			elseif(${WITH_READLINE} STREQUAL "YES")
				message(FATAL_ERROR "Readline library not found")
			else()
				message(WARN " Readline library not found")
			endif()
		endif()
	endif()

	if(HAVE_LIBREADLINE)
		check_symbol_exists("rl_completion_matches" "stdio.h;readline/readline.h" HAVE_LIBREADLINE)
		if(HAVE_LIBREADLINE)
			message(STATUS "Checking whether rl_completion_func_t exists")
			check_symbol_exists("rl_completion_func_t" "stdio.h;readline/readline.h" HAVE_LIBREADLINE)
			if(NOT HAVE_LIBREADLINE)
				if(${WITH_READLINE} STREQUAL "YES")
					message(FATAL_ERROR "readline/readline.h does not contain rl_completion_func_t, is it GNU readline?")
				else()
					message(WARN " readline/readline.h does not contain rl_completion_func_t, is it GNU readline?")
				endif()
			endif()
		elseif(${WITH_READLINE} STREQUAL "YES")
			message(FATAL_ERROR "Readline library does not contain rl_completion_matches")
		else()
			message(WARN " Readline library does not contain rl_completion_matches")
		endif()
	endif()

	set(CMAKE_REQUIRED_INCLUDES "${PREV_CMAKE_REQUIRED_INCLUDES}")
	set(CMAKE_REQUIRED_LIBRARIES "${PREV_CMAKE_REQUIRED_LIBRARIES}")
	set(CMAKE_REQUIRED_LINK_OPTIONS "${PREV_CMAKE_REQUIRED_LINK_OPTIONS}")
endif()

# Iconv
set(ICONV_LIBS "")
if(Iconv_FOUND)
	set(HAVE_ICONV ON)
	set(HAVE_ICONV_H ON)
	if(NOT Iconv_IS_BUILT_IN)
		set(ICONV_LIBS "${Iconv_LIBRARIES}")
	endif()

	if(NOT MSVC)
		message(STATUS "Check if second iconv argument requires const")
		check_c_source_compiles("
			#include <iconv.h>

			int main(int argc, char **argv) {
				iconv_t conv = 0;
				const char* in = 0;
				size_t ilen = 0;
				char* out = 0;
				size_t olen = 0;
				(void) argc; (void) argv;
				iconv(conv, &in, &ilen, &out, &olen);
				return 0;
			}
		" ICONV_REQUIRES_CONST)
	endif()
	if(ICONV_REQUIRES_CONST)
		set(ICONV_CONST const)
	else()
		set(ICONV_CONST " ")
	endif()
endif()

# UUID
set(WITH_UUID "YES" CACHE STRING "Include UUID support (default=yes)") # Check with HAVE_UUID
if(NOT ${WITH_UUID} STREQUAL "NO")
	set(CMAKE_REQUIRED_LIBRARIES "${CMAKE_REQUIRED_LIBRARIES};uuid")
	check_symbol_exists("uuid_generate" "uuid/uuid.h" HAVE_UUID)
	set(CMAKE_REQUIRED_LIBRARIES "${PREV_CMAKE_REQUIRED_LIBRARIES}")
	if(HAVE_UUID)
		set(UUID_LIBRARIES "uuid")
	endif()
endif()

# OpenSSL or CommonCrypto library
set(OPENSSL_INCS "")
set(OPENSSL_LIBRARIES "")
if(${CMAKE_SYSTEM_NAME} STREQUAL "Darwin")
	set(HAVE_COMMONCRYPTO ON)
	set(CMAKE_REQUIRED_LIBRARIES "${CMAKE_REQUIRED_LIBRARIES};crypto") # TODO test this

	check_symbol_exists("CC_MD5_Update" "CommonCrypto/CommonDigest.h" HAVE_MD5_UPDATE)
	check_symbol_exists("CC_RIPEMD160_Update" "CommonCrypto/CommonDigest.h" HAVE_RIPEMD160_UPDATE)
	check_symbol_exists("CC_SHA1_Update" "CommonCrypto/CommonDigest.h" HAVE_SHA1_UPDATE)
	check_symbol_exists("CC_SHA224_Update" "CommonCrypto/CommonDigest.h" HAVE_SHA224_UPDATE)
	check_symbol_exists("CC_SHA256_Update" "CommonCrypto/CommonDigest.h" HAVE_SHA256_UPDATE)
	check_symbol_exists("CC_SHA384_Update" "CommonCrypto/CommonDigest.h" HAVE_SHA384_UPDATE)
	check_symbol_exists("CC_SHA512_Update" "CommonCrypto/CommonDigest.h" HAVE_SHA512_UPDATE)
else()
	set(WITH_OPENSSL "YES" CACHE STRING "Include OpenSSL support (default=yes)") # Check with OPENSSL_FOUND, OPENSSL_INCS, OPENSSL_LIBRARIES
	if(NOT ${WITH_OPENSSL} STREQUAL "NO")
		find_package(OpenSSL)

		if(OPENSSL_FOUND)
			message(STATUS "openssl library found")
			set(HAVE_OPENSSL ON)
			set(OPENSSL_INCS "${OPENSSL_INCLUDE_DIR}")
			set(OPENSSL_LIBRARIES "${OPENSSL_CRYPTO_LIBRARY}")

			if(MSVC)
				set(HAVE_MD5_UPDATE ON)
				set(HAVE_RIPEMD160_UPDATE ON)
				set(HAVE_SHA1_UPDATE ON)
				set(HAVE_SHA224_UPDATE ON)
				set(HAVE_SHA256_UPDATE ON)
				set(HAVE_SHA384_UPDATE ON)
				set(HAVE_SHA512_UPDATE ON)
			else()
				set(CMAKE_REQUIRED_INCLUDES "${CMAKE_REQUIRED_INCLUDES};${OPENSSL_INCS}")
				set(CMAKE_REQUIRED_LIBRARIES "${CMAKE_REQUIRED_LIBRARIES};crypto")

				check_symbol_exists("MD5_Update" "openssl/md5.h" HAVE_MD5_UPDATE)
				check_symbol_exists("RIPEMD160_Update" "openssl/ripemd.h" HAVE_RIPEMD160_UPDATE)
				check_symbol_exists("SHA1_Update" "openssl/sha.h" HAVE_SHA1_UPDATE)
				check_symbol_exists("SHA224_Update" "openssl/sha.h" HAVE_SHA224_UPDATE)
				check_symbol_exists("SHA256_Update" "openssl/sha.h" HAVE_SHA256_UPDATE)
				check_symbol_exists("SHA384_Update" "openssl/sha.h" HAVE_SHA384_UPDATE)
				check_symbol_exists("SHA512_Update" "openssl/sha.h" HAVE_SHA512_UPDATE)
			endif()

			if(NOT HAVE_${PASSWORD_BACKEND}_UPDATE)
				set(OPENSSL_FOUND NO)
				if(${ENABLE_MONETDB5} STREQUAL "YES")
					message(FATAL_ERROR "OpenSSL library found but checksum algorithm required for MonetDB5 not found")
				else()
					set(ENABLE_MONETDB5 "NO")
					set(WHY_NOT_MONETDB5 "OpenSSL library found but required checksum algorithm not found, so disabling")
					message(WARN " ${WHY_NOT_MONETDB5}")
				endif()
			endif()
		else()
			if(${ENABLE_MONETDB5} STREQUAL "YES")
				message(FATAL_ERROR "OpenSSL library not found but required for MonetDB5")
			else()
				set(ENABLE_MONETDB5 "NO")
				set(WHY_NOT_MONETDB5 "OpenSSL library not found but required for MonetDB5")
				message(WARN " ${WHY_NOT_MONETDB5}")
			endif()
		endif()
	endif()
endif()
set(CMAKE_REQUIRED_INCLUDES "${PREV_CMAKE_REQUIRED_INCLUDES}")
set(CMAKE_REQUIRED_LIBRARIES "${PREV_CMAKE_REQUIRED_LIBRARIES}")

# Regex library
set(WITH_REGEX "PCRE" CACHE STRING "Use either PCRE or POSIX regular expressions (default=PCRE if available)") # Check with HAVE_LIBPCRE and HAVE_POSIX_REGEX
if(NOT ${WITH_REGEX} MATCHES "^AUTO|PCRE|POSIX$")
	message(FATAL_ERROR "WITH_REGEX argument must be either AUTO, PCRE or POSIX")
endif()

if(NOT ${WITH_REGEX} STREQUAL "POSIX")
	set(PCRE_REQUIRED_VERSION "4.5")
	pkg_search_module(PCRE NO_CMAKE_PATH NO_CMAKE_ENVIRONMENT_PATH libpcre>=${PCRE_REQUIRED_VERSION})

	if(PCRE_FOUND)
		message(STATUS "PCRE library found")
		if(MSVC)
			set(HAVE_LIBPCRE ON)
		else()
			message(STATUS "Checking for UTF-8 support on PCRE library")
			set(CMAKE_REQUIRED_LIBRARIES "${CMAKE_REQUIRED_LIBRARIES};pcre")
			check_c_source_runs("
				#include <stdlib.h>
				#include <pcre.h>

				int main(int argc, char **argv) {
					int rc;
					(void) argc; (void) argv;
					if (pcre_config(PCRE_CONFIG_UTF8, &rc) != 0)
						return 1;
					exit(!rc);
					return 0;
				}
			" HAVE_LIBPCRE)
			set(CMAKE_REQUIRED_LIBRARIES "${PREV_CMAKE_REQUIRED_LIBRARIES}")
		endif()
		if(NOT HAVE_LIBPCRE)
			if(${WITH_REGEX} STREQUAL "PCRE")
				message(FATAL_ERROR "PCRE library found but no UTF-8 support")
			else()
				message(WARN " PCRE library found but no UTF-8 support")
			endif()
		endif()
	else()
		if(PCRE_FOUND AND PCRE_VERSION VERSION_LESS_EQUAL ${PCRE_REQUIRED_VERSION})
			set(PCRE_ERROR_MESSAGE " PCRE library found, but the version is too old ${PCRE_VERSION} < ${PCRE_REQUIRED_VERSION}")
		else()
			set(PCRE_ERROR_MESSAGE " PCRE library not found or not usable")
		endif()

		if(${WITH_REGEX} STREQUAL "PCRE")
			message(FATAL_ERROR "${PCRE_ERROR_MESSAGE}")
		else()
			message(WARN "${PCRE_ERROR_MESSAGE}")
		endif()
	endif()
endif()

if(NOT HAVE_LIBPCRE)
	message(STATUS "Checking for GNU regex library")
	check_symbol_exists("regcomp" "regex.h" HAVE_POSIX_REGEX)
endif()

if(NOT HAVE_LIBPCRE AND NOT HAVE_POSIX_REGEX)
	if(${ENABLE_MONETDB5} STREQUAL "YES")
		message(FATAL_ERROR "PCRE library or GNU regex library not found but required for MonetDB5")
	else()
		set(ENABLE_MONETDB5 "NO")
		set(WHY_NOT_MONETDB5 "PCRE library or GNU regex library not found but required for MonetDB5")
		message(WARN " ${WHY_NOT_MONETDB5}")
	endif()
endif()

set(WITH_LIBXML2 "AUTO" CACHE STRING "Include libxml2 support (default=auto)") # Check with LIBXML2_FOUND
if(NOT ${WITH_LIBXML2} STREQUAL "NO")
	pkg_search_module(LIBXML2 NO_CMAKE_PATH NO_CMAKE_ENVIRONMENT_PATH libxml-2.0)

	if(LIBXML2_FOUND)
		message(STATUS "libxml2 library found")
		set(HAVE_LIBXML ON)
	elseif(${WITH_LIBXML2} STREQUAL "YES")
		message(FATAL_ERROR "libxml2 library not found")
	else()
		message(WARN " libxml2 library not found")
	endif()
endif()

set(WITH_CURL "AUTO" CACHE STRING "Include cURL support (default=auto)") # Check with CURL_FOUND
if(NOT ${WITH_CURL} STREQUAL "NO")
	include(FindCURL)

	if(CURL_FOUND)
		message(STATUS "libcurl library found")
		set(HAVE_CURL ON)
	elseif(${WITH_CURL} STREQUAL "YES")
		message(FATAL_ERROR "libcurl library not found")
	else()
		message(WARN " libcurl library not found")
	endif()
endif()

set(WITH_ZLIB "AUTO" CACHE STRING "Include zlib support (default=auto)") # Check with ZLIB_FOUND
if(NOT ${WITH_ZLIB} STREQUAL "NO")
	include(FindZLIB)

	if(ZLIB_FOUND)
		message(STATUS "zlib library found")
		set(HAVE_LIBZ ON)
	elseif(${WITH_ZLIB} STREQUAL "YES")
		message(FATAL_ERROR "zlib library not found")
	else()
		message(WARN " zlib library not found")
	endif()
endif()

set(WITH_LIBLZMA "AUTO" CACHE STRING "Include liblzma support (default=auto)") # Check with LIBLZMA_FOUND
if(NOT ${WITH_LIBLZMA} STREQUAL "NO")
	include(FindLibLZMA)

	if(LIBLZMA_FOUND)
		message(STATUS "liblzma library found")
		set(HAVE_LIBLZMA ON)
	elseif(${WITH_LIBLZMA} STREQUAL "YES")
		message(FATAL_ERROR "liblzma library not found")
	else()
		message(WARN " liblzma library not found")
	endif()
endif()

set(WITH_VALGRIND "NO" CACHE STRING "Include valgrind support (default=no)") # Check with VALGRIND_FOUND
if(NOT ${WITH_VALGRIND} STREQUAL "NO")
	pkg_search_module(VALGRIND NO_CMAKE_PATH NO_CMAKE_ENVIRONMENT_PATH valgrind)

	if(VALGRIND_FOUND)
		message(STATUS "valgrind library found")
		set(HAVE_VALGRIND ON)
	elseif(${WITH_VALGRIND} STREQUAL "YES")
		message(FATAL_ERROR "valgrind library not found")
	else()
		message(WARN " valgrind library not found")
	endif()
endif()

set(R_HOME "")
set(R_INCS "")
set(R_LIBS "")
set(ENABLE_RINTEGRATION "AUTO" CACHE STRING "Enable support for R integration into MonetDB (default=auto)") # Check with HAVE_LIBR
if(NOT ${ENABLE_RINTEGRATION} STREQUAL "NO")
	if(${ENABLE_RINTEGRATION} MATCHES "^YES|AUTO$")
		set(R_INTERPRETER "R")
	else()
		set(R_INTERPRETER "${ENABLE_RINTEGRATION}")
	endif()

	message(STATUS "Checking major version of R interpreter")
	exec_program("${R_INTERPRETER}" ARGS "RHOME" OUTPUT_VARIABLE R_HOME_OUTPUT RETURN_VALUE R_HOME_RC)
	exec_program("${R_INTERPRETER}" ARGS "CMD config --cppflags" OUTPUT_VARIABLE R_CPP_OUTPUT RETURN_VALUE R_CPP_RC)
	exec_program("${R_INTERPRETER}" ARGS "CMD config --ldflags" OUTPUT_VARIABLE R_LD_OUTPUT RETURN_VALUE R_LD_RC)
	if(R_HOME_RC EQUAL 0 AND R_CPP_RC EQUAL 0 AND R_LD_RC EQUAL 0)
		MT_clibsToCmake(${R_CPP_OUTPUT} R_INCS)
		string(REPLACE "-fopenmp" "-fopenmp=libgomp" R_LD_OUTPUT ${R_LD_OUTPUT})
		set(R_LIBS "${R_LD_OUTPUT}")
		set(HAVE_LIBR ON)
		set(RHOME ${R_HOME_OUTPUT})
	elseif(${ENABLE_RINTEGRATION} STREQUAL "YES")
		message(FATAL_ERROR "R executable required for R integration support")
	else()
		message(WARN " R executable not found")
	endif()
endif()

function(testPythonIntegration HAVE_NUMPY PY_INCLUDES PY_LIBS PY_VERSION INTEGRATION_ENABLED INTERPRETER_PATH INTERPRETER_CONFIG)
	if(NOT HAVE_PYTHON${PY_VERSION})
		message(FATAL_ERROR "A valid python${PY_VERSION} interpreter is required")
	endif()

	if(${INTERPRETER_CONFIG} STREQUAL "AUTO")
		set(PY_CONFIG_FILE "python${PY_VERSION}-config")
	else()
		set(PY_CONFIG_FILE "${INTERPRETER_CONFIG}")
	endif()

	message(STATUS "Checking python${PY_VERSION}-config program")
	exec_program("${PY_CONFIG_FILE}" ARGS "--ldflags" OUTPUT_VARIABLE PC_OUTPUT RETURN_VALUE PC_RETURN_CODE)
	if(NOT PC_RETURN_CODE EQUAL 0)
		message(FATAL_ERROR "python${PY_VERSION}-config library required for Python ${PY_VERSION} integration support")
	endif()

	message(STATUS "Checking for numpy version")
	exec_program("${INTERPRETER_PATH}" ARGS "-c \"import numpy; print(int(numpy.__version__.split('.').__getitem__(1)) >= 7)\"" OUTPUT_VARIABLE NUMPY_OUTPUT RETURN_VALUE NUMPY_RETURN_CODE)
	if(NUMPY_RETURN_CODE EQUAL 0 AND NUMPY_OUTPUT STREQUAL "True")
		check_include_file("numpy/numpyconfig.h" NUMPY_HEADERS)
		if(NUMPY_HEADERS)
			set(NUMPY_HEADERS "True")
		else()
			exec_program("${INTERPRETER_PATH}" ARGS "-c \"import numpy, os; print(os.path.isfile(os.path.join(numpy.get_include(), 'numpy/arrayobject.h')))\"" OUTPUT_VARIABLE NUMPY_HEADERS RETURN_VALUE NUMPY_HEADERS_RETURN_CODE)
			if(NOT NUMPY_HEADERS_RETURN_CODE)
				unset(NUMPY_HEADERS)
			endif()
		endif()
		if(NUMPY_HEADERS)
			exec_program("${INTERPRETER_PATH}" ARGS "-c \"import distutils.sysconfig, os; print(os.path.isfile(os.path.join(distutils.sysconfig.get_python_inc(), 'Python.h')))\"" OUTPUT_VARIABLE PYTHON_HEADERS RETURN_VALUE PYTHON_HEADERS_RC)
			exec_program("${INTERPRETER_PATH}" ARGS "-c \"from distutils.sysconfig import get_python_inc; import numpy; print(';' + get_python_inc() + ';' + numpy.get_include());\"" OUTPUT_VARIABLE PYTHON_CPP_FLAGS RETURN_VALUE PYTHON_CPP_RC)
			exec_program("${PY_CONFIG_FILE}" ARGS "--ldflags" OUTPUT_VARIABLE PYTHON_LD_FLAGS RETURN_VALUE PYTHON_LD_RC)
			if(PYTHON_HEADERS_RC EQUAL 0 AND PYTHON_HEADERS STREQUAL "True" AND PYTHON_HEADERS_RC EQUAL 0 AND PYTHON_CPP_RC EQUAL 0 AND PYTHON_LD_RC EQUAL 0)
				set(${HAVE_NUMPY} YES PARENT_SCOPE)
				set(${PY_INCLUDES} "${PYTHON_CPP_FLAGS}" PARENT_SCOPE)
				set(${PY_LIBS} "${PYTHON_LD_FLAGS}" PARENT_SCOPE)
			elseif(${INTEGRATION_ENABLED} STREQUAL "AUTO")
				message(WARN " Python.h not found")
			else()
				message(FATAL_ERROR "Python.h not found")
			endif()
		elseif(${INTEGRATION_ENABLED} STREQUAL "AUTO")
			message(WARN " (numpy/arrayobject.h not found)")
		else()
			message(FATAL_ERROR "(numpy/arrayobject.h not found)")
		endif()
	elseif(${INTEGRATION_ENABLED} STREQUAL "AUTO")
		message(WARN " numpy version >= 1.7.0 required for Python ${PY_VERSION} integration support")
	else()
		message(FATAL_ERROR "numpy version >= 1.7.0 required for Python ${PY_VERSION} integration support")
	endif()
endfunction()

set(PY2_INCS "")
set(PY2_LIBS "")
set(PYTHON2CONFIG "AUTO" CACHE STRING "python2-config is installed as FILE")
set(ENABLE_PY2INTEGRATION "AUTO" CACHE STRING "Enable support for Python 2 integration into MonetDB (default=auto)") # Check with HAVE_LIBPY
if(NOT ${ENABLE_PY2INTEGRATION} STREQUAL "NO")
	testPythonIntegration(HAVE_LIBPY PY2_INCS PY2_LIBS "2" ${ENABLE_PY2INTEGRATION} ${PYTHON2_INTERPRETER} ${PYTHON2CONFIG})
endif()

set(PY3_INCS "")
set(PY3_LIBS "")
set(PYTHON3CONFIG "AUTO" CACHE STRING "python3-config is installed as FILE")
set(ENABLE_PY3INTEGRATION "AUTO" CACHE STRING "enable support for Python 3 integration into MonetDB (default=auto)") # Check with HAVE_LIBPY3
if(NOT ${ENABLE_PY3INTEGRATION} STREQUAL "NO")
	testPythonIntegration(HAVE_LIBPY3 PY3_INCS PY3_LIBS "3" ${ENABLE_PY3INTEGRATION} ${PYTHON3_INTERPRETER} ${PYTHON3CONFIG})
endif()

check_symbol_exists("semtimedop" "sys/types.h;sys/ipc.h;sys/sem.h" HAVE_SEMTIMEDOP)
check_symbol_exists("fork" "sys/types.h;unistd.h" HAVE_FORK)

set(ODBC_INCS "") # OK to be outside WITH_UNIXODBC definition
set(ODBC_LIBS "")
set(ODBC_LIBRARIES "")
set(ENABLE_ODBC "AUTO" CACHE STRING "Compile the MonetDB ODBC driver (default=auto)") # Check with HAVE_UNIXODBC
if(NOT ${ENABLE_ODBC} STREQUAL "NO")

	set(WITH_UNIXODBC "AUTO" CACHE STRING "unixODBC library is installed in DIR")
	if(NOT ${WITH_UNIXODBC} STREQUAL "NO")
		set(HAVE_UNIXODBC YES)
		if(NOT ${WITH_UNIXODBC} MATCHES "^YES|AUTO$")
			set(ODBC_INCS "${WITH_UNIXODBC}/include")
			set(ODBC_LIBS "${WITH_UNIXODBC}/lib")
			set(CMAKE_REQUIRED_INCLUDES "${CMAKE_REQUIRED_INCLUDES};${ODBC_INCS}")
			set(CMAKE_REQUIRED_LINK_OPTIONS "${CMAKE_REQUIRED_LINK_OPTIONS};${ODBC_LIBS}")
		endif()

		check_include_file("odbcinst.h" HAVE_ODBCINST_H)
		if(NOT HAVE_ODBCINST_H)
			if(${WITH_UNIXODBC} STREQUAL "YES")
				message(FATAL_ERROR "odbcinst.h not found")
			else()
				set(HAVE_UNIXODBC NO)
				message(WARN " odbcinst.h not found")
			endif()
		endif()

		set(CMAKE_REQUIRED_LIBRARIES "${CMAKE_REQUIRED_LIBRARIES};odbcinst")
		check_symbol_exists("SQLGetPrivateProfileString" "odbcinst.h" HAVE_SQLGETPRIVATEPROFILESTRING)
		set(CMAKE_REQUIRED_LIBRARIES "${PREV_CMAKE_REQUIRED_LIBRARIES}")
		if(HAVE_SQLGETPRIVATEPROFILESTRING)
			set(ODBC_LIBRARIES "${ODBC_LIBRARIES} odbcinst")
			set(HAVE_SQLGETPRIVATEPROFILESTRING ON)
		elseif(${WITH_UNIXODBC} STREQUAL "YES")
			message(FATAL_ERROR "odbcinst library not found")
		else()
			set(HAVE_UNIXODBC NO)
			message(WARN " odbcinst library not found")
		endif()

		set(CMAKE_REQUIRED_LIBRARIES "${CMAKE_REQUIRED_LIBRARIES};odbc")
		check_symbol_exists("SQLGetDiagRec" "odbcinst.h" HAVE_SQLGETDIAGREC)
		set(CMAKE_REQUIRED_LIBRARIES "${PREV_CMAKE_REQUIRED_LIBRARIES}")
		if(HAVE_SQLGETDIAGREC)
			set(ODBC_LIBRARIES "${ODBC_LIBRARIES} odbc")
		elseif(${WITH_UNIXODBC} STREQUAL "YES")
			message(FATAL_ERROR "odbc library not found")
		else()
			set(HAVE_UNIXODBC NO)
			message(WARN " odbc library not found")
		endif()

		message(STATUS "Checking SQLColAttribute uses SQLLEN * or SQLPOINTER")
		check_c_source_runs("
			#include <sql.h>

			SQLRETURN SQL_API
			SQLColAttribute(SQLHSTMT hStmt, SQLUSMALLINT nCol, SQLUSMALLINT nFieldIdentifier, SQLPOINTER pszValue, SQLSMALLINT nValueLengthMax, SQLSMALLINT *pnValueLength, SQLLEN *pnValue) {
				(void) hStmt; (void) nCol; (void) nFieldIdentifier; (void) pszValue; (void) nValueLengthMax; (void) pnValueLength; (void) pnValue;
				return SQL_SUCCESS;
			}

			int main(int argc, char **argv) {
				(void) argc; (void) argv;
				return SQLColAttribute(0,0,0,0,0,0,0);
			}
		" SQL_COL_TEST)
		if(SQL_COL_TEST)
			message(STATUS "Using 'SQLLEN *' as SQLColAttribute")
			set(LENP_OR_POINTER_T "SQLLEN *")
		else()
			message(STATUS "Using 'SQLPOINTER' as SQLColAttribute")
			set(LENP_OR_POINTER_T "SQLPOINTER")
		endif()

		set(CMAKE_EXTRA_INCLUDE_FILES "${CMAKE_EXTRA_INCLUDE_FILES};sql.h")
		check_type_size(SQLWCHAR SIZEOF_SQLWCHAR LANGUAGE C)
		set(CMAKE_EXTRA_INCLUDE_FILES "${PREV_CMAKE_EXTRA_INCLUDE_FILES}")
		if(NOT HAVE_SIZEOF_SQLWCHAR OR ${SIZEOF_SQLWCHAR} STREQUAL "0")
			if(${WITH_UNIXODBC} STREQUAL "YES")
				message(FATAL_ERROR "could not determine the size of SQLWCHAR")
			else()
				set(HAVE_UNIXODBC NO)
				message(WARN " could not determine the size of SQLWCHAR")
			endif()
		else()
			set(SIZEOF_SQLWCHAR ${SIZEOF_SQLWCHAR})
		endif()

		if(HAVE_UNIXODBC)
			set(HAVE_ODBC YES)
		else()
			if(${WITH_UNIXODBC} STREQUAL "YES")
				message(FATAL_ERROR "unixODBC library required for ODBC driver")
			else()
				message(WARN " unixODBC library required for ODBC driver")
			endif()
		endif()

		set(CMAKE_REQUIRED_INCLUDES "${PREV_CMAKE_REQUIRED_INCLUDES}")
		set(CMAKE_REQUIRED_LINK_OPTIONS "${PREV_CMAKE_REQUIRED_LINK_OPTIONS}")
	endif()
endif()

set(WITH_PROJ "AUTO" CACHE STRING "Include proj support (default=auto)") # Check with PROJ_FOUND
if(NOT ${WITH_PROJ} STREQUAL "NO")
	pkg_search_module(PROJ NO_CMAKE_PATH NO_CMAKE_ENVIRONMENT_PATH proj)

	if(PROJ_FOUND)
		message(STATUS "proj library found")
		set(HAVE_PROJ ON)
	elseif(${WITH_PROJ} STREQUAL "YES")
		message(FATAL_ERROR "proj library not found")
	else()
		message(WARN " proj library not found")
	endif()
endif()

set(SAMTOOLS_INCS "") # OK to be outside WITH_UNIXODBC definition
set(SAMTOOLS_LIBS "")
set(WITH_SAMTOOLS "AUTO" CACHE STRING "Samtools (providing bam library) are installed in DIR") # Check with HAVE_SAMTOOLS_LIB
if(NOT ${WITH_SAMTOOLS} STREQUAL "NO")

	if(NOT ${WITH_SAMTOOLS} MATCHES "^YES|AUTO$")
		set(SAMTOOLS_INCS "${WITH_SAMTOOLS}/include")
		set(SAMTOOLS_LIBS "${WITH_SAMTOOLS}/lib")
		set(CMAKE_REQUIRED_INCLUDES "${CMAKE_REQUIRED_INCLUDES};${SAMTOOLS_INCS}")
		set(CMAKE_REQUIRED_LINK_OPTIONS "${CMAKE_REQUIRED_LINK_OPTIONS};${SAMTOOLS_LIBS}")
	endif()

	check_include_file("samtools/bam.h" HAVE_SAMTOOLS_BAM_H)
	if(NOT HAVE_SAMTOOLS_BAM_H)
		set(SAMTOOLS_ERROR "bam.h header not found")
		check_include_file("bam/bam.h" HAVE_BAM_BAM_H)
		if(HAVE_BAM_BAM_H)
			unset(SAMTOOLS_ERROR)
		else()
			set(SAMTOOLS_ERROR "Neither samtools/bam.h nor bam/bam.h header found")
		endif()
	endif()

	if(NOT SAMTOOLS_ERROR)
		check_include_file("samtools/sam.h" HAVE_SAMTOOLS_SAM_H)
		if(NOT HAVE_SAMTOOLS_SAM_H)
			set(SAMTOOLS_ERROR "samtools/sam.h header not found")
			check_include_file("bam/sam.h" HAVE_BAM_SAM_H)
			if(HAVE_BAM_SAM_H)
				unset(SAMTOOLS_ERROR)
			else()
				set(SAMTOOLS_ERROR "Neither samtools/sam.h nor bam/sam.h header found")
			endif()
		endif()
	endif()

	if(NOT SAMTOOLS_ERROR)
		check_include_file("samtools/bgzf.h" HAVE_SAMTOOLS_BGZF_H)
		if(NOT HAVE_SAMTOOLS_BGZF_H)
			set(SAMTOOLS_ERROR "samtools/bgzf.h header not found")
			check_include_file("bam/bgzf.h" HAVE_BAM_BGZF_H)
			if(HAVE_BAM_BGZF_H)
				unset(SAMTOOLS_ERROR)
			else()
				set(SAMTOOLS_ERROR "Neither samtool/bgzf.h nor bam/bgzf.h header found")
			endif()
		endif()
	endif()

	if(NOT SAMTOOLS_ERROR)
		set(CMAKE_REQUIRED_LIBRARIES "${CMAKE_REQUIRED_LIBRARIES}bam;m;pthread;z")
		check_symbol_exists("bam_header_read" "samtools/bam.h" HAVE_SAMTOOLS)
		if(NOT HAVE_SAMTOOLS)
			set(SAMTOOLS_ERROR "bam library not found")
		endif()
	endif()

	if(NOT SAMTOOLS_ERROR)
		check_include_file("samtools/kstring.h" HAVE_SAMTOOLS_KSTRING_H)
		check_include_file("bam/kstring.h" HAVE_BAM_KSTRING_H)
	endif()

	if(SAMTOOLS_ERROR)
		if(${WITH_SAMTOOLS} STREQUAL "YES")
			message(FATAL_ERROR "${SAMTOOLS_ERROR}")
		else()
			message(WARN " ${SAMTOOLS_ERROR}")
		endif()
	else()
		set(HAVE_SAMTOOLS_LIB YES)
	endif()

	set(CMAKE_REQUIRED_INCLUDES "${PREV_CMAKE_REQUIRED_INCLUDES}")
	set(CMAKE_REQUIRED_LIBRARIES "${PREV_CMAKE_REQUIRED_LIBRARIES}")
	set(CMAKE_REQUIRED_LINK_OPTIONS "${PREV_CMAKE_REQUIRED_LINK_OPTIONS}")
endif()

set(GEOS_INCS "")
set(GEOS_LIBS "")
set(WITH_GEOS "AUTO" CACHE STRING "geos library is installed in DIR") # Check with HAVE_GEOS_LIB
if(NOT ${WITH_GEOS} STREQUAL "NO")
	set(GEOS_VERSION_REQUIRED_MIN "3.4.0")

	if(${WITH_GEOS} MATCHES "^YES|AUTO$")
		set(GEOS_EXECUTABLE "geos-config")
	else()
		set(GEOS_EXECUTABLE "${WITH_GEOS}/bin/geos-config")
	endif()

	exec_program("${GEOS_EXECUTABLE}" ARGS "--version" OUTPUT_VARIABLE GEOS_VERSION RETURN_VALUE GEOS_RC)
	if(GEOS_RC EQUAL 0)
		if(GEOS_VERSION VERSION_GREATER_EQUAL ${GEOS_VERSION_REQUIRED_MIN})

			exec_program("${GEOS_EXECUTABLE}" ARGS "--cflags" OUTPUT_VARIABLE GEOS_INCS RETURN_VALUE GEOS_INCS_RC)
			exec_program("${GEOS_EXECUTABLE}" ARGS "--clibs" OUTPUT_VARIABLE GEOS_LIBS RETURN_VALUE GEOS_LIBS_RC)
			if(NOT GEOS_LIBS_RC EQUAL 0)
				exec_program("${GEOS_EXECUTABLE}" ARGS "--libs" OUTPUT_VARIABLE GEOS_LIBS RETURN_VALUE GEOS_LIBS_RC)
				if(GEOS_LIBS_RC EQUAL 0)
					string(REPLACE "-lgeos" "-lgeos_c" GEOS_LIBS ${GEOS_LIBS})
				endif()
			endif()
			if(GEOS_INCS_RC EQUAL 0 AND GEOS_LIBS_RC EQUAL 0)
				MT_clibsToCmake("${GEOS_INCS}" GEOS_INCS)
				set(HAVE_GEOS_LIB YES)
			elseif(${WITH_GEOS} STREQUAL "YES")
				message(FATAL_ERROR "could not determine geos cflags and clibs")
			else()
				message(WARN " could not determine geos cflags and clibs")
			endif()
		elseif(${WITH_GEOS} STREQUAL "YES")
			message(FATAL_ERROR "geos version is too old ${GEOS_VERSION} < ${GEOS_VERSION_REQUIRED_MIN}")
		else()
			message(WARN " geos version is too old ${GEOS_VERSION} < ${GEOS_VERSION_REQUIRED_MIN}")
		endif()
	elseif(${WITH_GEOS} STREQUAL "YES")
		message(FATAL_ERROR "geos-config not found")
	else()
		message(WARN " geos-config not found")
	endif()
endif()

if(NOT HAVE_GEOS_LIB)
	if(${ENABLE_GEOM} STREQUAL "YES")
		message(FATAL_ERROR "geos library required for geom module")
	else()
		set(HAVE_GEOM OFF)
	endif()
endif()

set(WITH_GDAL "AUTO" CACHE STRING "Include gdal support (default=auto)") # Check with GDAL_FOUND
if(${WITH_GDAL} STREQUAL "NO")
	if(HAVE_GEOM)
		message(FATAL_ERROR "geom module required for gdal")
	else()
		set(HAVE_GEOM OFF)
	endif()
	if(${ENABLE_SHP} STREQUAL "YES")
		message(FATAL_ERROR "geom module required for shp")
	else()
		set(ENABLE_SHP "NO")
	endif()
endif()

if(NOT ${WITH_GDAL} STREQUAL "NO")
	include(FindGDAL)

	if(GDAL_FOUND)
		message(STATUS "gdal library found")
	elseif(${ENABLE_SHP} STREQUAL "YES")
		message(FATAL_ERROR "gdal library required for ESRI Shapefile vault")
	endif()
endif()

set(ENABLE_FITS "AUTO" CACHE STRING "Enable support for FITS (default=auto)")
if(NOT ${ENABLE_FITS} STREQUAL "NO") # Check with CFITSIO_FOUND
	pkg_search_module(CFITSIO NO_CMAKE_PATH NO_CMAKE_ENVIRONMENT_PATH cfitsio)

	if(CFITSIO_FOUND)
		message(STATUS "cfitsio library found")
		set(HAVE_FITS ON)
	elseif(${ENABLE_FITS} STREQUAL "YES")
		message(FATAL_ERROR "cfitsio library required for FITS support")
	endif()
endif()

set(ENABLE_NETCDF "AUTO" CACHE STRING "Enable support for netcdf (default=auto)")
if(NOT ${ENABLE_NETCDF} STREQUAL "NO") # Check with NETCDF_FOUND
	pkg_search_module(NETCDF NO_CMAKE_PATH NO_CMAKE_ENVIRONMENT_PATH netcdf>=4.2)

	if(NETCDF_FOUND)
		message(STATUS "netcdf library found")
		set(HAVE_NETCDF ON)
	elseif(${ENABLE_NETCDF} STREQUAL "YES")
		message(FATAL_ERROR "netcdf library required for NetCDF support")
	endif()
endif()

set(LIBLAS_INCS "")
set(LIBLAS_LIBS "")
set(WITH_LIBLAS "AUTO" CACHE STRING "liblas library is installed in DIR") # Check with HAVE_LIBLAS_LIB
if(NOT ${WITH_LIBLAS} STREQUAL "NO")
	set(LIBLAS_VERSION_REQUIRED_MIN "1.8.0")

	if(${WITH_LIBLAS} MATCHES "^YES|AUTO$")
		set(LIBLAS_EXECUTABLE "liblas-config")
	else()
		set(LIBLAS_EXECUTABLE "${WITH_LIBLAS}/bin/liblas-config")
	endif()

	exec_program("${LIBLAS_EXECUTABLE}" ARGS "--version" OUTPUT_VARIABLE LIBLAS_VERSION RETURN_VALUE LIBLAS_RC)
	if(LIBLAS_RC EQUAL 0)
		if(LIBLAS_VERSION VERSION_GREATER_EQUAL ${LIBLAS_VERSION_REQUIRED_MIN})

			exec_program("${LIBLAS_EXECUTABLE}" ARGS "--includes" OUTPUT_VARIABLE LIBLAS_INCS RETURN_VALUE LIBLAS_INCS_RC)
			exec_program("${LIBLAS_EXECUTABLE}" ARGS "--libs" OUTPUT_VARIABLE LIBLAS_LIBS RETURN_VALUE LIBLAS_LIBS_RC)
			if(LIBLAS_INCS_RC EQUAL 0 AND LIBLAS_LIBS_RC EQUAL 0)

				MT_clibsToCmake(${LIBLAS_INCS} LIBLAS_INCS)
				set(CMAKE_REQUIRED_INCLUDES "${CMAKE_REQUIRED_INCLUDES}${LIBLAS_INCS}") # the regex should add the ;
				check_include_file("liblas/capi/liblas.h" HAVE_LIBLAS_LIB)
				set(CMAKE_REQUIRED_INCLUDES "${PREV_CMAKE_REQUIRED_INCLUDES}")
				if(NOT HAVE_LIBLAS_LIB)
					if(${WITH_LIBLAS} STREQUAL "YES")
						message(FATAL_ERROR "liblas/capi/liblas.h header file not found")
					else()
						message(WARN " liblas/capi/liblas.h header file not found")
					endif()
				endif()
			elseif(${WITH_LIBLAS} STREQUAL "YES")
				message(FATAL_ERROR "could not determine LIBLAS cflags and clibs")
			else()
				message(WARN " could not determine LIBLAS cflags and clibs")
			endif()
		elseif(${WITH_LIBLAS} STREQUAL "YES")
			message(FATAL_ERROR "liblas version is too old ${LIBLAS_VERSION} < ${LIBLAS_VERSION_REQUIRED_MIN}")
		else()
			message(WARN " liblas version is too old ${LIBLAS_VERSION} < ${LIBLAS_VERSION_REQUIRED_MIN}")
		endif()
	elseif(${WITH_LIBLAS} STREQUAL "YES")
		message(FATAL_ERROR "liblas-config not found")
	else()
		message(WARN " liblas-config not found")
	endif()
endif()

if(NOT HAVE_LIBLAS_LIB)
	if(${ENABLE_LIDAR} STREQUAL "YES")
		message(FATAL_ERROR "liblas library required for lidar module")
	else()
		set(ENABLE_LIDAR "NO")
	endif()
endif()

set(WITH_ATOMIC_OPS "AUTO" CACHE STRING "Use atomic_ops library (default=auto)") # Check with HAVE_LIBATOMIC_OPS
if(NOT ${WITH_ATOMIC_OPS} STREQUAL "NO")
	pkg_search_module(ATOMIC_OPS NO_CMAKE_PATH NO_CMAKE_ENVIRONMENT_PATH atomic_ops)

	if(ATOMIC_OPS_FOUND)
		if("${CMAKE_C_COMPILER_ID}" STREQUAL "Intel")
			message(WARN " atomic_ops does not compile with Intel's icc")
		else()
			check_include_file("atomic_ops.h" HAVE_ATOMIC_OPS_H)
			if(HAVE_ATOMIC_OPS_H)
				set(HAVE_LIBATOMIC_OPS ON)
			elseif(${WITH_ATOMIC_OPS} STREQUAL "YES")
				message(FATAL_ERROR "atomic_ops was incorrectly installed (happens on at least Solaris/OpenIndiana)")
			else()
				message(WARN " atomic_ops was incorrectly installed (happens on at least Solaris/OpenIndiana)")
			endif()
		endif()
	elseif(${WITH_ATOMIC_OPS} STREQUAL "YES")
		message(FATAL_ERROR "atomic_ops library not found")
	endif()
endif()

# Header files
check_include_file("dirent.h" HAVE_DIRENT_H)
check_include_file("dispatch/dispatch.h" HAVE_DISPATCH_DISPATCH_H)
check_include_file("dlfcn.h" HAVE_DLFCN_H)
check_include_file("execinfo.h" HAVE_EXECINFO_H)
check_include_file("fcntl.h" HAVE_FCNTL_H)
check_include_file("getopt.h" HAVE_GETOPT_H)
check_include_file("io.h" HAVE_IO_H)
check_include_file("langinfo.h" HAVE_LANGINFO_H)
check_include_file("libgen.h" HAVE_LIBGEN_H)
check_include_file("libintl.h" HAVE_LIBINTL_H)
check_include_file("mach/mach_init.h" HAVE_MACH_MACH_INIT_H)
check_include_file("mach/task.h" HAVE_MACH_TASK_H)
check_include_file("mach-o/dyld.h" HAVE_MACH_O_DYLD_H)
check_include_file("netdb.h" HAVE_NETDB_H)
check_include_file("netinet/in.h" HAVE_NETINET_IN_H)
check_include_file("procfs.h" HAVE_PROCFS_H)
check_include_file("pwd.h" HAVE_PWD_H)
check_include_file("strings.h" HAVE_STRINGS_H)
check_include_file("stropts.h" HAVE_STROPTS_H)
check_include_file("sys/file.h" HAVE_SYS_FILE_H)
check_include_file("sys/ioctl.h" HAVE_SYS_IOCTL_H)
check_include_file("sys/mman.h" HAVE_SYS_MMAN_H)
check_include_file("sys/param.h" HAVE_SYS_PARAM_H)
check_include_file("sys/resource.h" HAVE_SYS_RESOURCE_H)
check_include_file("sys/socket.h" HAVE_SYS_SOCKET_H)
check_include_file("sys/stat.h" HAVE_SYS_STAT_H)
if(${CMAKE_SYSTEM_NAME} STREQUAL "OpenBSD") # on OpenBSD, sys/sysctl.h requires sys/param.h to be included beforehand
	check_include_files("sys/param.h;sys/sysctl.h" HAVE_SYS_SYSCTL_H)
else()
	check_include_file("sys/sysctl.h" HAVE_SYS_SYSCTL_H)
endif()
check_include_file("sys/time.h" HAVE_SYS_TIME_H)
check_include_file("sys/times.h" HAVE_SYS_TIMES_H)
check_include_file("sys/types.h" HAVE_SYS_TYPES_H)
check_include_file("sys/uio.h" HAVE_SYS_UIO_H)
check_include_file("sys/un.h" HAVE_SYS_UN_H)
check_include_file("sys/utime.h" HAVE_SYS_UTIME_H)
check_include_file("sys/wait.h" HAVE_SYS_WAIT_H)
check_include_file("termios.h" HAVE_TERMIOS_H)
check_include_file("unistd.h" HAVE_UNISTD_H)
check_include_file("uuid/uuid.h" HAVE_UUID_UUID_H)
check_include_file("winsock.h" HAVE_WINSOCK_H)

# Socket libraries
set(SOCKET_LIBRARIES )
check_symbol_exists("gethostbyname" "netdb.h;sys/socket.h" HAVE_GETHOSTBYNAME)
if(NOT HAVE_GETHOSTBYNAME)
	message(STATUS "Trying to find gethostbyname by linking to nsl")
	set(CMAKE_REQUIRED_LIBRARIES "${PREV_CMAKEEQUIRED_LIBRARIES};nsl")
	check_symbol_exists("gethostbyname" "netdb.h;sys/socket.h" HAVE_GETHOSTBYNAME)
	if(HAVE_GETHOSTBYNAME)
		list(APPEND SOCKET_LIBRARIES nsl)
	else()
		message(FATAL_ERROR "Could not find gethostbyname symbol")
	endif()
	set(CMAKE_REQUIRED_LIBRARIES "${PREV_CMAKE_REQUIRED_LIBRARIES}")
endif()

check_symbol_exists("hstrerror" "netdb.h;sys/socket.h" HAVE_HSTERROR)
if(NOT HAVE_HSTERROR)
	message(STATUS "Trying to find hstrerror by linking to resolv")
	set(CMAKE_REQUIRED_LIBRARIES "${PREV_CMAKE_REQUIRED_LIBRARIES};resolv")
	check_symbol_exists("hstrerror" "netdb.h;sys/socket.h" HAVE_HSTERROR)
	if(HAVE_HSTERROR)
		list(APPEND SOCKET_LIBRARIES resolv)
	else()
		message(FATAL_ERROR "Could not find hstrerror symbol")
	endif()
	set(CMAKE_REQUIRED_LIBRARIES "${PREV_CMAKE_REQUIRED_LIBRARIES}")
endif()

check_symbol_exists("setsockopt" "sys/types.h;sys/socket.h" HAVE_SETSOCKOPT)
if(NOT HAVE_SETSOCKOPT)
	message(STATUS "Trying to find setsockopt by linking to socket")
	set(CMAKE_REQUIRED_LIBRARIES "${PREV_CMAKE_REQUIRED_LIBRARIES};socket")
	check_symbol_exists("setsockopt" "sys/types.h;sys/socket.h" HAVE_SETSOCKOPT)
	if(HAVE_SETSOCKOPT)
		list(APPEND SOCKET_LIBRARIES socket)
	else()
		message(FATAL_ERROR "Could not find setsockopt symbol")
	endif()
	set(CMAKE_REQUIRED_LIBRARIES "${PREV_CMAKE_REQUIRED_LIBRARIES}")
endif()

check_symbol_exists("getaddrinfo" "sys/types.h;sys/socket.h;netdb.h" HAVE_GETADDRINFO)
if(NOT HAVE_GETADDRINFO)
	message(STATUS "Trying to find getaddrinfo by linking to socket")
	set(CMAKE_REQUIRED_LIBRARIES "${PREV_CMAKE_REQUIRED_LIBRARIES};socket")
	check_symbol_exists("getaddrinfo" "sys/types.h;sys/socket.h;netdb.h" HAVE_GETADDRINFO)
	if(HAVE_GETADDRINFO)
		list(FIND ${SOCKET_LIBRARIES} socket LINKED_TO_SOCKET)
		if(NOT LINKED_TO_SOCKET)
			list(APPEND SOCKET_LIBRARIES socket)
		endif()
	else()
		message(STATUS "Trying to find getaddrinfo by linking to nsl")
		set(CMAKE_REQUIRED_LIBRARIES "${PREV_CMAKE_REQUIRED_LIBRARIES};nsl")
		check_symbol_exists("getaddrinfo" "sys/types.h;sys/socket.h;netdb.h" HAVE_GETADDRINFO)
		if(HAVE_GETADDRINFO)
			list(FIND ${SOCKET_LIBRARIES} nsl LINKED_TO_NSL)
			if(NOT LINKED_TO_NSL)
				list(APPEND SOCKET_LIBRARIES nsl)
			endif()
		else()
			message(FATAL_ERROR "Could not find getaddrinfo symbol")
		endif()
	endif()
	set(CMAKE_REQUIRED_LIBRARIES "${PREV_CMAKE_REQUIRED_LIBRARIES}")
endif()

if(HAVE_WINSOCK_H)
	set(CMAKE_EXTRA_INCLUDE_FILES "${CMAKE_EXTRA_INCLUDE_FILES};winsock.h")
else()
	set(CMAKE_EXTRA_INCLUDE_FILES "${CMAKE_EXTRA_INCLUDE_FILES};sys/types.h;sys/socket.h")
endif()
check_type_size(SOCKET SIZEOF_SOCKET LANGUAGE C)
if(NOT HAVE_SIZEOF_SOCKET OR "${SIZEOF_SOCKET}" STREQUAL "0")
	set(SOCKET int)
endif()
check_type_size(socklen_t SIZEOF_SOCKETLEN_T LANGUAGE C)
if(HAVE_SIZEOF_SOCKETLEN_T AND NOT "${SIZEOF_SOCKETLEN_T}" STREQUAL "0")
	set(HAVE_SOCKLEN_T ON)
else()
	set(socklen_t int)
endif()
set(CMAKE_EXTRA_INCLUDE_FILES "${PREV_CMAKE_EXTRA_INCLUDE_FILES}")

check_type_size(size_t SIZEOF_SIZE_T LANGUAGE C)
if(HAVE_SIZEOF_SIZE_T AND NOT "${SIZEOF_SIZE_T}" STREQUAL "0")
	set(SIZEOF_SIZE_T ${SIZEOF_SIZE_T})
else()
	set(size_t "unsigned int")
endif()
check_type_size(ssize_t SIZEOF_SSIZE_T LANGUAGE C)
if(HAVE_SIZEOF_SSIZE_T AND NOT "${SIZEOF_SSIZE_T}" STREQUAL "0")
	set(SIZEOF_SSIZE_T ${SIZEOF_SSIZE_T})
elseif(CMAKE_SIZEOF_VOID_P EQUAL 8 AND MSVC) # Windows 64 bit
	set(ssize_t "int64_t")
	set(SIZEOF_SSIZE_T 8)
else()
	set(ssize_t "int")
	set(SIZEOF_SSIZE_T 4)
endif()

check_type_size(pid_t SIZEOF_PID_T LANGUAGE C)
if(NOT HAVE_SIZEOF_PID_T OR "${SIZEOF_PID_T}" STREQUAL "0")
	set(pid_t int)
endif()
check_type_size(off_t SIZEOF_OFF_T LANGUAGE C)
if(NOT HAVE_SIZEOF_OFF_T OR "${SIZEOF_OFF_T}" STREQUAL "0")
	set(off_t int)
endif()

set(ENABLE_INT128 "AUTO" CACHE STRING "Enable support for 128-bit integers (default=auto)")
if(NOT ${ENABLE_INT128} STREQUAL "NO")
	check_type_size(__int128 SIZEOF___INT128 LANGUAGE C)
	if(HAVE_SIZEOF___INT128 AND NOT "${SIZEOF___INT128}" STREQUAL "0")
		set(SIZEOF___INT128 ${SIZEOF___INT128})
		set(HAVE___INT128 ON)
	endif()

	check_type_size(__int128_t SIZEOF___INT128_T LANGUAGE C)
	if(HAVE_SIZEOF___INT128_T AND NOT "${SIZEOF___INT128_T}" STREQUAL "0")
		set(SIZEOF___INT128_T ${SIZEOF___INT128_T})
		set(HAVE___INT128_T ON)
	endif()

	check_type_size(__uint128_t SIZEOF___UINT128_T LANGUAGE C)
	if(HAVE_SIZEOF___UINT128_T AND NOT "${SIZEOF___UINT128_T}" STREQUAL "0")
		set(HAVE___UINT128_T ON)
	endif()

	if(HAVE_SIZEOF___INT128 OR HAVE_SIZEOF___INT128_T OR HAVE_SIZEOF___UINT128_T)
		set(HAVE_HGE ON)
	elseif(${ENABLE_INT128} STREQUAL "YES")
		message(FATAL_ERROR "128-bit integers not supported by platform")
	else()
		message(WARN " 128-bit integers not supported by platform")
	endif()
endif()

check_type_size(char CHAR LANGUAGE C)
if(HAVE_CHAR AND NOT "${CHAR}" STREQUAL "0")
	set(SIZEOF_CHAR ${CHAR})
endif()
check_type_size(short SHORT LANGUAGE C)
if(HAVE_SHORT AND NOT "${SHORT}" STREQUAL "0")
	set(SIZEOF_SHORT ${SHORT})
endif()
check_type_size(int INT LANGUAGE C)
if(HAVE_INT AND NOT "${INT}" STREQUAL "0")
	set(SIZEOF_INT ${INT})
endif()
check_type_size(long LONG LANGUAGE C)
if(HAVE_LONG AND NOT "${LONG}" STREQUAL "0")
	set(SIZEOF_LONG ${LONG})
endif()
check_type_size(void* VOID_P LANGUAGE C)
if(HAVE_VOID_P AND NOT "${VOID_P}" STREQUAL "0")
	set(SIZEOF_VOID_P ${VOID_P})
endif()
check_type_size(wchar_t WCHAR_T LANGUAGE C)
if(HAVE_WCHAR_T AND NOT "${WCHAR_T}" STREQUAL "0")
	set(SIZEOF_WCHAR_T ${WCHAR_T})
endif()

check_symbol_exists("accept4" "sys/types.h;sys/socket.h" HAVE_ACCEPT4)
check_symbol_exists("asctime_r" "time.h" HAVE_ASCTIME_R)
check_symbol_exists("asctime_s" "time.h" HAVE_ASCTIME_S3)
check_symbol_exists("backtrace" "execinfo.h" HAVE_BACKTRACE)
check_symbol_exists("clock_gettime" "time.h" HAVE_CLOCK_GETTIME)
check_symbol_exists("ctime_r" "time.h" HAVE_CTIME_R)
check_symbol_exists("ctime_s" "time.h" HAVE_CTIME_S3)
check_symbol_exists("dispatch_semaphore_create" "dispatch/dispatch.h" HAVE_DISPATCH_SEMAPHORE_CREATE)
check_symbol_exists("fallocate" "fcntl.h" HAVE_FALLOCATE)
check_symbol_exists("fcntl" "unistd.h;fcntl.h" HAVE_FCNTL)
if(NOT(${CMAKE_SYSTEM_NAME} STREQUAL "Darwin" AND CMAKE_SYSTEM_VERSION VERSION_LESS_EQUAL 17))
	check_symbol_exists("fdatasync" "unistd.h" HAVE_FDATASYNC)
endif()
check_symbol_exists("fseeko" "stdio.h" HAVE_FSEEKO)
check_symbol_exists("fsync" "unistd.h" HAVE_FSYNC)
check_symbol_exists("ftime" "sys/timeb.h" HAVE_FTIME)
check_symbol_exists("GetDynamicTimeZoneInformation" "Windows.h" HAVE_GETDYNAMICTIMEZONEINFORMATION)
check_symbol_exists("getexecname" "stdlib.h" HAVE_GETEXECNAME)
check_symbol_exists("getlogin" "unistd.h" HAVE_GETLOGIN)
check_symbol_exists("getopt" "unistd.h" HAVE_GETOPT)
check_symbol_exists("getopt_long" "unistd.h;getopt.h" HAVE_GETOPT_LONG)
check_symbol_exists("gettimeofday" "sys/time.h" HAVE_GETTIMEOFDAY)
check_symbol_exists("getuid" "unistd.h;sys/types.h" HAVE_GETUID)
check_symbol_exists("localtime_r" "time.h" HAVE_LOCALTIME_R)
check_symbol_exists("localtime_s" "time.h" HAVE_LOCALTIME_S)
check_symbol_exists("lockf" "unistd.h" HAVE_LOCKF)
check_symbol_exists("lstat" "sys/types.h;sys/stat.h;unistd.h" HAVE_LSTAT)
check_symbol_exists("madvise" "sys/mman.h" HAVE_MADVISE)
check_symbol_exists("mremap" "sys/mman.h" HAVE_MREMAP)
check_symbol_exists("nl_langinfo" "langinfo.h" HAVE_NL_LANGINFO)
check_symbol_exists("_NSGetExecutablePath" "mach-o/dyld.h" HAVE__NSGETEXECUTABLEPATH)
check_symbol_exists("pipe2" "fcntl.h;unistd.h" HAVE_PIPE2)
check_symbol_exists("popen" "stdio.h" HAVE_POPEN)
check_symbol_exists("posix_fadvise" "fcntl.h" HAVE_POSIX_FADVISE)
check_symbol_exists("posix_fallocate" "fcntl.h" HAVE_POSIX_FALLOCATE)
check_symbol_exists("posix_madvise" "sys/mman.h" HAVE_POSIX_MADVISE)
check_symbol_exists("putenv" "stdlib.h" HAVE_PUTENV)
check_symbol_exists("setenv" "stdlib.h" HAVE_SETENV)
check_symbol_exists("setsid" "sys/types.h;unistd.h" HAVE_SETSID)
check_symbol_exists("shutdown" "sys/socket.h" HAVE_SHUTDOWN)
check_symbol_exists("sigaction" "signal.h" HAVE_SIGACTION)
check_symbol_exists("stpcpy" "string.h" HAVE_STPCPY)
check_symbol_exists("strcasestr" "string.h" HAVE_STRCASESTR)
check_symbol_exists("strncasecmp" "strings.h" HAVE_STRNCASECMP)
check_symbol_exists("strptime" "time.h" HAVE_STRPTIME) # TODO check _XOPEN_SOURCE ?
check_symbol_exists("strtok_r" "string.h" HAVE_STRTOK_R)
check_symbol_exists("strtok_s" "string.h" HAVE_STRTOK_S)
check_symbol_exists("sysconf" "unistd.h" HAVE_SYSCONF)
check_symbol_exists("task_info" "mach/task_info.h" HAVE_TASK_INFO)
check_symbol_exists("times" "sys/times.h" HAVE_TIMES)
check_symbol_exists("uname" "sys/utsname.h" HAVE_UNAME)
check_symbol_exists("_wfopen" "stdio.h" HAVE__WFOPEN)
check_symbol_exists("_mul128" "intrin.h" HAVE__MUL128)
check_symbol_exists("_stat64" "sys/types.h;sys/stat.h" HAVE_STAT64)

if(HAVE_ASCTIME_R)
	message(STATUS "Test if asctime_r takes 3 arguments")
	check_c_source_compiles("
		#include <time.h>

		int main(int argc, char **argv) {
			char buf[26]; struct tm t;
			(void) argc; (void) argv; (void) t; (void) buf;
			asctime_r(&t,buf,26);
			return 0;
		}" HAVE_ASCTIME_R3)
endif()

if(HAVE_CTIME_R)
	message(STATUS "Test if ctime_r takes 3 arguments")
	check_c_source_compiles("
		#include <time.h>

		int main(int argc, char **argv) {
			char buf[26]; struct tm t;
			(void) argc; (void) argv; (void) t; (void) buf;
			ctime_r(&t,buf,26);
			return 0;
		}" HAVE_CTIME_R3)
endif()

message(STATUS "Check for diff program")
exec_program("gdiff" ARGS "--version" OUTPUT_VARIABLE GDIFF_OUPUT RETURN_VALUE GDIFF_RETURN_CODE)
if(GDIFF_RETURN_CODE EQUAL 0 AND GDIFF_OUPUT)
	set(DIFF "gdiff")
	message(STATUS "gdiff program found")
else()
	exec_program("diff" ARGS "--version" OUTPUT_VARIABLE DIFF_OUPUT RETURN_VALUE DIFF_RETURN_CODE)
	if(DIFF_RETURN_CODE EQUAL 0 AND DIFF_OUPUT)
		set(DIFF "diff")
		message(STATUS "diff program found")
	else()
		message(WARN "No diff program found")
	endif()
endif()

if(${ENABLE_SQL} STREQUAL "YES" AND ${ENABLE_MONETDB5} STREQUAL "NO")
	message(FATAL_ERROR "MonetDB/SQL requires MonetDB5: ${WHY_NOT_MONETDB5}")
endif()
if(NOT ${ENABLE_SQL} STREQUAL "NO")
	set(HAVE_SQL YES)
endif()
if(NOT ${ENABLE_MONETDB5} STREQUAL "NO")
	set(HAVE_MONETDB5 YES)
endif()

site_name(BUILD_HOST)
set(BUILT_BY "$ENV{USER}@${BUILD_HOST}")
set(COMPILER_CALL "${CMAKE_C_COMPILER}${CMAKE_C_FLAGS}")
set(LINKER_CALL "${CMAKE_LINKER}${CMAKE_REQUIRED_FLAGS}")

# instalation directories
if(UNIX)
	include(GNUInstallDirs REQUIRED)

	set(LOGDIR "${CMAKE_INSTALL_FULL_LOCALSTATEDIR}/log/monetdb" CACHE STRING "Where to put log files (LOCALSTATEDIR/log/monetdb)")
	set(RUNDIR "${CMAKE_INSTALL_FULL_LOCALSTATEDIR}/run/monetdb" CACHE STRING "Where to put pid files (LOCALSTATEDIR/run/monetdb)")
	set(BINDIR "${CMAKE_INSTALL_FULL_BINDIR}")
	set(DATA_DIR "${CMAKE_INSTALL_FULL_DATAROOTDIR}")
	set(LIBDIR "${CMAKE_INSTALL_FULL_LIBDIR}")
	set(LOCALSTATEDIR "${CMAKE_INSTALL_FULL_LOCALSTATEDIR}")
	set(INCLUDEDIR "${CMAKE_INSTALL_FULL_INCLUDEDIR}/monetdb")
	set(PKGCONFIGDIR "${LIBDIR}/pkgconfig")
endif()

configure_file(${CMAKE_SOURCE_DIR}/cmake/monetdb_config.h.in ${CMAKE_SOURCE_DIR}/monetdb_config.h)
include_directories(${CMAKE_SOURCE_DIR})

#add_subdirectory(buildtools)
add_subdirectory(common)
add_subdirectory(clients)
if(HAVE_GDK)
	add_subdirectory(gdk)
endif()
if(HAVE_MONETDB5)
	add_subdirectory(monetdb5)
endif()
if(HAVE_SQL)
	add_subdirectory(sql)
endif()
#[[if(HAVE_GEOM)
	add_subdirectory(geom)
endif()
add_subdirectory(tools)
if(HAVE_TESTING)
	add_subdirectory(testing)
endif()#]]
