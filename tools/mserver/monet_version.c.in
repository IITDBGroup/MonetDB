/* -*-C-*- */

/*
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0.  If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * Copyright 1997 - July 2008 CWI, August 2008 - 2019 MonetDB B.V.
 */

#include "monetdb_config.h"
#include "mal.h"
#include "monet_version.h"
#include "mutils.h"
#ifdef HAVE_LIBPCRE
#include <pcre.h>
#endif
#ifdef HAVE_OPENSSL
#include <openssl/opensslconf.h>
#include <openssl/opensslv.h>
#include <openssl/crypto.h>
#endif
#ifdef HAVE_LIBXML
#include <libxml/xmlversion.h>
#endif

#define STRING(a)  # a
#define XSTRING(s) STRING(s)

#if defined(HAVE_LIBPCRE) || defined(HAVE_OPENSSL)
static void
print_libversion(const char *lib, const char *rtvers, const char *cmvers)
{
	MT_fprintf(stdout, "  %s: %s", lib, rtvers);
	if (strcmp(rtvers, cmvers) != 0)
		MT_fprintf(stdout, " (compiled with %s)", cmvers);
	MT_fprintf(stdout, "\n");
}
#endif

void
monet_version(void)
{
	dbl sz_mem_gb;
	int cores;

	MT_init();  /* for MT_pagesize */
	sz_mem_gb = (dbl)(MT_npages() * MT_pagesize()) / (1024.0 * 1024.0 * 1024.0);
	cores = MT_check_nr_cores();

	const char *rev = mercurial_revision();
	MT_fprintf(stdout, "MonetDB 5 server %s", GDKversion());
	/* coverity[pointless_string_compare] */
	if (strcmp(MONETDB_RELEASE, "unreleased") != 0)
		MT_fprintf(stdout, " (%s)", MONETDB_RELEASE);
	else if (strcmp(rev, "Unknown") != 0)
		MT_fprintf(stdout, " (hg id: %s)", rev);
	MT_fprintf(stdout, " (%zu-bit%s)\n",
			(size_t) (sizeof(ptr) * 8),
#ifdef HAVE_HGE
			", 128-bit integers"
#else
			""
#endif
	);
	/* coverity[pointless_string_compare] */
	if (strcmp(MONETDB_RELEASE, "unreleased") == 0)
		MT_fprintf(stdout, "This is an unreleased version\n");
	MT_fprintf(stdout, "Copyright (c) 1993 - July 2008 CWI\n"
	       "Copyright (c) August 2008 - 2019 MonetDB B.V., all rights reserved\n");
	MT_fprintf(stdout, "Visit https://www.monetdb.org/ for further information\n");
	MT_fprintf(stdout, "Found %.1fGiB available memory, %d available cpu core%s\n",
			sz_mem_gb, cores, cores != 1 ? "s" : "");
	/* don't want to GDKinit just for this
			"using %d thread%s\n",
			GDKnr_threads, GDKnr_threads != 1 ? "s" : ""); */
	MT_fprintf(stdout, "Libraries:\n");
#ifdef HAVE_LIBPCRE
	/* PCRE_PRERELEASE may be defined as an empty value.  In order
	 * to get the proper amount of white space between various
	 * parts of the version string on different compilers (none
	 * between minor and prerelease, a single one between that
	 * combination and the date), we need to resort to some
	 * run-time trickery since we can't do it with the
	 * preprocessor */
	print_libversion("libpcre",
			 pcre_version(),
			 XSTRING(Z PCRE_PRERELEASE)[1] == 0
			 ? XSTRING(PCRE_MAJOR.PCRE_MINOR PCRE_DATE)
			 : XSTRING(PCRE_MAJOR.PCRE_MINOR)
			   XSTRING(PCRE_PRERELEASE PCRE_DATE));
#endif
#ifdef HAVE_OPENSSL
	print_libversion("openssl",
#if OPENSSL_VERSION_NUMBER < 0x10100000
			 OPENSSL_VERSION_TEXT,
#else
			 OpenSSL_version(OPENSSL_VERSION),
#endif
			 OPENSSL_VERSION_TEXT);
#endif
#ifdef HAVE_LIBXML
	/* no run-time version available, so only compile time */
	MT_fprintf(stdout, "  libxml2: %s\n", LIBXML_DOTTED_VERSION);
#endif
	MT_fprintf(stdout, "Compiled by: %s (%s)\n", "@builtby@", HOST);
	MT_fprintf(stdout, "Compilation: %s\n", "@compilercall@");
	MT_fprintf(stdout, "Linking    : %s\n", "@linkercall@");
}
